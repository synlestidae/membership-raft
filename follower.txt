2020-03-29 20:14:38,631 INFO  [test] Loading config from config.second.toml
2020-03-29 20:14:38,632 INFO  [test] Bootstrap node: AppNode { id: 1, name: "main", address: V4(127.0.0.1), port: 5001 }
2020-03-29 20:14:38,632 TRACE [mio::poll] registering with poller
2020-03-29 20:14:38,633 INFO  [test] This node's ID is 10113747759968278795
2020-03-29 20:14:38,633 INFO  [test] Server will run on port 5002
2020-03-29 20:14:38,634 INFO  [test] Waiting for 5 seconds before adding config
2020-03-29 20:14:38,634 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:38,634 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:38,634 DEBUG [test::storage] Handling GetInitialState
2020-03-29 20:14:38,634 DEBUG [test::storage] Members in initial state: MembershipConfig { is_in_joint_consensus: false, members: [10113747759968278795], non_voters: [], removing: [] }
2020-03-29 20:14:38,634 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:38,634 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:38,634 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:38,634 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:38,634 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:42,733 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:43,625 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:43,634 INFO  [test] Adding config
2020-03-29 20:14:43,634 INFO  [test] Successfully added config
2020-03-29 20:14:43,634 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:43,634 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:43,634 INFO  [launch] Configured for staging.
2020-03-29 20:14:43,634 INFO  [launch_] address: 0.0.0.0
2020-03-29 20:14:43,634 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:43,634 INFO  [launch_] port: 5002
2020-03-29 20:14:43,634 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:43,634 INFO  [launch_] log: normal
2020-03-29 20:14:43,635 INFO  [launch_] workers: 24
2020-03-29 20:14:43,635 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:43,635 INFO  [launch_] secret key: generated
2020-03-29 20:14:43,635 INFO  [launch_] limits: forms = 32KiB
2020-03-29 20:14:43,635 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 1, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:43,635 INFO  [launch_] keep-alive: 5s
2020-03-29 20:14:43,635 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:43,635 INFO  [launch_] tls: disabled
2020-03-29 20:14:43,635 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 1, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:43,635 INFO  [rocket::rocket] Mounting /:
2020-03-29 20:14:43,635 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:43,635 TRACE [mio::poll] registering with poller
2020-03-29 20:14:43,636 INFO  [_] POST /client/clientPayload
2020-03-29 20:14:43,636 TRACE [reqwest::blocking::client] (ThreadId(3)) start runtime::block_on
2020-03-29 20:14:43,636 INFO  [_] POST /rpc/appendEntriesRequest
2020-03-29 20:14:43,636 INFO  [_] POST /rpc/voteRequest
2020-03-29 20:14:43,636 INFO  [_] POST /rpc/installSnapshotRequest
2020-03-29 20:14:43,636 INFO  [launch] Rocket has launched from http://0.0.0.0:5002
2020-03-29 20:14:43,636 DEBUG [hyper::server] threads = 24
2020-03-29 20:14:43,649 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:43,649 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:43,649 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990001s
2020-03-29 20:14:43,649 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:43,649 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:43,649 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:43,649 TRACE [mio::poll] registering with poller
2020-03-29 20:14:43,650 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:43,650 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:43,650 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:43,650 TRACE [want] signal: Want
2020-03-29 20:14:43,650 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:43,650 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:43,650 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:43,650 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:43,650 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:43,650 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:43,650 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:43,650 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:43,650 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:43,650 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:43,652 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:43,652 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:43,653 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:43,653 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:43,653 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:43,653 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:43,653 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:43,653 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:43,653 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:43,653 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:14:43,653 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:14:43,653 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:14:43,653 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:14:43,653 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:43,653 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:43,653 TRACE [want] signal: Closed
2020-03-29 20:14:43,653 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:43,653 TRACE [want] poll_want: closed
2020-03-29 20:14:43,653 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:43,654 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(3))
2020-03-29 20:14:43,654 TRACE [reqwest::blocking::client] (ThreadId(3)) Receiver is shutdown
2020-03-29 20:14:43,654 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(3))
2020-03-29 20:14:43,654 TRACE [reqwest::blocking::client] (ThreadId(3)) end runtime::block_on
2020-03-29 20:14:43,654 TRACE [reqwest::blocking::client] (ThreadId(3)) finished
2020-03-29 20:14:43,654 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(3))
2020-03-29 20:14:43,655 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:43,655 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:43,655 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:43,655 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:43,655 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:43,881 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:43,896 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:43,896 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:43,896 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:43,896 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:43,896 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 2, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:43,896 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:43,897 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 2, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:43,897 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:43,897 TRACE [mio::poll] registering with poller
2020-03-29 20:14:43,897 TRACE [reqwest::blocking::client] (ThreadId(29)) start runtime::block_on
2020-03-29 20:14:43,908 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:43,908 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992646s
2020-03-29 20:14:43,908 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:43,908 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:43,909 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:43,909 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:43,909 TRACE [mio::poll] registering with poller
2020-03-29 20:14:43,909 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:43,909 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:43,909 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:43,909 TRACE [want] signal: Want
2020-03-29 20:14:43,910 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:43,910 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:43,910 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:43,910 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:43,910 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:43,910 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:43,910 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:43,910 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:43,911 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:43,911 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:43,915 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:43,915 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:43,915 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:43,915 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:43,915 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:43,915 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:43,915 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:43,915 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:43,915 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:43,915 TRACE [want] signal: Want
2020-03-29 20:14:43,915 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:43,915 TRACE [want] signal: Want
2020-03-29 20:14:43,915 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:43,915 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:43,915 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:43,915 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:43,916 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:43,916 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:43,916 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:43,916 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:43,916 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:43,916 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:43,916 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:43,916 TRACE [want] signal: Closed
2020-03-29 20:14:43,916 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(29))
2020-03-29 20:14:43,916 TRACE [reqwest::blocking::client] (ThreadId(29)) Receiver is shutdown
2020-03-29 20:14:43,916 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(29))
2020-03-29 20:14:43,916 TRACE [reqwest::blocking::client] (ThreadId(29)) end runtime::block_on
2020-03-29 20:14:43,917 TRACE [reqwest::blocking::client] (ThreadId(29)) finished
2020-03-29 20:14:43,917 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(29))
2020-03-29 20:14:43,917 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:43,917 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:43,917 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:43,917 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:43,917 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,137 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,158 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,158 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:44,158 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:44,159 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:44,159 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 3, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:44,159 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:44,159 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 3, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:44,159 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:44,159 TRACE [mio::poll] registering with poller
2020-03-29 20:14:44,160 TRACE [reqwest::blocking::client] (ThreadId(30)) start runtime::block_on
2020-03-29 20:14:44,170 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:44,171 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999993278s
2020-03-29 20:14:44,171 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,171 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:44,171 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:44,171 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:44,171 TRACE [mio::poll] registering with poller
2020-03-29 20:14:44,171 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:44,171 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:44,171 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:44,171 TRACE [want] signal: Want
2020-03-29 20:14:44,171 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:44,171 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:44,171 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:44,171 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,171 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:44,171 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:44,172 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:44,172 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:44,172 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:44,172 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:44,176 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:44,176 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:44,176 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:44,176 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:44,176 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:44,176 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:44,176 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:44,176 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:44,176 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:44,176 TRACE [want] signal: Want
2020-03-29 20:14:44,176 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:44,176 TRACE [want] signal: Want
2020-03-29 20:14:44,176 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:44,177 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,177 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,177 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:44,177 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:44,177 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:44,177 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:44,177 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:44,177 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(30))
2020-03-29 20:14:44,177 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:44,177 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(30))
2020-03-29 20:14:44,177 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:44,177 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:44,177 TRACE [want] signal: Closed
2020-03-29 20:14:44,177 TRACE [reqwest::blocking::client] (ThreadId(30)) Receiver is shutdown
2020-03-29 20:14:44,178 TRACE [reqwest::blocking::client] (ThreadId(30)) end runtime::block_on
2020-03-29 20:14:44,178 TRACE [reqwest::blocking::client] (ThreadId(30)) finished
2020-03-29 20:14:44,178 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(30))
2020-03-29 20:14:44,178 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:44,178 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:44,178 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:44,178 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:44,179 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,393 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,420 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,420 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:44,420 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:44,420 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:44,420 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 4, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:44,421 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:44,421 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 4, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:44,421 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:44,421 TRACE [mio::poll] registering with poller
2020-03-29 20:14:44,422 TRACE [reqwest::blocking::client] (ThreadId(31)) start runtime::block_on
2020-03-29 20:14:44,433 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:44,433 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990943s
2020-03-29 20:14:44,433 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,433 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:44,433 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:44,433 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:44,434 TRACE [mio::poll] registering with poller
2020-03-29 20:14:44,434 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:44,434 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:44,434 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:44,434 TRACE [want] signal: Want
2020-03-29 20:14:44,434 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:44,434 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:44,434 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:44,435 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,435 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:44,435 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:44,435 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:44,435 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:44,435 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:44,435 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:44,439 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:44,440 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:44,440 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:44,440 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:44,440 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:44,440 TRACE [want] signal: Want
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:44,440 TRACE [want] signal: Want
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:44,440 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,440 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,440 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:44,440 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:44,440 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:44,440 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:44,440 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:44,440 TRACE [want] signal: Closed
2020-03-29 20:14:44,440 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(31))
2020-03-29 20:14:44,441 TRACE [reqwest::blocking::client] (ThreadId(31)) Receiver is shutdown
2020-03-29 20:14:44,441 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(31))
2020-03-29 20:14:44,441 TRACE [reqwest::blocking::client] (ThreadId(31)) end runtime::block_on
2020-03-29 20:14:44,441 TRACE [reqwest::blocking::client] (ThreadId(31)) finished
2020-03-29 20:14:44,441 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(31))
2020-03-29 20:14:44,441 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:44,441 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:44,442 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:44,442 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:44,442 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,649 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,682 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,682 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:44,682 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:44,682 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:44,682 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 5, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:44,682 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:44,683 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 5, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:44,683 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:44,683 TRACE [mio::poll] registering with poller
2020-03-29 20:14:44,684 TRACE [reqwest::blocking::client] (ThreadId(32)) start runtime::block_on
2020-03-29 20:14:44,694 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:44,694 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991955s
2020-03-29 20:14:44,695 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,695 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:44,695 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:44,695 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:44,695 TRACE [mio::poll] registering with poller
2020-03-29 20:14:44,695 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:44,695 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:44,695 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:44,695 TRACE [want] signal: Want
2020-03-29 20:14:44,695 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:44,695 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:44,695 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:44,695 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,695 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:44,695 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:44,695 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:44,695 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:44,695 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:44,696 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:44,700 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:44,700 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:44,700 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:44,700 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:44,700 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:44,700 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:44,700 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:44,700 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:44,700 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:44,700 TRACE [want] signal: Want
2020-03-29 20:14:44,700 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:44,701 TRACE [want] signal: Want
2020-03-29 20:14:44,701 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:44,701 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,701 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,701 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:44,701 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:44,701 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:44,701 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:44,701 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:44,701 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(32))
2020-03-29 20:14:44,701 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:44,701 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(32))
2020-03-29 20:14:44,701 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:44,701 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:44,701 TRACE [want] signal: Closed
2020-03-29 20:14:44,701 TRACE [reqwest::blocking::client] (ThreadId(32)) Receiver is shutdown
2020-03-29 20:14:44,702 TRACE [reqwest::blocking::client] (ThreadId(32)) end runtime::block_on
2020-03-29 20:14:44,702 TRACE [reqwest::blocking::client] (ThreadId(32)) finished
2020-03-29 20:14:44,702 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(32))
2020-03-29 20:14:44,702 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:44,702 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:44,702 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:44,702 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:44,703 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,905 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,944 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:44,945 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:44,945 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:44,945 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:44,945 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 6, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:44,945 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:44,945 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 6, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:44,946 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:44,946 TRACE [mio::poll] registering with poller
2020-03-29 20:14:44,946 TRACE [reqwest::blocking::client] (ThreadId(33)) start runtime::block_on
2020-03-29 20:14:44,957 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:44,957 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991865s
2020-03-29 20:14:44,957 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,957 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:44,958 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:44,958 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:44,958 TRACE [mio::poll] registering with poller
2020-03-29 20:14:44,958 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:44,958 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:44,958 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:44,958 TRACE [want] signal: Want
2020-03-29 20:14:44,958 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:44,958 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:44,958 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:44,958 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,958 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:44,959 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:44,959 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:44,959 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:44,959 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:44,959 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:44,963 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:44,963 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:44,963 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:44,963 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:44,963 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:44,963 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:44,963 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:44,963 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:44,963 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:44,963 TRACE [want] signal: Want
2020-03-29 20:14:44,963 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:44,964 TRACE [want] signal: Want
2020-03-29 20:14:44,964 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:44,964 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,964 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:44,964 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:44,964 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:44,964 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:44,964 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:44,964 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:44,964 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:44,964 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(33))
2020-03-29 20:14:44,964 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:44,964 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:44,964 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(33))
2020-03-29 20:14:44,964 TRACE [want] signal: Closed
2020-03-29 20:14:44,964 TRACE [reqwest::blocking::client] (ThreadId(33)) Receiver is shutdown
2020-03-29 20:14:44,965 TRACE [reqwest::blocking::client] (ThreadId(33)) end runtime::block_on
2020-03-29 20:14:44,965 TRACE [reqwest::blocking::client] (ThreadId(33)) finished
2020-03-29 20:14:44,965 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(33))
2020-03-29 20:14:44,965 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:44,965 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:44,965 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:44,965 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:44,966 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,161 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,207 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,208 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:45,208 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:45,208 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:45,208 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 7, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:45,208 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:45,208 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 7, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:45,209 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:45,209 TRACE [mio::poll] registering with poller
2020-03-29 20:14:45,209 TRACE [reqwest::blocking::client] (ThreadId(34)) start runtime::block_on
2020-03-29 20:14:45,220 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:45,220 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991904s
2020-03-29 20:14:45,220 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,220 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:45,221 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:45,221 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:45,221 TRACE [mio::poll] registering with poller
2020-03-29 20:14:45,221 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:45,221 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:45,221 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:45,222 TRACE [want] signal: Want
2020-03-29 20:14:45,222 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:45,222 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:45,222 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:45,222 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,222 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:45,222 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:45,222 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:45,222 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:45,222 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:45,222 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:45,226 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:45,226 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:45,226 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:45,226 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:45,227 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:45,227 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:45,227 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:45,227 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:45,227 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:45,227 TRACE [want] signal: Want
2020-03-29 20:14:45,227 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:45,227 TRACE [want] signal: Want
2020-03-29 20:14:45,227 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:45,227 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,227 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,227 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:45,227 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:45,227 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:45,227 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:45,227 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:45,227 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:45,227 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:45,227 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:45,227 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(34))
2020-03-29 20:14:45,227 TRACE [want] signal: Closed
2020-03-29 20:14:45,227 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(34))
2020-03-29 20:14:45,227 TRACE [reqwest::blocking::client] (ThreadId(34)) Receiver is shutdown
2020-03-29 20:14:45,228 TRACE [reqwest::blocking::client] (ThreadId(34)) end runtime::block_on
2020-03-29 20:14:45,228 TRACE [reqwest::blocking::client] (ThreadId(34)) finished
2020-03-29 20:14:45,228 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(34))
2020-03-29 20:14:45,228 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:45,228 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:45,228 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:45,229 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:45,229 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,417 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,469 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,470 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:45,470 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:45,470 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:45,470 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 8, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:45,470 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:45,470 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 8, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:45,471 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:45,471 TRACE [mio::poll] registering with poller
2020-03-29 20:14:45,472 TRACE [reqwest::blocking::client] (ThreadId(35)) start runtime::block_on
2020-03-29 20:14:45,482 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:45,482 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991093s
2020-03-29 20:14:45,482 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,483 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:45,483 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:45,483 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:45,483 TRACE [mio::poll] registering with poller
2020-03-29 20:14:45,483 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:45,483 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:45,483 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:45,483 TRACE [want] signal: Want
2020-03-29 20:14:45,483 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:45,483 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:45,483 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:45,483 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,484 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:45,484 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:45,484 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:45,484 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:45,484 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:45,484 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:45,488 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:45,488 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:45,488 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:45,488 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:45,489 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:45,489 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:45,489 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:45,489 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:45,489 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:45,489 TRACE [want] signal: Want
2020-03-29 20:14:45,489 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:45,489 TRACE [want] signal: Want
2020-03-29 20:14:45,489 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:45,489 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,489 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,489 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:45,489 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:45,489 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:45,489 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:45,489 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:45,489 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:45,489 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:45,489 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(35))
2020-03-29 20:14:45,489 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:45,489 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(35))
2020-03-29 20:14:45,489 TRACE [want] signal: Closed
2020-03-29 20:14:45,490 TRACE [reqwest::blocking::client] (ThreadId(35)) Receiver is shutdown
2020-03-29 20:14:45,490 TRACE [reqwest::blocking::client] (ThreadId(35)) end runtime::block_on
2020-03-29 20:14:45,490 TRACE [reqwest::blocking::client] (ThreadId(35)) finished
2020-03-29 20:14:45,490 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(35))
2020-03-29 20:14:45,490 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:45,491 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:45,491 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:45,491 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:45,491 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,673 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,732 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,732 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:45,732 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:45,732 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:45,732 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 9, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:45,733 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:45,733 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 9, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:45,733 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:45,733 TRACE [mio::poll] registering with poller
2020-03-29 20:14:45,734 TRACE [reqwest::blocking::client] (ThreadId(36)) start runtime::block_on
2020-03-29 20:14:45,745 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:45,745 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990863s
2020-03-29 20:14:45,745 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,745 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:45,745 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:45,745 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:45,745 TRACE [mio::poll] registering with poller
2020-03-29 20:14:45,746 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:45,746 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:45,746 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:45,746 TRACE [want] signal: Want
2020-03-29 20:14:45,746 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:45,746 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:45,746 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:45,746 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,746 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:45,746 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:45,746 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:45,746 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:45,746 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:45,746 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:45,750 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:45,750 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:45,750 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:45,750 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:45,750 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:45,750 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:45,750 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:45,750 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:45,750 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:45,751 TRACE [want] signal: Want
2020-03-29 20:14:45,751 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:45,751 TRACE [want] signal: Want
2020-03-29 20:14:45,751 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:45,751 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,751 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:45,751 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:45,751 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:45,751 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:45,751 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:45,751 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:45,751 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:45,751 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:45,751 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:45,751 TRACE [want] signal: Closed
2020-03-29 20:14:45,751 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(36))
2020-03-29 20:14:45,751 TRACE [reqwest::blocking::client] (ThreadId(36)) Receiver is shutdown
2020-03-29 20:14:45,751 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(36))
2020-03-29 20:14:45,752 TRACE [reqwest::blocking::client] (ThreadId(36)) end runtime::block_on
2020-03-29 20:14:45,752 TRACE [reqwest::blocking::client] (ThreadId(36)) finished
2020-03-29 20:14:45,752 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(36))
2020-03-29 20:14:45,752 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:45,752 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:45,752 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:45,752 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:45,753 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,993 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,994 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:45,995 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:45,995 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:45,995 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:45,995 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 10, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:45,995 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:45,995 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 10, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:45,996 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:45,996 TRACE [mio::poll] registering with poller
2020-03-29 20:14:45,996 TRACE [reqwest::blocking::client] (ThreadId(37)) start runtime::block_on
2020-03-29 20:14:46,007 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:46,007 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992656s
2020-03-29 20:14:46,007 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,007 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:46,007 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:46,007 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:46,007 TRACE [mio::poll] registering with poller
2020-03-29 20:14:46,008 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:46,008 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:46,008 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:46,008 TRACE [want] signal: Want
2020-03-29 20:14:46,008 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:46,008 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:46,008 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:46,008 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,008 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:46,008 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:46,008 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:46,008 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:46,008 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:46,008 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:46,013 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:46,013 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:46,013 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:46,013 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:46,013 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:46,013 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:46,013 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:46,013 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:46,013 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:46,013 TRACE [want] signal: Want
2020-03-29 20:14:46,013 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:46,013 TRACE [want] signal: Want
2020-03-29 20:14:46,013 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:46,013 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,014 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,014 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:46,014 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:46,014 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:46,014 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:46,014 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:46,014 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(37))
2020-03-29 20:14:46,014 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:46,014 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(37))
2020-03-29 20:14:46,014 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:46,014 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:46,014 TRACE [want] signal: Closed
2020-03-29 20:14:46,014 TRACE [reqwest::blocking::client] (ThreadId(37)) Receiver is shutdown
2020-03-29 20:14:46,015 TRACE [reqwest::blocking::client] (ThreadId(37)) end runtime::block_on
2020-03-29 20:14:46,015 TRACE [reqwest::blocking::client] (ThreadId(37)) finished
2020-03-29 20:14:46,015 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(37))
2020-03-29 20:14:46,015 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:46,015 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:46,015 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:46,015 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:46,015 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,249 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,257 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,258 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:46,258 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:46,258 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:46,258 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 11, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:46,258 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:46,258 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 11, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:46,259 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:46,259 TRACE [mio::poll] registering with poller
2020-03-29 20:14:46,260 TRACE [reqwest::blocking::client] (ThreadId(38)) start runtime::block_on
2020-03-29 20:14:46,270 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:46,270 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991304s
2020-03-29 20:14:46,270 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,271 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:46,271 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:46,271 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:46,271 TRACE [mio::poll] registering with poller
2020-03-29 20:14:46,271 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:46,271 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:46,271 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:46,271 TRACE [want] signal: Want
2020-03-29 20:14:46,271 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:46,271 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:46,271 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:46,271 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,271 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:46,271 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:46,271 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:46,271 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:46,271 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:46,271 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:46,276 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:46,276 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:46,276 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:46,276 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:46,276 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:46,276 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:46,276 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:46,276 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:46,276 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:46,276 TRACE [want] signal: Want
2020-03-29 20:14:46,276 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:46,276 TRACE [want] signal: Want
2020-03-29 20:14:46,276 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:46,276 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,276 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,277 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:46,277 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:46,277 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:46,277 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:46,277 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:46,277 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:46,277 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:46,277 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(38))
2020-03-29 20:14:46,277 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:46,277 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(38))
2020-03-29 20:14:46,277 TRACE [want] signal: Closed
2020-03-29 20:14:46,277 TRACE [reqwest::blocking::client] (ThreadId(38)) Receiver is shutdown
2020-03-29 20:14:46,278 TRACE [reqwest::blocking::client] (ThreadId(38)) end runtime::block_on
2020-03-29 20:14:46,278 TRACE [reqwest::blocking::client] (ThreadId(38)) finished
2020-03-29 20:14:46,278 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(38))
2020-03-29 20:14:46,278 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:46,278 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:46,278 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:46,278 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:46,279 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,505 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,520 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,521 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:46,521 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:46,521 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:46,521 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 12, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:46,521 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:46,521 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 12, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:46,522 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:46,522 TRACE [mio::poll] registering with poller
2020-03-29 20:14:46,523 TRACE [reqwest::blocking::client] (ThreadId(39)) start runtime::block_on
2020-03-29 20:14:46,533 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:46,533 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991034s
2020-03-29 20:14:46,534 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,534 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:46,534 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:46,534 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:46,534 TRACE [mio::poll] registering with poller
2020-03-29 20:14:46,534 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:46,534 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:46,534 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:46,534 TRACE [want] signal: Want
2020-03-29 20:14:46,534 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:46,534 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:46,534 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:46,534 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,535 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:46,535 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:46,535 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:46,535 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:46,535 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:46,535 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:46,539 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:46,539 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:46,539 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:46,539 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:46,539 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:46,539 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:46,540 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:46,540 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:46,540 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:46,540 TRACE [want] signal: Want
2020-03-29 20:14:46,540 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:46,540 TRACE [want] signal: Want
2020-03-29 20:14:46,540 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:46,540 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,540 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,540 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:46,540 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:46,540 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:46,540 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:46,540 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:46,540 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:46,540 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:46,540 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(39))
2020-03-29 20:14:46,540 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:46,540 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(39))
2020-03-29 20:14:46,540 TRACE [want] signal: Closed
2020-03-29 20:14:46,540 TRACE [reqwest::blocking::client] (ThreadId(39)) Receiver is shutdown
2020-03-29 20:14:46,541 TRACE [reqwest::blocking::client] (ThreadId(39)) end runtime::block_on
2020-03-29 20:14:46,541 TRACE [reqwest::blocking::client] (ThreadId(39)) finished
2020-03-29 20:14:46,541 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(39))
2020-03-29 20:14:46,541 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:46,541 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:46,541 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:46,541 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:46,541 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,761 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,783 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,783 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:46,783 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:46,784 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:46,784 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 13, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:46,784 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:46,784 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 13, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:46,784 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:46,784 TRACE [mio::poll] registering with poller
2020-03-29 20:14:46,785 TRACE [reqwest::blocking::client] (ThreadId(40)) start runtime::block_on
2020-03-29 20:14:46,796 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:46,796 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991033s
2020-03-29 20:14:46,796 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,796 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:46,796 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:46,797 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:46,797 TRACE [mio::poll] registering with poller
2020-03-29 20:14:46,797 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:46,797 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:46,797 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:46,797 TRACE [want] signal: Want
2020-03-29 20:14:46,797 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:46,797 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:46,798 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:46,798 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,798 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:46,798 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:46,798 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:46,798 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:46,798 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:46,798 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:46,802 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:46,802 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:46,802 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:46,802 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:46,802 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:46,802 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:46,802 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:46,802 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:46,802 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:46,802 TRACE [want] signal: Want
2020-03-29 20:14:46,802 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:46,802 TRACE [want] signal: Want
2020-03-29 20:14:46,802 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:46,803 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,803 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:46,803 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:46,803 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:46,803 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:46,803 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:46,803 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:46,803 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:46,803 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:46,803 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:46,803 TRACE [want] signal: Closed
2020-03-29 20:14:46,803 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(40))
2020-03-29 20:14:46,803 TRACE [reqwest::blocking::client] (ThreadId(40)) Receiver is shutdown
2020-03-29 20:14:46,803 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(40))
2020-03-29 20:14:46,804 TRACE [reqwest::blocking::client] (ThreadId(40)) end runtime::block_on
2020-03-29 20:14:46,804 TRACE [reqwest::blocking::client] (ThreadId(40)) finished
2020-03-29 20:14:46,804 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(40))
2020-03-29 20:14:46,804 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:46,804 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:46,804 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:46,804 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:46,804 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:46,825 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,017 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,044 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,045 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:47,045 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:47,045 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:47,045 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 14, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:47,045 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:47,046 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 14, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:47,046 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:47,046 TRACE [mio::poll] registering with poller
2020-03-29 20:14:47,047 TRACE [reqwest::blocking::client] (ThreadId(41)) start runtime::block_on
2020-03-29 20:14:47,056 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:47,056 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990071s
2020-03-29 20:14:47,056 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,056 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:47,056 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:47,056 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:47,057 TRACE [mio::poll] registering with poller
2020-03-29 20:14:47,057 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:47,057 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:47,057 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:47,057 TRACE [want] signal: Want
2020-03-29 20:14:47,057 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:47,057 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:47,057 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:47,057 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,057 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:47,057 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:47,057 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:47,057 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:47,058 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:47,058 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:47,063 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:47,063 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:47,063 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:47,063 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:47,063 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:47,063 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:47,063 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:47,063 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:47,063 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:47,064 TRACE [want] signal: Want
2020-03-29 20:14:47,064 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:47,064 TRACE [want] signal: Want
2020-03-29 20:14:47,064 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:47,064 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,064 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,064 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:47,064 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:47,064 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:47,064 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:47,064 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:47,064 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:47,064 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:47,064 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:47,064 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(41))
2020-03-29 20:14:47,064 TRACE [want] signal: Closed
2020-03-29 20:14:47,064 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(41))
2020-03-29 20:14:47,064 TRACE [reqwest::blocking::client] (ThreadId(41)) Receiver is shutdown
2020-03-29 20:14:47,065 TRACE [reqwest::blocking::client] (ThreadId(41)) end runtime::block_on
2020-03-29 20:14:47,065 TRACE [reqwest::blocking::client] (ThreadId(41)) finished
2020-03-29 20:14:47,065 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(41))
2020-03-29 20:14:47,066 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:47,066 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:47,066 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:47,066 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:47,066 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,274 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,307 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,307 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:47,307 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:47,308 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:47,308 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 15, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:47,308 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:47,308 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 15, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:47,308 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:47,308 TRACE [mio::poll] registering with poller
2020-03-29 20:14:47,309 TRACE [reqwest::blocking::client] (ThreadId(42)) start runtime::block_on
2020-03-29 20:14:47,320 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:47,320 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990953s
2020-03-29 20:14:47,320 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,320 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:47,321 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:47,321 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:47,321 TRACE [mio::poll] registering with poller
2020-03-29 20:14:47,321 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:47,321 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:47,321 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:47,321 TRACE [want] signal: Want
2020-03-29 20:14:47,322 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:47,322 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:47,322 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:47,322 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,322 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:47,322 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:47,322 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:47,322 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:47,322 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:47,322 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:47,326 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:47,326 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:47,326 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:47,326 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:47,326 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:47,326 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:47,326 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:47,326 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:47,326 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:47,326 TRACE [want] signal: Want
2020-03-29 20:14:47,326 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:47,326 TRACE [want] signal: Want
2020-03-29 20:14:47,327 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:47,327 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,327 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,327 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:47,327 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:47,327 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:47,327 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:47,327 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:47,327 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:47,327 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:47,327 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:47,327 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(42))
2020-03-29 20:14:47,327 TRACE [want] signal: Closed
2020-03-29 20:14:47,327 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(42))
2020-03-29 20:14:47,327 TRACE [reqwest::blocking::client] (ThreadId(42)) Receiver is shutdown
2020-03-29 20:14:47,328 TRACE [reqwest::blocking::client] (ThreadId(42)) end runtime::block_on
2020-03-29 20:14:47,328 TRACE [reqwest::blocking::client] (ThreadId(42)) finished
2020-03-29 20:14:47,328 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(42))
2020-03-29 20:14:47,328 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:47,328 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:47,328 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:47,328 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:47,328 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,529 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,570 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,570 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:47,570 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:47,570 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:47,571 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 16, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:47,571 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:47,571 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 16, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:47,571 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:47,571 TRACE [mio::poll] registering with poller
2020-03-29 20:14:47,572 TRACE [reqwest::blocking::client] (ThreadId(43)) start runtime::block_on
2020-03-29 20:14:47,582 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:47,582 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991825s
2020-03-29 20:14:47,583 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,583 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:47,583 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:47,583 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:47,583 TRACE [mio::poll] registering with poller
2020-03-29 20:14:47,583 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:47,583 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:47,583 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:47,583 TRACE [want] signal: Want
2020-03-29 20:14:47,583 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:47,583 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:47,583 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:47,583 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,584 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:47,584 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:47,584 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:47,584 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:47,584 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:47,584 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:47,588 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:47,588 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:47,588 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:47,588 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:47,588 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:47,588 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:47,589 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:47,589 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:47,589 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:47,589 TRACE [want] signal: Want
2020-03-29 20:14:47,589 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:47,589 TRACE [want] signal: Want
2020-03-29 20:14:47,589 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:47,589 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,589 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,589 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:47,589 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:47,589 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:47,589 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:47,589 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:47,589 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:47,589 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(43))
2020-03-29 20:14:47,589 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:47,589 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:47,589 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(43))
2020-03-29 20:14:47,589 TRACE [want] signal: Closed
2020-03-29 20:14:47,589 TRACE [reqwest::blocking::client] (ThreadId(43)) Receiver is shutdown
2020-03-29 20:14:47,590 TRACE [reqwest::blocking::client] (ThreadId(43)) end runtime::block_on
2020-03-29 20:14:47,590 TRACE [reqwest::blocking::client] (ThreadId(43)) finished
2020-03-29 20:14:47,590 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(43))
2020-03-29 20:14:47,590 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:47,590 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:47,590 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:47,591 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:47,591 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,785 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,833 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:47,833 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:47,833 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:47,833 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:47,833 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 17, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:47,833 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:47,833 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 17, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:47,834 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:47,834 TRACE [mio::poll] registering with poller
2020-03-29 20:14:47,834 TRACE [reqwest::blocking::client] (ThreadId(44)) start runtime::block_on
2020-03-29 20:14:47,845 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:47,845 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991655s
2020-03-29 20:14:47,845 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,846 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:47,846 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:47,846 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:47,846 TRACE [mio::poll] registering with poller
2020-03-29 20:14:47,846 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:47,846 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:47,846 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:47,847 TRACE [want] signal: Want
2020-03-29 20:14:47,847 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:47,847 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:47,847 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:47,847 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,847 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:47,847 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:47,847 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:47,847 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:47,848 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:47,848 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:47,852 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:47,852 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:47,852 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:47,852 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:47,852 TRACE [want] signal: Want
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:47,852 TRACE [want] signal: Want
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:47,852 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,852 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:47,852 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:47,852 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:47,852 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:47,852 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(44))
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:47,852 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(44))
2020-03-29 20:14:47,852 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:47,852 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:47,853 TRACE [want] signal: Closed
2020-03-29 20:14:47,853 TRACE [reqwest::blocking::client] (ThreadId(44)) Receiver is shutdown
2020-03-29 20:14:47,853 TRACE [reqwest::blocking::client] (ThreadId(44)) end runtime::block_on
2020-03-29 20:14:47,853 TRACE [reqwest::blocking::client] (ThreadId(44)) finished
2020-03-29 20:14:47,853 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(44))
2020-03-29 20:14:47,853 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:47,853 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:47,853 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:47,854 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:47,854 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,041 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,095 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,096 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,096 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,096 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:48,096 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 18, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:48,096 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:48,096 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 18, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:48,097 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:48,097 TRACE [mio::poll] registering with poller
2020-03-29 20:14:48,098 TRACE [reqwest::blocking::client] (ThreadId(45)) start runtime::block_on
2020-03-29 20:14:48,109 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:48,109 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991044s
2020-03-29 20:14:48,109 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,109 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:48,109 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:48,109 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:48,109 TRACE [mio::poll] registering with poller
2020-03-29 20:14:48,110 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:48,110 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:48,110 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:48,110 TRACE [want] signal: Want
2020-03-29 20:14:48,110 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:48,110 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:48,110 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:48,110 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,111 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:48,111 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:48,111 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:48,111 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:48,111 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:48,111 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:48,115 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:48,115 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:48,115 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:48,115 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:48,115 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:48,116 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:48,116 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:48,116 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:48,116 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:48,116 TRACE [want] signal: Want
2020-03-29 20:14:48,116 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:48,116 TRACE [want] signal: Want
2020-03-29 20:14:48,116 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:48,116 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,116 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,116 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:48,116 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:48,116 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:48,116 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:48,116 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:48,116 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:48,116 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:48,116 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:48,116 TRACE [want] signal: Closed
2020-03-29 20:14:48,116 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(45))
2020-03-29 20:14:48,116 TRACE [reqwest::blocking::client] (ThreadId(45)) Receiver is shutdown
2020-03-29 20:14:48,116 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(45))
2020-03-29 20:14:48,117 TRACE [reqwest::blocking::client] (ThreadId(45)) end runtime::block_on
2020-03-29 20:14:48,117 TRACE [reqwest::blocking::client] (ThreadId(45)) finished
2020-03-29 20:14:48,117 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(45))
2020-03-29 20:14:48,117 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:48,117 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:48,117 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,118 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,118 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,297 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,358 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,358 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,358 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,358 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:48,358 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 19, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:48,358 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:48,359 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 19, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:48,359 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:48,359 TRACE [mio::poll] registering with poller
2020-03-29 20:14:48,360 TRACE [reqwest::blocking::client] (ThreadId(46)) start runtime::block_on
2020-03-29 20:14:48,370 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:48,370 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,370 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992015s
2020-03-29 20:14:48,370 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:48,370 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:48,370 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:48,370 TRACE [mio::poll] registering with poller
2020-03-29 20:14:48,370 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:48,371 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:48,371 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:48,371 TRACE [want] signal: Want
2020-03-29 20:14:48,371 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:48,371 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:48,371 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:48,371 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,371 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:48,371 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:48,371 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:48,371 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:48,371 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:48,371 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:48,376 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:48,376 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:48,376 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:48,376 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:48,376 TRACE [want] signal: Want
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:48,376 TRACE [want] signal: Want
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:48,376 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,376 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,376 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:48,376 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:48,376 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:48,376 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:48,377 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:48,377 TRACE [want] signal: Closed
2020-03-29 20:14:48,377 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(46))
2020-03-29 20:14:48,377 TRACE [reqwest::blocking::client] (ThreadId(46)) Receiver is shutdown
2020-03-29 20:14:48,377 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(46))
2020-03-29 20:14:48,377 TRACE [reqwest::blocking::client] (ThreadId(46)) end runtime::block_on
2020-03-29 20:14:48,377 TRACE [reqwest::blocking::client] (ThreadId(46)) finished
2020-03-29 20:14:48,378 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(46))
2020-03-29 20:14:48,378 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:48,378 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:48,378 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,378 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,378 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,617 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,620 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,620 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,620 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,620 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:48,620 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 20, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:48,620 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:48,621 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 20, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:48,621 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:48,621 TRACE [mio::poll] registering with poller
2020-03-29 20:14:48,622 TRACE [reqwest::blocking::client] (ThreadId(47)) start runtime::block_on
2020-03-29 20:14:48,632 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:48,633 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991043s
2020-03-29 20:14:48,633 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,633 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:48,633 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:48,633 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:48,634 TRACE [mio::poll] registering with poller
2020-03-29 20:14:48,634 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:48,634 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:48,634 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:48,634 TRACE [want] signal: Want
2020-03-29 20:14:48,634 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:48,634 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:48,634 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:48,634 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,635 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:48,635 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:48,635 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:48,635 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:48,635 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:48,635 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:48,639 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:48,639 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:48,639 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:48,640 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:48,640 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:48,640 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:48,640 TRACE [want] signal: Want
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:48,640 TRACE [want] signal: Want
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:48,640 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,640 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,640 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:48,640 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:48,640 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:48,640 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:48,640 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:48,640 TRACE [want] signal: Closed
2020-03-29 20:14:48,640 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(47))
2020-03-29 20:14:48,640 TRACE [reqwest::blocking::client] (ThreadId(47)) Receiver is shutdown
2020-03-29 20:14:48,640 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(47))
2020-03-29 20:14:48,641 TRACE [reqwest::blocking::client] (ThreadId(47)) end runtime::block_on
2020-03-29 20:14:48,641 TRACE [reqwest::blocking::client] (ThreadId(47)) finished
2020-03-29 20:14:48,641 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(47))
2020-03-29 20:14:48,641 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:48,641 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:48,642 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,642 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,642 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,642 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,642 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,874 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,882 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:48,883 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,883 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,883 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:48,883 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 21, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:48,883 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:48,883 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 21, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:48,884 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:48,884 TRACE [mio::poll] registering with poller
2020-03-29 20:14:48,884 TRACE [reqwest::blocking::client] (ThreadId(48)) start runtime::block_on
2020-03-29 20:14:48,895 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:48,895 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,895 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990271s
2020-03-29 20:14:48,895 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:48,895 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:48,895 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:48,895 TRACE [mio::poll] registering with poller
2020-03-29 20:14:48,895 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:48,895 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:48,895 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:48,895 TRACE [want] signal: Want
2020-03-29 20:14:48,895 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:48,895 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:48,895 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:48,895 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,895 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:48,896 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:48,896 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:48,896 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:48,896 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:48,896 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:48,901 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:48,901 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:48,901 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:48,901 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:48,901 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:48,901 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:48,901 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:48,901 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:48,901 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:48,901 TRACE [want] signal: Want
2020-03-29 20:14:48,901 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:48,901 TRACE [want] signal: Want
2020-03-29 20:14:48,901 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:48,901 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,901 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:48,901 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:48,901 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:48,902 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:48,902 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:48,902 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:48,902 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(48))
2020-03-29 20:14:48,902 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:48,902 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(48))
2020-03-29 20:14:48,902 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:48,902 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:48,902 TRACE [want] signal: Closed
2020-03-29 20:14:48,902 TRACE [reqwest::blocking::client] (ThreadId(48)) Receiver is shutdown
2020-03-29 20:14:48,903 TRACE [reqwest::blocking::client] (ThreadId(48)) end runtime::block_on
2020-03-29 20:14:48,903 TRACE [reqwest::blocking::client] (ThreadId(48)) finished
2020-03-29 20:14:48,903 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(48))
2020-03-29 20:14:48,903 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:48,903 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:48,903 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:48,903 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:48,903 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,129 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,145 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,145 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:49,145 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:49,145 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:49,145 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 22, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:49,145 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:49,146 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 22, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:49,146 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:49,146 TRACE [mio::poll] registering with poller
2020-03-29 20:14:49,147 TRACE [reqwest::blocking::client] (ThreadId(49)) start runtime::block_on
2020-03-29 20:14:49,158 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:49,158 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,158 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990262s
2020-03-29 20:14:49,158 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:49,158 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:49,158 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:49,158 TRACE [mio::poll] registering with poller
2020-03-29 20:14:49,158 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:49,158 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:49,158 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:49,158 TRACE [want] signal: Want
2020-03-29 20:14:49,158 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:49,158 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:49,158 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:49,158 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,159 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:49,159 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:49,159 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:49,159 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:49,159 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:49,159 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:49,164 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:49,164 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:49,164 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:49,164 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:49,164 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:49,164 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:49,164 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:49,164 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:49,164 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:49,164 TRACE [want] signal: Want
2020-03-29 20:14:49,164 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:49,164 TRACE [want] signal: Want
2020-03-29 20:14:49,164 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:49,164 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,164 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,165 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:49,165 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:49,165 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:49,165 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:49,165 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:49,165 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:49,165 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(49))
2020-03-29 20:14:49,165 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:49,165 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:49,165 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(49))
2020-03-29 20:14:49,165 TRACE [want] signal: Closed
2020-03-29 20:14:49,165 TRACE [reqwest::blocking::client] (ThreadId(49)) Receiver is shutdown
2020-03-29 20:14:49,166 TRACE [reqwest::blocking::client] (ThreadId(49)) end runtime::block_on
2020-03-29 20:14:49,166 TRACE [reqwest::blocking::client] (ThreadId(49)) finished
2020-03-29 20:14:49,166 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(49))
2020-03-29 20:14:49,166 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:49,166 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:49,166 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:49,166 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:49,166 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,385 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,407 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,408 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:49,408 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:49,408 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:49,408 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 23, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:49,408 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:49,408 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 23, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:49,408 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:49,409 TRACE [mio::poll] registering with poller
2020-03-29 20:14:49,409 TRACE [reqwest::blocking::client] (ThreadId(50)) start runtime::block_on
2020-03-29 20:14:49,419 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:49,419 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,419 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992205s
2020-03-29 20:14:49,419 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:49,419 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:49,419 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:49,419 TRACE [mio::poll] registering with poller
2020-03-29 20:14:49,419 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:49,419 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:49,419 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:49,419 TRACE [want] signal: Want
2020-03-29 20:14:49,419 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:49,419 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:49,419 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:49,419 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,420 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:49,420 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:49,420 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:49,420 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:49,420 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:49,420 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:49,424 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:49,424 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:49,424 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:49,424 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:49,425 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:49,425 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:49,425 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:49,425 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:49,425 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:49,425 TRACE [want] signal: Want
2020-03-29 20:14:49,425 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:49,425 TRACE [want] signal: Want
2020-03-29 20:14:49,425 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:49,425 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,425 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,425 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:49,425 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:49,425 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:49,425 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:49,425 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:49,425 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(50))
2020-03-29 20:14:49,425 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:49,425 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(50))
2020-03-29 20:14:49,425 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:49,425 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:49,425 TRACE [want] signal: Closed
2020-03-29 20:14:49,425 TRACE [reqwest::blocking::client] (ThreadId(50)) Receiver is shutdown
2020-03-29 20:14:49,426 TRACE [reqwest::blocking::client] (ThreadId(50)) end runtime::block_on
2020-03-29 20:14:49,426 TRACE [reqwest::blocking::client] (ThreadId(50)) finished
2020-03-29 20:14:49,426 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(50))
2020-03-29 20:14:49,426 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:49,426 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:49,427 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:49,427 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:49,427 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,641 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,670 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,671 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:49,671 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:49,671 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:49,671 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 24, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:49,671 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:49,671 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 24, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:49,671 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:49,672 TRACE [mio::poll] registering with poller
2020-03-29 20:14:49,672 TRACE [reqwest::blocking::client] (ThreadId(51)) start runtime::block_on
2020-03-29 20:14:49,683 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:49,683 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992746s
2020-03-29 20:14:49,683 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,683 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:49,683 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:49,683 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:49,683 TRACE [mio::poll] registering with poller
2020-03-29 20:14:49,683 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:49,683 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:49,683 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:49,683 TRACE [want] signal: Want
2020-03-29 20:14:49,683 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:49,684 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:49,684 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:49,684 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,684 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:49,684 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:49,684 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:49,684 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:49,684 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:49,684 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:49,689 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:49,689 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:49,689 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:49,689 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:49,689 TRACE [want] signal: Want
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:49,689 TRACE [want] signal: Want
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:49,689 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,689 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,689 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:49,689 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:49,689 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:49,689 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:49,689 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:49,689 TRACE [want] signal: Closed
2020-03-29 20:14:49,689 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(51))
2020-03-29 20:14:49,690 TRACE [reqwest::blocking::client] (ThreadId(51)) Receiver is shutdown
2020-03-29 20:14:49,690 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(51))
2020-03-29 20:14:49,690 TRACE [reqwest::blocking::client] (ThreadId(51)) end runtime::block_on
2020-03-29 20:14:49,690 TRACE [reqwest::blocking::client] (ThreadId(51)) finished
2020-03-29 20:14:49,690 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(51))
2020-03-29 20:14:49,690 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:49,690 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:49,691 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:49,691 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:49,691 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,897 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,933 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:49,933 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:49,933 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:49,933 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:49,933 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 25, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:49,933 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:49,934 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 25, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:49,934 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:49,934 TRACE [mio::poll] registering with poller
2020-03-29 20:14:49,935 TRACE [reqwest::blocking::client] (ThreadId(52)) start runtime::block_on
2020-03-29 20:14:49,945 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:49,945 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991745s
2020-03-29 20:14:49,946 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,946 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:49,946 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:49,946 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:49,946 TRACE [mio::poll] registering with poller
2020-03-29 20:14:49,946 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:49,947 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:49,947 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:49,947 TRACE [want] signal: Want
2020-03-29 20:14:49,947 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:49,947 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:49,947 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:49,947 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,947 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:49,948 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:49,948 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:49,948 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:49,948 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:49,948 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:49,953 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:49,953 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:49,953 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:49,953 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:49,953 TRACE [want] signal: Want
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:49,953 TRACE [want] signal: Want
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:49,953 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,953 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:49,953 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:49,953 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:49,953 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:49,953 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(52))
2020-03-29 20:14:49,953 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:49,954 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(52))
2020-03-29 20:14:49,954 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:49,954 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:49,954 TRACE [want] signal: Closed
2020-03-29 20:14:49,954 TRACE [reqwest::blocking::client] (ThreadId(52)) Receiver is shutdown
2020-03-29 20:14:49,954 TRACE [reqwest::blocking::client] (ThreadId(52)) end runtime::block_on
2020-03-29 20:14:49,954 TRACE [reqwest::blocking::client] (ThreadId(52)) finished
2020-03-29 20:14:49,954 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(52))
2020-03-29 20:14:49,955 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:49,955 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:49,955 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:49,955 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:49,955 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,153 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,195 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,195 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:50,195 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:50,195 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:50,195 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 26, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:50,196 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:50,196 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 26, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:50,196 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:50,196 TRACE [mio::poll] registering with poller
2020-03-29 20:14:50,197 TRACE [reqwest::blocking::client] (ThreadId(53)) start runtime::block_on
2020-03-29 20:14:50,207 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:50,207 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991895s
2020-03-29 20:14:50,208 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,208 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:50,208 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:50,208 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:50,208 TRACE [mio::poll] registering with poller
2020-03-29 20:14:50,208 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:50,209 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:50,209 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:50,209 TRACE [want] signal: Want
2020-03-29 20:14:50,209 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:50,209 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:50,209 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:50,209 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,209 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:50,210 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:50,210 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:50,210 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:50,210 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:50,210 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:50,214 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:50,214 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:50,214 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:50,214 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:50,214 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:50,214 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:50,214 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:50,214 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:50,214 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:50,215 TRACE [want] signal: Want
2020-03-29 20:14:50,215 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:50,215 TRACE [want] signal: Want
2020-03-29 20:14:50,215 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:50,215 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,215 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,215 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:50,215 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:50,215 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:50,215 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:50,215 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:50,215 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(53))
2020-03-29 20:14:50,215 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:50,215 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(53))
2020-03-29 20:14:50,215 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:50,215 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:50,215 TRACE [want] signal: Closed
2020-03-29 20:14:50,215 TRACE [reqwest::blocking::client] (ThreadId(53)) Receiver is shutdown
2020-03-29 20:14:50,216 TRACE [reqwest::blocking::client] (ThreadId(53)) end runtime::block_on
2020-03-29 20:14:50,216 TRACE [reqwest::blocking::client] (ThreadId(53)) finished
2020-03-29 20:14:50,216 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(53))
2020-03-29 20:14:50,216 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:50,216 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:50,216 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:50,216 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:50,217 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,409 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,457 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,458 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:50,458 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:50,458 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:50,458 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 27, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:50,458 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:50,458 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 27, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:50,459 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:50,459 TRACE [mio::poll] registering with poller
2020-03-29 20:14:50,459 TRACE [reqwest::blocking::client] (ThreadId(54)) start runtime::block_on
2020-03-29 20:14:50,470 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:50,470 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991775s
2020-03-29 20:14:50,470 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,470 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:50,470 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:50,470 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:50,471 TRACE [mio::poll] registering with poller
2020-03-29 20:14:50,471 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:50,471 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:50,471 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:50,471 TRACE [want] signal: Want
2020-03-29 20:14:50,471 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:50,471 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:50,471 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:50,471 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,471 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:50,471 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:50,471 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:50,471 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:50,471 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:50,471 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:50,475 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:50,476 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:50,476 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:50,476 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:50,476 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:50,476 TRACE [want] signal: Want
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:50,476 TRACE [want] signal: Want
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:50,476 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,476 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,476 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:50,476 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:50,476 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:50,476 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(54))
2020-03-29 20:14:50,476 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:50,477 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:50,476 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(54))
2020-03-29 20:14:50,477 TRACE [want] signal: Closed
2020-03-29 20:14:50,477 TRACE [reqwest::blocking::client] (ThreadId(54)) Receiver is shutdown
2020-03-29 20:14:50,477 TRACE [reqwest::blocking::client] (ThreadId(54)) end runtime::block_on
2020-03-29 20:14:50,477 TRACE [reqwest::blocking::client] (ThreadId(54)) finished
2020-03-29 20:14:50,477 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(54))
2020-03-29 20:14:50,477 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:50,478 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:50,478 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:50,478 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:50,478 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,665 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,720 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,720 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:50,721 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:50,721 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:50,721 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 28, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:50,721 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:50,721 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 28, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:50,721 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:50,721 TRACE [mio::poll] registering with poller
2020-03-29 20:14:50,722 TRACE [reqwest::blocking::client] (ThreadId(55)) start runtime::block_on
2020-03-29 20:14:50,733 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:50,733 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991013s
2020-03-29 20:14:50,733 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,733 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:50,734 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:50,734 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:50,734 TRACE [mio::poll] registering with poller
2020-03-29 20:14:50,734 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:50,734 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:50,734 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:50,734 TRACE [want] signal: Want
2020-03-29 20:14:50,734 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:50,734 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:50,734 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:50,734 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,734 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:50,735 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:50,735 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:50,735 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:50,735 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:50,735 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:50,738 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:50,738 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:50,738 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:50,738 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:50,738 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:50,738 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:50,738 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:50,738 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:50,739 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:50,739 TRACE [want] signal: Want
2020-03-29 20:14:50,739 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:50,739 TRACE [want] signal: Want
2020-03-29 20:14:50,739 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:50,739 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,739 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,739 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:50,739 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:50,739 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:50,739 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:50,739 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:50,739 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:50,739 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(55))
2020-03-29 20:14:50,739 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:50,739 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:50,739 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(55))
2020-03-29 20:14:50,739 TRACE [want] signal: Closed
2020-03-29 20:14:50,739 TRACE [reqwest::blocking::client] (ThreadId(55)) Receiver is shutdown
2020-03-29 20:14:50,740 TRACE [reqwest::blocking::client] (ThreadId(55)) end runtime::block_on
2020-03-29 20:14:50,740 TRACE [reqwest::blocking::client] (ThreadId(55)) finished
2020-03-29 20:14:50,740 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(55))
2020-03-29 20:14:50,740 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:50,740 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:50,741 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:50,741 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:50,741 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,921 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,984 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:50,984 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:50,984 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:50,985 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:50,985 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 29, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:50,985 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:50,985 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 29, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:50,985 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:50,985 TRACE [mio::poll] registering with poller
2020-03-29 20:14:50,986 TRACE [reqwest::blocking::client] (ThreadId(56)) start runtime::block_on
2020-03-29 20:14:50,997 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:50,997 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990903s
2020-03-29 20:14:50,997 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,997 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:50,997 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:50,997 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:50,998 TRACE [mio::poll] registering with poller
2020-03-29 20:14:50,998 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:50,998 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:50,998 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:50,998 TRACE [want] signal: Want
2020-03-29 20:14:50,998 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:50,998 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:50,998 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:50,999 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:50,999 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:50,999 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:50,999 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:50,999 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:50,999 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:50,999 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:51,003 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:51,003 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:51,003 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:51,003 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:51,003 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:51,003 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:51,003 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:51,003 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:51,004 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:51,004 TRACE [want] signal: Want
2020-03-29 20:14:51,004 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:51,004 TRACE [want] signal: Want
2020-03-29 20:14:51,004 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:51,004 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,004 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,004 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:51,004 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:51,004 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:51,004 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:51,004 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:51,004 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:51,004 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:51,004 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:51,004 TRACE [want] signal: Closed
2020-03-29 20:14:51,004 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(56))
2020-03-29 20:14:51,004 TRACE [reqwest::blocking::client] (ThreadId(56)) Receiver is shutdown
2020-03-29 20:14:51,004 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(56))
2020-03-29 20:14:51,005 TRACE [reqwest::blocking::client] (ThreadId(56)) end runtime::block_on
2020-03-29 20:14:51,005 TRACE [reqwest::blocking::client] (ThreadId(56)) finished
2020-03-29 20:14:51,005 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(56))
2020-03-29 20:14:51,005 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:51,005 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:51,005 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:51,005 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:51,006 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,241 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,246 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,246 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:51,246 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:51,246 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:51,246 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 30, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:51,246 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:51,247 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 30, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:51,247 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:51,247 TRACE [mio::poll] registering with poller
2020-03-29 20:14:51,248 TRACE [reqwest::blocking::client] (ThreadId(57)) start runtime::block_on
2020-03-29 20:14:51,258 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:51,258 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991024s
2020-03-29 20:14:51,259 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,259 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:51,259 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:51,259 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:51,259 TRACE [mio::poll] registering with poller
2020-03-29 20:14:51,259 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:51,259 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:51,259 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:51,259 TRACE [want] signal: Want
2020-03-29 20:14:51,259 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:51,259 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:51,259 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:51,259 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,260 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:51,260 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:51,260 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:51,260 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:51,260 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:51,260 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:51,264 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:51,264 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:51,264 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:51,264 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:51,264 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:51,264 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:51,265 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:51,265 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:51,265 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:51,265 TRACE [want] signal: Want
2020-03-29 20:14:51,265 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:51,265 TRACE [want] signal: Want
2020-03-29 20:14:51,265 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:51,265 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,265 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,265 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:51,265 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:51,265 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:51,265 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:51,265 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:51,265 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:51,265 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:51,265 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(57))
2020-03-29 20:14:51,265 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:51,265 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(57))
2020-03-29 20:14:51,265 TRACE [want] signal: Closed
2020-03-29 20:14:51,266 TRACE [reqwest::blocking::client] (ThreadId(57)) Receiver is shutdown
2020-03-29 20:14:51,266 TRACE [reqwest::blocking::client] (ThreadId(57)) end runtime::block_on
2020-03-29 20:14:51,266 TRACE [reqwest::blocking::client] (ThreadId(57)) finished
2020-03-29 20:14:51,266 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(57))
2020-03-29 20:14:51,266 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:51,266 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:51,267 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:51,267 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:51,267 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,497 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,508 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,508 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:51,508 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:51,508 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:51,508 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 31, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:51,508 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:51,509 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 31, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:51,509 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:51,509 TRACE [mio::poll] registering with poller
2020-03-29 20:14:51,510 TRACE [reqwest::blocking::client] (ThreadId(58)) start runtime::block_on
2020-03-29 20:14:51,520 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:51,520 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990974s
2020-03-29 20:14:51,521 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,521 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:51,521 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:51,521 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:51,521 TRACE [mio::poll] registering with poller
2020-03-29 20:14:51,521 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:51,522 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:51,522 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:51,522 TRACE [want] signal: Want
2020-03-29 20:14:51,522 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:51,522 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:51,522 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:51,522 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,522 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:51,523 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:51,523 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:51,523 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:51,523 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:51,523 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:51,527 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:51,527 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:51,527 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:51,527 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:51,527 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:51,527 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:51,527 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:51,527 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:51,527 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:51,528 TRACE [want] signal: Want
2020-03-29 20:14:51,528 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:51,528 TRACE [want] signal: Want
2020-03-29 20:14:51,528 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:51,528 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,528 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,528 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:51,528 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:51,528 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:51,528 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:51,528 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:51,528 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:51,528 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:51,528 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:51,528 TRACE [want] signal: Closed
2020-03-29 20:14:51,528 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(58))
2020-03-29 20:14:51,528 TRACE [reqwest::blocking::client] (ThreadId(58)) Receiver is shutdown
2020-03-29 20:14:51,528 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(58))
2020-03-29 20:14:51,529 TRACE [reqwest::blocking::client] (ThreadId(58)) end runtime::block_on
2020-03-29 20:14:51,529 TRACE [reqwest::blocking::client] (ThreadId(58)) finished
2020-03-29 20:14:51,529 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(58))
2020-03-29 20:14:51,529 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:51,529 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:51,529 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:51,529 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:51,529 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,753 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,770 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:51,770 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:51,770 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:51,770 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:51,771 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 32, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:51,771 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:51,771 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 32, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:51,771 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:51,771 TRACE [mio::poll] registering with poller
2020-03-29 20:14:51,772 TRACE [reqwest::blocking::client] (ThreadId(59)) start runtime::block_on
2020-03-29 20:14:51,782 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:51,783 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991835s
2020-03-29 20:14:51,783 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,783 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:51,783 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:51,783 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:51,783 TRACE [mio::poll] registering with poller
2020-03-29 20:14:51,783 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:51,783 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:51,783 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:51,783 TRACE [want] signal: Want
2020-03-29 20:14:51,783 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:51,783 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:51,783 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:51,783 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,784 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:51,784 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:51,784 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:51,784 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:51,784 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:51,784 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:51,788 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:51,788 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:51,788 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:51,788 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:51,788 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:51,788 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:51,789 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:51,789 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:51,789 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:51,789 TRACE [want] signal: Want
2020-03-29 20:14:51,789 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:51,789 TRACE [want] signal: Want
2020-03-29 20:14:51,789 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:51,789 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,789 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:51,789 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:51,789 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:51,789 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:51,789 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:51,789 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:51,789 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(59))
2020-03-29 20:14:51,789 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:51,789 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(59))
2020-03-29 20:14:51,789 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:51,789 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:51,789 TRACE [want] signal: Closed
2020-03-29 20:14:51,789 TRACE [reqwest::blocking::client] (ThreadId(59)) Receiver is shutdown
2020-03-29 20:14:51,790 TRACE [reqwest::blocking::client] (ThreadId(59)) end runtime::block_on
2020-03-29 20:14:51,790 TRACE [reqwest::blocking::client] (ThreadId(59)) finished
2020-03-29 20:14:51,790 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(59))
2020-03-29 20:14:51,790 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:51,790 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:51,790 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:51,790 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:51,791 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,009 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,032 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,033 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:52,033 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:52,033 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:52,033 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 33, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:52,033 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:52,033 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 33, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:52,034 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:52,034 TRACE [mio::poll] registering with poller
2020-03-29 20:14:52,034 TRACE [reqwest::blocking::client] (ThreadId(60)) start runtime::block_on
2020-03-29 20:14:52,045 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:52,045 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991344s
2020-03-29 20:14:52,045 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,045 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:52,046 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:52,046 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:52,046 TRACE [mio::poll] registering with poller
2020-03-29 20:14:52,046 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:52,046 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:52,046 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:52,046 TRACE [want] signal: Want
2020-03-29 20:14:52,046 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:52,047 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:52,047 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:52,047 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,047 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:52,047 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:52,047 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:52,047 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:52,047 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:52,048 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:52,051 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:52,051 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:52,052 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:52,052 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:52,052 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:52,052 TRACE [want] signal: Want
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:52,052 TRACE [want] signal: Want
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:52,052 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,052 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,052 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:52,052 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:52,052 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:52,052 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:52,052 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:52,052 TRACE [want] signal: Closed
2020-03-29 20:14:52,052 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(60))
2020-03-29 20:14:52,053 TRACE [reqwest::blocking::client] (ThreadId(60)) Receiver is shutdown
2020-03-29 20:14:52,053 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(60))
2020-03-29 20:14:52,053 TRACE [reqwest::blocking::client] (ThreadId(60)) end runtime::block_on
2020-03-29 20:14:52,053 TRACE [reqwest::blocking::client] (ThreadId(60)) finished
2020-03-29 20:14:52,053 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(60))
2020-03-29 20:14:52,053 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:52,053 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:52,054 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:52,054 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:52,054 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,265 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,295 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,295 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:52,295 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:52,295 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:52,295 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 34, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:52,296 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:52,296 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 34, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:52,296 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:52,296 TRACE [mio::poll] registering with poller
2020-03-29 20:14:52,297 TRACE [reqwest::blocking::client] (ThreadId(61)) start runtime::block_on
2020-03-29 20:14:52,307 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:52,307 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991474s
2020-03-29 20:14:52,308 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,308 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:52,308 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:52,308 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:52,308 TRACE [mio::poll] registering with poller
2020-03-29 20:14:52,308 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:52,308 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:52,308 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:52,308 TRACE [want] signal: Want
2020-03-29 20:14:52,308 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:52,308 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:52,308 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:52,308 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,308 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:52,309 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:52,309 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:52,309 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:52,309 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:52,309 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:52,313 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:52,313 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:52,313 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:52,314 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:52,314 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:52,314 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:52,314 TRACE [want] signal: Want
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:52,314 TRACE [want] signal: Want
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:52,314 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,314 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,314 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:52,314 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:52,314 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:52,314 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(61))
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:52,314 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(61))
2020-03-29 20:14:52,314 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:52,314 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:52,315 TRACE [want] signal: Closed
2020-03-29 20:14:52,315 TRACE [reqwest::blocking::client] (ThreadId(61)) Receiver is shutdown
2020-03-29 20:14:52,315 TRACE [reqwest::blocking::client] (ThreadId(61)) end runtime::block_on
2020-03-29 20:14:52,315 TRACE [reqwest::blocking::client] (ThreadId(61)) finished
2020-03-29 20:14:52,315 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(61))
2020-03-29 20:14:52,315 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:52,315 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:52,316 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:52,316 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:52,316 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,521 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,557 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,557 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:52,557 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:52,557 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:52,557 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 35, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:52,558 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:52,558 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 35, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:52,558 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:52,558 TRACE [mio::poll] registering with poller
2020-03-29 20:14:52,559 TRACE [reqwest::blocking::client] (ThreadId(62)) start runtime::block_on
2020-03-29 20:14:52,570 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:52,570 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990802s
2020-03-29 20:14:52,570 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,570 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:52,570 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:52,570 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:52,570 TRACE [mio::poll] registering with poller
2020-03-29 20:14:52,571 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:52,571 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:52,571 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:52,571 TRACE [want] signal: Want
2020-03-29 20:14:52,571 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:52,571 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:52,571 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:52,571 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,572 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:52,572 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:52,572 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:52,572 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:52,572 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:52,572 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:52,576 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:52,576 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:52,576 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:52,576 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:52,576 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:52,576 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:52,576 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:52,576 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:52,576 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:52,576 TRACE [want] signal: Want
2020-03-29 20:14:52,576 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:52,576 TRACE [want] signal: Want
2020-03-29 20:14:52,576 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:52,577 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,577 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,577 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:52,577 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:52,577 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:52,577 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:52,577 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:52,577 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:52,577 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:52,577 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:52,577 TRACE [want] signal: Closed
2020-03-29 20:14:52,577 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(62))
2020-03-29 20:14:52,577 TRACE [reqwest::blocking::client] (ThreadId(62)) Receiver is shutdown
2020-03-29 20:14:52,577 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(62))
2020-03-29 20:14:52,578 TRACE [reqwest::blocking::client] (ThreadId(62)) end runtime::block_on
2020-03-29 20:14:52,578 TRACE [reqwest::blocking::client] (ThreadId(62)) finished
2020-03-29 20:14:52,578 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(62))
2020-03-29 20:14:52,578 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:52,578 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:52,578 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:52,578 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:52,578 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,777 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,819 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:52,820 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:52,820 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:52,820 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:52,820 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 36, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:52,820 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:52,820 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 36, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:52,821 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:52,821 TRACE [mio::poll] registering with poller
2020-03-29 20:14:52,821 TRACE [reqwest::blocking::client] (ThreadId(63)) start runtime::block_on
2020-03-29 20:14:52,832 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:52,832 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991965s
2020-03-29 20:14:52,832 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,832 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:52,833 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:52,833 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:52,833 TRACE [mio::poll] registering with poller
2020-03-29 20:14:52,833 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:52,833 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:52,833 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:52,833 TRACE [want] signal: Want
2020-03-29 20:14:52,834 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:52,834 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:52,834 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:52,834 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,834 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:52,834 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:52,834 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:52,834 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:52,834 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:52,834 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:52,838 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:52,839 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:52,839 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:52,839 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:52,839 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:52,839 TRACE [want] signal: Want
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:52,839 TRACE [want] signal: Want
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:52,839 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,839 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:52,839 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:52,839 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:52,839 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:52,839 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:52,839 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:52,839 TRACE [want] signal: Closed
2020-03-29 20:14:52,839 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(63))
2020-03-29 20:14:52,840 TRACE [reqwest::blocking::client] (ThreadId(63)) Receiver is shutdown
2020-03-29 20:14:52,840 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(63))
2020-03-29 20:14:52,840 TRACE [reqwest::blocking::client] (ThreadId(63)) end runtime::block_on
2020-03-29 20:14:52,840 TRACE [reqwest::blocking::client] (ThreadId(63)) finished
2020-03-29 20:14:52,840 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(63))
2020-03-29 20:14:52,840 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:52,840 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:52,841 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:52,841 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:52,841 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,033 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,082 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,082 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,082 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,082 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:53,082 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 37, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:53,082 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:53,083 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 37, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:53,083 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:53,083 TRACE [mio::poll] registering with poller
2020-03-29 20:14:53,084 TRACE [reqwest::blocking::client] (ThreadId(64)) start runtime::block_on
2020-03-29 20:14:53,095 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:53,095 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.99998911s
2020-03-29 20:14:53,095 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,095 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:53,095 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:53,095 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:53,095 TRACE [mio::poll] registering with poller
2020-03-29 20:14:53,095 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:53,096 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:53,096 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:53,096 TRACE [want] signal: Want
2020-03-29 20:14:53,096 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:53,096 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:53,096 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:53,096 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,096 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:53,096 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:53,096 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:53,096 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:53,096 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:53,096 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:53,101 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:53,101 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:53,101 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:53,101 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:53,101 TRACE [want] signal: Want
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:53,101 TRACE [want] signal: Want
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:53,101 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,101 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,101 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:53,101 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:53,101 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:53,101 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:53,102 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:53,102 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:53,102 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(64))
2020-03-29 20:14:53,102 TRACE [want] signal: Closed
2020-03-29 20:14:53,102 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(64))
2020-03-29 20:14:53,102 TRACE [reqwest::blocking::client] (ThreadId(64)) Receiver is shutdown
2020-03-29 20:14:53,102 TRACE [reqwest::blocking::client] (ThreadId(64)) end runtime::block_on
2020-03-29 20:14:53,102 TRACE [reqwest::blocking::client] (ThreadId(64)) finished
2020-03-29 20:14:53,103 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(64))
2020-03-29 20:14:53,103 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:53,103 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:53,103 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,103 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,103 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,289 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,344 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,344 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,344 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,344 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:53,345 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 38, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:53,345 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:53,345 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 38, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:53,345 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:53,345 TRACE [mio::poll] registering with poller
2020-03-29 20:14:53,346 TRACE [reqwest::blocking::client] (ThreadId(65)) start runtime::block_on
2020-03-29 20:14:53,357 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:53,357 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991474s
2020-03-29 20:14:53,357 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,357 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:53,357 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:53,357 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:53,358 TRACE [mio::poll] registering with poller
2020-03-29 20:14:53,358 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:53,358 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:53,358 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:53,358 TRACE [want] signal: Want
2020-03-29 20:14:53,358 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:53,358 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:53,358 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:53,358 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,359 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:53,359 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:53,359 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:53,359 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:53,359 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:53,359 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:53,364 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:53,364 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:53,364 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:53,364 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:53,364 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:53,364 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:53,364 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:53,364 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:53,364 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:53,364 TRACE [want] signal: Want
2020-03-29 20:14:53,364 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:53,364 TRACE [want] signal: Want
2020-03-29 20:14:53,364 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:53,364 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,364 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,364 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:53,364 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:53,364 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:53,364 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:53,365 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:53,365 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:53,365 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:53,365 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(65))
2020-03-29 20:14:53,365 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:53,365 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(65))
2020-03-29 20:14:53,365 TRACE [want] signal: Closed
2020-03-29 20:14:53,365 TRACE [reqwest::blocking::client] (ThreadId(65)) Receiver is shutdown
2020-03-29 20:14:53,365 TRACE [reqwest::blocking::client] (ThreadId(65)) end runtime::block_on
2020-03-29 20:14:53,365 TRACE [reqwest::blocking::client] (ThreadId(65)) finished
2020-03-29 20:14:53,365 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(65))
2020-03-29 20:14:53,366 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:53,366 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:53,366 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,366 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,366 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,546 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,606 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,606 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,606 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,606 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:53,607 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 39, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:53,607 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:53,607 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 39, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:53,607 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:53,607 TRACE [mio::poll] registering with poller
2020-03-29 20:14:53,608 TRACE [reqwest::blocking::client] (ThreadId(66)) start runtime::block_on
2020-03-29 20:14:53,619 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:53,619 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991744s
2020-03-29 20:14:53,619 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,619 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:53,619 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:53,619 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:53,619 TRACE [mio::poll] registering with poller
2020-03-29 20:14:53,620 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:53,620 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:53,620 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:53,620 TRACE [want] signal: Want
2020-03-29 20:14:53,620 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:53,620 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:53,620 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:53,620 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,620 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:53,620 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:53,620 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:53,620 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:53,620 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:53,620 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:53,624 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:53,624 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:53,624 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:53,624 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:53,624 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:53,624 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:53,624 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:53,624 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:53,624 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:53,625 TRACE [want] signal: Want
2020-03-29 20:14:53,625 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:53,625 TRACE [want] signal: Want
2020-03-29 20:14:53,625 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:53,625 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,625 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,625 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:53,625 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:53,625 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:53,625 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:53,625 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:53,625 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:53,625 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(66))
2020-03-29 20:14:53,625 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:53,625 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(66))
2020-03-29 20:14:53,625 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:53,625 TRACE [want] signal: Closed
2020-03-29 20:14:53,625 TRACE [reqwest::blocking::client] (ThreadId(66)) Receiver is shutdown
2020-03-29 20:14:53,626 TRACE [reqwest::blocking::client] (ThreadId(66)) end runtime::block_on
2020-03-29 20:14:53,626 TRACE [reqwest::blocking::client] (ThreadId(66)) finished
2020-03-29 20:14:53,626 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(66))
2020-03-29 20:14:53,626 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:53,626 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:53,626 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,626 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,627 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,635 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,635 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,865 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,868 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:53,868 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,868 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,868 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:53,868 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 40, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:53,869 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:53,869 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 40, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:53,869 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:53,869 TRACE [mio::poll] registering with poller
2020-03-29 20:14:53,870 TRACE [reqwest::blocking::client] (ThreadId(67)) start runtime::block_on
2020-03-29 20:14:53,881 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:53,881 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991234s
2020-03-29 20:14:53,881 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,881 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:53,881 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:53,881 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:53,881 TRACE [mio::poll] registering with poller
2020-03-29 20:14:53,881 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:53,881 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:53,881 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:53,881 TRACE [want] signal: Want
2020-03-29 20:14:53,881 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:53,881 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:53,882 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:53,882 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,882 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:53,882 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:53,882 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:53,882 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:53,882 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:53,882 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:53,886 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:53,886 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:53,886 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:53,886 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:53,887 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:53,887 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:53,887 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:53,887 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:53,887 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:53,887 TRACE [want] signal: Want
2020-03-29 20:14:53,887 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:53,887 TRACE [want] signal: Want
2020-03-29 20:14:53,887 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:53,887 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,887 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:53,887 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:53,887 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:53,887 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:53,887 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:53,887 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:53,887 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:53,887 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:53,887 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(67))
2020-03-29 20:14:53,887 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:53,887 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(67))
2020-03-29 20:14:53,887 TRACE [want] signal: Closed
2020-03-29 20:14:53,888 TRACE [reqwest::blocking::client] (ThreadId(67)) Receiver is shutdown
2020-03-29 20:14:53,888 TRACE [reqwest::blocking::client] (ThreadId(67)) end runtime::block_on
2020-03-29 20:14:53,888 TRACE [reqwest::blocking::client] (ThreadId(67)) finished
2020-03-29 20:14:53,888 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(67))
2020-03-29 20:14:53,888 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:53,888 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:53,889 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:53,889 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:53,889 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,122 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,130 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,131 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:54,131 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:54,131 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:54,131 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 41, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:54,131 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:54,131 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 41, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:54,132 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:54,132 TRACE [mio::poll] registering with poller
2020-03-29 20:14:54,133 TRACE [reqwest::blocking::client] (ThreadId(68)) start runtime::block_on
2020-03-29 20:14:54,143 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:54,143 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991464s
2020-03-29 20:14:54,143 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,143 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:54,143 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:54,143 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:54,144 TRACE [mio::poll] registering with poller
2020-03-29 20:14:54,144 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:54,144 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:54,144 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:54,144 TRACE [want] signal: Want
2020-03-29 20:14:54,144 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:54,144 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:54,144 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:54,144 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,144 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:54,144 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:54,144 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:54,144 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:54,144 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:54,144 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:54,150 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:54,150 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:54,150 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:54,150 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:54,150 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:54,150 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:54,150 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:54,150 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:54,150 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:54,150 TRACE [want] signal: Want
2020-03-29 20:14:54,150 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:54,150 TRACE [want] signal: Want
2020-03-29 20:14:54,150 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:54,150 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,150 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,150 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:54,150 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:54,150 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:54,150 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(68))
2020-03-29 20:14:54,150 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:54,151 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:54,151 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(68))
2020-03-29 20:14:54,151 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:54,151 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:54,151 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:54,151 TRACE [want] signal: Closed
2020-03-29 20:14:54,151 TRACE [reqwest::blocking::client] (ThreadId(68)) Receiver is shutdown
2020-03-29 20:14:54,151 TRACE [reqwest::blocking::client] (ThreadId(68)) end runtime::block_on
2020-03-29 20:14:54,151 TRACE [reqwest::blocking::client] (ThreadId(68)) finished
2020-03-29 20:14:54,151 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(68))
2020-03-29 20:14:54,152 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:54,152 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:54,152 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:54,152 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:54,152 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,377 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,393 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,394 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:54,394 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:54,394 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:54,394 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 42, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:54,394 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:54,394 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 42, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:54,394 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:54,394 TRACE [mio::poll] registering with poller
2020-03-29 20:14:54,395 TRACE [reqwest::blocking::client] (ThreadId(69)) start runtime::block_on
2020-03-29 20:14:54,406 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:54,406 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991965s
2020-03-29 20:14:54,406 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,406 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:54,406 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:54,406 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:54,407 TRACE [mio::poll] registering with poller
2020-03-29 20:14:54,407 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:54,407 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:54,407 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:54,407 TRACE [want] signal: Want
2020-03-29 20:14:54,407 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:54,407 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:54,407 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:54,407 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,408 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:54,408 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:54,408 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:54,408 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:54,408 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:54,408 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:54,413 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:54,413 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:54,413 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:54,413 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:54,413 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:54,413 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:54,413 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:54,413 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:54,413 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:54,413 TRACE [want] signal: Want
2020-03-29 20:14:54,413 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:54,414 TRACE [want] signal: Want
2020-03-29 20:14:54,414 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:54,414 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,414 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,414 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:54,414 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:54,414 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:54,414 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(69))
2020-03-29 20:14:54,414 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:54,414 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:54,414 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(69))
2020-03-29 20:14:54,414 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:54,414 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:54,414 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:54,414 TRACE [want] signal: Closed
2020-03-29 20:14:54,414 TRACE [reqwest::blocking::client] (ThreadId(69)) Receiver is shutdown
2020-03-29 20:14:54,415 TRACE [reqwest::blocking::client] (ThreadId(69)) end runtime::block_on
2020-03-29 20:14:54,415 TRACE [reqwest::blocking::client] (ThreadId(69)) finished
2020-03-29 20:14:54,415 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(69))
2020-03-29 20:14:54,415 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:54,415 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:54,415 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:54,415 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:54,416 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,633 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,656 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,656 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:54,656 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:54,656 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:54,657 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 43, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:54,657 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:54,657 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 43, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:54,657 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:54,657 TRACE [mio::poll] registering with poller
2020-03-29 20:14:54,658 TRACE [reqwest::blocking::client] (ThreadId(70)) start runtime::block_on
2020-03-29 20:14:54,668 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:54,669 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991885s
2020-03-29 20:14:54,669 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,669 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:54,669 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:54,669 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:54,669 TRACE [mio::poll] registering with poller
2020-03-29 20:14:54,670 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:54,670 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:54,670 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:54,670 TRACE [want] signal: Want
2020-03-29 20:14:54,670 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:54,670 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:54,670 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:54,670 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,670 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:54,671 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:54,671 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:54,671 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:54,671 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:54,671 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:54,675 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:54,675 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:54,675 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:54,675 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:54,675 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:54,675 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:54,676 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:54,676 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:54,676 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:54,676 TRACE [want] signal: Want
2020-03-29 20:14:54,676 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:54,676 TRACE [want] signal: Want
2020-03-29 20:14:54,676 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:54,676 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,676 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,676 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:54,676 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:54,676 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:54,676 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:54,676 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:54,676 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:54,676 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:54,676 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:54,676 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(70))
2020-03-29 20:14:54,676 TRACE [want] signal: Closed
2020-03-29 20:14:54,676 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(70))
2020-03-29 20:14:54,676 TRACE [reqwest::blocking::client] (ThreadId(70)) Receiver is shutdown
2020-03-29 20:14:54,677 TRACE [reqwest::blocking::client] (ThreadId(70)) end runtime::block_on
2020-03-29 20:14:54,677 TRACE [reqwest::blocking::client] (ThreadId(70)) finished
2020-03-29 20:14:54,677 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(70))
2020-03-29 20:14:54,677 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:54,677 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:54,677 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:54,678 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:54,678 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,889 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,918 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:54,919 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:54,919 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:54,919 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:54,919 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 44, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:54,919 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:54,919 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 44, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:54,919 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:54,919 TRACE [mio::poll] registering with poller
2020-03-29 20:14:54,920 TRACE [reqwest::blocking::client] (ThreadId(71)) start runtime::block_on
2020-03-29 20:14:54,931 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:54,931 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999993147s
2020-03-29 20:14:54,931 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,931 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:54,931 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:54,931 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:54,931 TRACE [mio::poll] registering with poller
2020-03-29 20:14:54,931 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:54,931 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:54,931 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:54,931 TRACE [want] signal: Want
2020-03-29 20:14:54,931 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:54,931 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:54,931 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:54,931 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,932 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:54,932 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:54,932 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:54,932 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:54,932 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:54,932 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:54,935 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:54,936 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:54,936 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:54,936 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:54,936 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:54,936 TRACE [want] signal: Want
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:54,936 TRACE [want] signal: Want
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:54,936 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,936 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:54,936 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:54,936 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:54,936 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:54,936 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:54,937 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:54,937 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(71))
2020-03-29 20:14:54,937 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:54,937 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(71))
2020-03-29 20:14:54,937 TRACE [want] signal: Closed
2020-03-29 20:14:54,937 TRACE [reqwest::blocking::client] (ThreadId(71)) Receiver is shutdown
2020-03-29 20:14:54,937 TRACE [reqwest::blocking::client] (ThreadId(71)) end runtime::block_on
2020-03-29 20:14:54,937 TRACE [reqwest::blocking::client] (ThreadId(71)) finished
2020-03-29 20:14:54,937 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(71))
2020-03-29 20:14:54,938 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:54,938 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:54,938 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:54,938 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:54,938 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,017 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,145 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,181 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,181 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:55,181 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:55,182 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:55,182 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 45, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:55,182 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:55,182 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 45, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:55,182 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:55,182 TRACE [mio::poll] registering with poller
2020-03-29 20:14:55,183 TRACE [reqwest::blocking::client] (ThreadId(72)) start runtime::block_on
2020-03-29 20:14:55,194 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:55,194 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991274s
2020-03-29 20:14:55,194 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,194 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:55,194 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:55,194 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:55,194 TRACE [mio::poll] registering with poller
2020-03-29 20:14:55,194 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:55,195 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:55,195 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:55,195 TRACE [want] signal: Want
2020-03-29 20:14:55,195 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:55,195 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:55,195 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:55,195 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,195 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:55,195 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:55,195 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:55,195 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:55,195 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:55,195 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:55,199 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:55,199 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:55,199 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:55,199 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:55,199 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:55,200 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:55,200 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:55,200 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:55,200 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:55,200 TRACE [want] signal: Want
2020-03-29 20:14:55,200 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:55,200 TRACE [want] signal: Want
2020-03-29 20:14:55,200 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:55,200 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,200 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,200 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:55,200 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:55,200 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:55,200 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:55,200 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:55,200 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:55,200 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:55,200 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(72))
2020-03-29 20:14:55,200 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:55,200 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(72))
2020-03-29 20:14:55,200 TRACE [want] signal: Closed
2020-03-29 20:14:55,200 TRACE [reqwest::blocking::client] (ThreadId(72)) Receiver is shutdown
2020-03-29 20:14:55,201 TRACE [reqwest::blocking::client] (ThreadId(72)) end runtime::block_on
2020-03-29 20:14:55,201 TRACE [reqwest::blocking::client] (ThreadId(72)) finished
2020-03-29 20:14:55,201 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(72))
2020-03-29 20:14:55,201 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:55,201 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:55,201 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:55,201 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:55,202 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,401 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,443 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,444 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:55,444 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:55,444 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:55,444 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 46, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:55,444 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:55,444 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 46, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:55,445 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:55,445 TRACE [mio::poll] registering with poller
2020-03-29 20:14:55,446 TRACE [reqwest::blocking::client] (ThreadId(73)) start runtime::block_on
2020-03-29 20:14:55,456 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:55,456 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999989982s
2020-03-29 20:14:55,457 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,457 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:55,457 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:55,457 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:55,457 TRACE [mio::poll] registering with poller
2020-03-29 20:14:55,457 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:55,458 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:55,458 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:55,458 TRACE [want] signal: Want
2020-03-29 20:14:55,458 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:55,458 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:55,458 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:55,458 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,458 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:55,458 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:55,459 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:55,459 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:55,459 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:55,459 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:55,463 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:55,463 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:55,463 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:55,463 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:55,464 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:55,464 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:55,464 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:55,464 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:55,464 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:55,464 TRACE [want] signal: Want
2020-03-29 20:14:55,464 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:55,464 TRACE [want] signal: Want
2020-03-29 20:14:55,464 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:55,464 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,464 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,464 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:55,464 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:55,464 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:55,464 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:55,464 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:55,464 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:55,464 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:55,464 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(73))
2020-03-29 20:14:55,464 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:55,464 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(73))
2020-03-29 20:14:55,464 TRACE [want] signal: Closed
2020-03-29 20:14:55,465 TRACE [reqwest::blocking::client] (ThreadId(73)) Receiver is shutdown
2020-03-29 20:14:55,465 TRACE [reqwest::blocking::client] (ThreadId(73)) end runtime::block_on
2020-03-29 20:14:55,465 TRACE [reqwest::blocking::client] (ThreadId(73)) finished
2020-03-29 20:14:55,465 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(73))
2020-03-29 20:14:55,465 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:55,465 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:55,466 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:55,466 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:55,466 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,657 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,706 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,706 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:55,706 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:55,707 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:55,707 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 47, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:55,707 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:55,707 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 47, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:55,707 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:55,707 TRACE [mio::poll] registering with poller
2020-03-29 20:14:55,708 TRACE [reqwest::blocking::client] (ThreadId(74)) start runtime::block_on
2020-03-29 20:14:55,716 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:55,717 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,717 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999989781s
2020-03-29 20:14:55,717 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:55,717 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:55,717 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:55,717 TRACE [mio::poll] registering with poller
2020-03-29 20:14:55,717 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:55,717 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:55,717 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:55,717 TRACE [want] signal: Want
2020-03-29 20:14:55,717 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:55,717 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:55,717 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:55,718 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,718 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:55,718 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:55,718 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:55,718 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:55,718 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:55,718 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:55,723 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:55,723 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:55,723 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:55,724 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:55,724 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:55,724 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:55,724 TRACE [want] signal: Want
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:55,724 TRACE [want] signal: Want
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:55,724 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,724 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,724 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:55,724 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:55,724 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:55,724 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:55,724 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:55,725 TRACE [want] signal: Closed
2020-03-29 20:14:55,725 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(74))
2020-03-29 20:14:55,725 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(74))
2020-03-29 20:14:55,725 TRACE [reqwest::blocking::client] (ThreadId(74)) Receiver is shutdown
2020-03-29 20:14:55,726 TRACE [reqwest::blocking::client] (ThreadId(74)) end runtime::block_on
2020-03-29 20:14:55,726 TRACE [reqwest::blocking::client] (ThreadId(74)) finished
2020-03-29 20:14:55,726 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(74))
2020-03-29 20:14:55,726 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:55,726 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:55,726 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:55,726 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:55,727 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,913 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,968 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:55,969 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:55,969 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:55,969 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:55,969 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 48, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:55,969 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:55,969 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 48, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:55,970 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:55,970 TRACE [mio::poll] registering with poller
2020-03-29 20:14:55,971 TRACE [reqwest::blocking::client] (ThreadId(75)) start runtime::block_on
2020-03-29 20:14:55,981 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:55,981 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999989921s
2020-03-29 20:14:55,982 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,982 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:55,982 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:55,982 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:55,982 TRACE [mio::poll] registering with poller
2020-03-29 20:14:55,982 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:55,982 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:55,982 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:55,982 TRACE [want] signal: Want
2020-03-29 20:14:55,982 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:55,982 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:55,982 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:55,982 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:55,982 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:55,983 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:55,983 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:55,983 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:55,983 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:55,983 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:55,985 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:55,985 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:55,985 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:55,985 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:55,985 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:55,985 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:55,985 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:55,985 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:55,986 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:55,986 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:14:55,986 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:14:55,986 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:14:55,986 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:14:55,986 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:55,986 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:55,986 TRACE [want] signal: Closed
2020-03-29 20:14:55,986 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:55,986 TRACE [want] poll_want: closed
2020-03-29 20:14:55,986 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:55,986 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(75))
2020-03-29 20:14:55,986 TRACE [reqwest::blocking::client] (ThreadId(75)) Receiver is shutdown
2020-03-29 20:14:55,986 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(75))
2020-03-29 20:14:55,987 TRACE [reqwest::blocking::client] (ThreadId(75)) end runtime::block_on
2020-03-29 20:14:55,987 TRACE [reqwest::blocking::client] (ThreadId(75)) finished
2020-03-29 20:14:55,987 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(75))
2020-03-29 20:14:55,987 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:55,987 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:55,987 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:55,988 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:55,988 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,169 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,232 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,232 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:56,232 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:56,233 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:56,233 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 49, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:56,233 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:56,233 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 49, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:56,233 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:56,233 TRACE [mio::poll] registering with poller
2020-03-29 20:14:56,234 TRACE [reqwest::blocking::client] (ThreadId(76)) start runtime::block_on
2020-03-29 20:14:56,245 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:56,245 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999989831s
2020-03-29 20:14:56,245 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,245 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:56,245 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:56,245 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:56,246 TRACE [mio::poll] registering with poller
2020-03-29 20:14:56,246 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:56,246 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:56,246 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:56,246 TRACE [want] signal: Want
2020-03-29 20:14:56,246 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:56,246 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:56,247 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:56,247 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,247 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:56,247 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:56,247 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:56,247 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:56,247 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:56,247 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:56,252 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:56,252 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:56,252 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:56,252 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:56,252 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:56,252 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:56,252 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:56,252 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:56,252 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:56,252 TRACE [want] signal: Want
2020-03-29 20:14:56,252 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:56,252 TRACE [want] signal: Want
2020-03-29 20:14:56,253 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:56,253 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,253 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,253 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:56,253 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:56,253 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:56,253 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:56,253 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:56,253 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:56,253 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:56,253 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(76))
2020-03-29 20:14:56,253 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:56,253 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(76))
2020-03-29 20:14:56,253 TRACE [want] signal: Closed
2020-03-29 20:14:56,253 TRACE [reqwest::blocking::client] (ThreadId(76)) Receiver is shutdown
2020-03-29 20:14:56,254 TRACE [reqwest::blocking::client] (ThreadId(76)) end runtime::block_on
2020-03-29 20:14:56,254 TRACE [reqwest::blocking::client] (ThreadId(76)) finished
2020-03-29 20:14:56,254 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(76))
2020-03-29 20:14:56,254 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:56,254 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:56,254 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:56,255 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:56,255 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,489 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,493 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,494 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:56,494 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:56,494 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:56,494 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 50, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:56,494 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:56,495 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 50, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:56,495 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:56,495 TRACE [mio::poll] registering with poller
2020-03-29 20:14:56,496 TRACE [reqwest::blocking::client] (ThreadId(77)) start runtime::block_on
2020-03-29 20:14:56,509 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:56,509 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990462s
2020-03-29 20:14:56,509 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,509 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:56,509 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:56,509 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:56,509 TRACE [mio::poll] registering with poller
2020-03-29 20:14:56,509 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:56,509 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:56,509 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:56,509 TRACE [want] signal: Want
2020-03-29 20:14:56,509 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:56,509 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:56,509 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:56,509 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,509 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:56,510 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:56,510 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:56,510 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:56,510 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:56,510 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:56,513 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:56,513 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:56,513 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:56,513 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:56,513 TRACE [want] signal: Want
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:56,513 TRACE [want] signal: Want
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:56,513 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,513 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,513 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:56,513 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:56,513 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:56,513 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:56,513 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:56,513 TRACE [want] signal: Closed
2020-03-29 20:14:56,513 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(77))
2020-03-29 20:14:56,514 TRACE [reqwest::blocking::client] (ThreadId(77)) Receiver is shutdown
2020-03-29 20:14:56,514 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(77))
2020-03-29 20:14:56,514 TRACE [reqwest::blocking::client] (ThreadId(77)) end runtime::block_on
2020-03-29 20:14:56,514 TRACE [reqwest::blocking::client] (ThreadId(77)) finished
2020-03-29 20:14:56,514 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(77))
2020-03-29 20:14:56,514 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:56,514 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:56,515 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:56,515 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:56,515 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,746 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,756 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:56,757 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:56,757 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:56,757 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:56,757 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 51, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:56,757 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:56,757 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 51, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:56,757 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:56,758 TRACE [mio::poll] registering with poller
2020-03-29 20:14:56,758 TRACE [reqwest::blocking::client] (ThreadId(78)) start runtime::block_on
2020-03-29 20:14:56,770 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:56,770 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990051s
2020-03-29 20:14:56,770 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,770 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:56,770 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:56,770 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:56,770 TRACE [mio::poll] registering with poller
2020-03-29 20:14:56,771 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:56,771 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:56,771 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:56,771 TRACE [want] signal: Want
2020-03-29 20:14:56,771 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:56,771 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:56,771 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:56,771 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,771 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:56,771 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:56,771 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:56,771 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:56,771 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:56,771 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:56,775 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:56,775 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:56,776 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:56,776 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:56,776 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:56,776 TRACE [want] signal: Want
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:56,776 TRACE [want] signal: Want
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:56,776 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,776 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:56,776 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:56,776 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:56,776 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:56,776 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:56,776 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:56,776 TRACE [want] signal: Closed
2020-03-29 20:14:56,776 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(78))
2020-03-29 20:14:56,777 TRACE [reqwest::blocking::client] (ThreadId(78)) Receiver is shutdown
2020-03-29 20:14:56,777 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(78))
2020-03-29 20:14:56,777 TRACE [reqwest::blocking::client] (ThreadId(78)) end runtime::block_on
2020-03-29 20:14:56,777 TRACE [reqwest::blocking::client] (ThreadId(78)) finished
2020-03-29 20:14:56,777 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(78))
2020-03-29 20:14:56,777 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:56,777 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:56,778 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:56,778 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:56,778 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,001 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,019 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,019 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:57,019 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:57,020 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:57,020 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 52, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:57,020 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:57,020 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 52, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:57,020 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:57,020 TRACE [mio::poll] registering with poller
2020-03-29 20:14:57,021 TRACE [reqwest::blocking::client] (ThreadId(79)) start runtime::block_on
2020-03-29 20:14:57,033 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:57,033 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990082s
2020-03-29 20:14:57,033 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,034 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:57,034 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:57,034 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:57,034 TRACE [mio::poll] registering with poller
2020-03-29 20:14:57,034 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:57,034 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:57,034 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:57,034 TRACE [want] signal: Want
2020-03-29 20:14:57,034 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:57,034 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:57,034 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:57,034 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,034 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:57,034 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:57,034 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:57,034 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:57,035 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:57,035 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:57,039 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:57,039 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:57,039 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:57,039 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:57,039 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:57,039 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:57,039 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:57,039 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:57,039 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:57,040 TRACE [want] signal: Want
2020-03-29 20:14:57,040 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:57,040 TRACE [want] signal: Want
2020-03-29 20:14:57,040 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:57,040 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,040 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,040 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:57,040 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:57,040 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:57,040 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:57,040 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:57,040 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:57,040 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:57,040 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(79))
2020-03-29 20:14:57,040 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:57,040 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(79))
2020-03-29 20:14:57,040 TRACE [want] signal: Closed
2020-03-29 20:14:57,040 TRACE [reqwest::blocking::client] (ThreadId(79)) Receiver is shutdown
2020-03-29 20:14:57,041 TRACE [reqwest::blocking::client] (ThreadId(79)) end runtime::block_on
2020-03-29 20:14:57,041 TRACE [reqwest::blocking::client] (ThreadId(79)) finished
2020-03-29 20:14:57,041 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(79))
2020-03-29 20:14:57,041 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:57,041 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:57,042 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:57,042 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:57,042 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,257 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,281 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,281 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:57,281 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:57,281 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:57,281 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 53, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:57,282 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:57,282 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 53, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:57,282 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:57,282 TRACE [mio::poll] registering with poller
2020-03-29 20:14:57,283 TRACE [reqwest::blocking::client] (ThreadId(80)) start runtime::block_on
2020-03-29 20:14:57,294 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:57,294 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990151s
2020-03-29 20:14:57,294 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,294 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:57,294 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:57,294 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:57,294 TRACE [mio::poll] registering with poller
2020-03-29 20:14:57,294 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:57,294 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:57,295 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:57,295 TRACE [want] signal: Want
2020-03-29 20:14:57,295 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:57,295 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:57,295 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:57,295 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,295 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:57,295 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:57,295 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:57,295 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:57,295 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:57,295 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:57,299 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:57,300 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:57,300 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:57,300 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:57,300 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:57,300 TRACE [want] signal: Want
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:57,300 TRACE [want] signal: Want
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:57,300 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,300 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,300 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:57,300 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:57,300 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:57,300 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:57,300 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(80))
2020-03-29 20:14:57,300 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:57,301 TRACE [want] signal: Closed
2020-03-29 20:14:57,301 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(80))
2020-03-29 20:14:57,301 TRACE [reqwest::blocking::client] (ThreadId(80)) Receiver is shutdown
2020-03-29 20:14:57,301 TRACE [reqwest::blocking::client] (ThreadId(80)) end runtime::block_on
2020-03-29 20:14:57,301 TRACE [reqwest::blocking::client] (ThreadId(80)) finished
2020-03-29 20:14:57,301 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(80))
2020-03-29 20:14:57,301 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:57,302 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:57,302 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:57,302 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:57,302 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,514 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,543 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,544 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:57,544 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:57,544 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:57,544 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 54, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:57,544 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:57,544 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 54, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:57,545 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:57,545 TRACE [mio::poll] registering with poller
2020-03-29 20:14:57,546 TRACE [reqwest::blocking::client] (ThreadId(81)) start runtime::block_on
2020-03-29 20:14:57,559 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:57,559 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999989971s
2020-03-29 20:14:57,559 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,559 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:57,559 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:57,559 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:57,559 TRACE [mio::poll] registering with poller
2020-03-29 20:14:57,559 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:57,559 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:57,559 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:57,559 TRACE [want] signal: Want
2020-03-29 20:14:57,559 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:57,559 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:57,559 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:57,559 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,559 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:57,560 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:57,560 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:57,560 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:57,560 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:57,560 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:57,563 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:57,563 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:57,563 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:57,563 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:57,563 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:57,563 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:57,563 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:57,563 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:57,563 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:57,563 TRACE [want] signal: Want
2020-03-29 20:14:57,564 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:57,564 TRACE [want] signal: Want
2020-03-29 20:14:57,564 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:57,564 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,564 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,564 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:57,564 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:57,564 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:57,564 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:57,564 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:57,564 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:57,564 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:57,564 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(81))
2020-03-29 20:14:57,564 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:57,564 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(81))
2020-03-29 20:14:57,564 TRACE [want] signal: Closed
2020-03-29 20:14:57,564 TRACE [reqwest::blocking::client] (ThreadId(81)) Receiver is shutdown
2020-03-29 20:14:57,565 TRACE [reqwest::blocking::client] (ThreadId(81)) end runtime::block_on
2020-03-29 20:14:57,565 TRACE [reqwest::blocking::client] (ThreadId(81)) finished
2020-03-29 20:14:57,565 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(81))
2020-03-29 20:14:57,565 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:57,565 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:57,565 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:57,566 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:57,566 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,769 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,806 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:57,806 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:57,807 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:57,807 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:57,807 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 55, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:57,807 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:57,807 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 55, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:57,807 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:57,807 TRACE [mio::poll] registering with poller
2020-03-29 20:14:57,808 TRACE [reqwest::blocking::client] (ThreadId(82)) start runtime::block_on
2020-03-29 20:14:57,818 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:57,818 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,818 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990332s
2020-03-29 20:14:57,818 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:57,818 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:57,818 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:57,818 TRACE [mio::poll] registering with poller
2020-03-29 20:14:57,818 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:57,818 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:57,818 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:57,818 TRACE [want] signal: Want
2020-03-29 20:14:57,818 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:57,818 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:57,819 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:57,819 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,819 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:57,819 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:57,819 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:57,819 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:57,819 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:57,819 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:57,824 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:57,825 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:57,825 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:57,825 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:57,825 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:57,825 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:57,825 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:57,825 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:57,825 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:57,825 TRACE [want] signal: Want
2020-03-29 20:14:57,825 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:57,825 TRACE [want] signal: Want
2020-03-29 20:14:57,825 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:57,825 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,825 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:57,825 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:57,825 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:57,825 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:57,825 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:57,826 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:57,826 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:57,826 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:57,826 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(82))
2020-03-29 20:14:57,826 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:57,826 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(82))
2020-03-29 20:14:57,826 TRACE [want] signal: Closed
2020-03-29 20:14:57,826 TRACE [reqwest::blocking::client] (ThreadId(82)) Receiver is shutdown
2020-03-29 20:14:57,827 TRACE [reqwest::blocking::client] (ThreadId(82)) end runtime::block_on
2020-03-29 20:14:57,827 TRACE [reqwest::blocking::client] (ThreadId(82)) finished
2020-03-29 20:14:57,827 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(82))
2020-03-29 20:14:57,827 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:57,827 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:57,827 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:57,827 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:57,828 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,025 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,068 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,068 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,068 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,068 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:58,069 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 56, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:58,069 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:58,069 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 56, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:58,069 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:58,069 TRACE [mio::poll] registering with poller
2020-03-29 20:14:58,070 TRACE [reqwest::blocking::client] (ThreadId(83)) start runtime::block_on
2020-03-29 20:14:58,081 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:58,081 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990963s
2020-03-29 20:14:58,081 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,081 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:58,081 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:58,081 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:58,081 TRACE [mio::poll] registering with poller
2020-03-29 20:14:58,082 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:58,082 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:58,082 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:58,082 TRACE [want] signal: Want
2020-03-29 20:14:58,082 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:58,082 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:58,082 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:58,082 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,083 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:58,083 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:58,083 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:58,083 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:58,083 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:58,083 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:58,086 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:58,087 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:58,087 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:58,087 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:58,087 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:58,087 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:58,087 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:58,087 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:58,087 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:58,087 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:14:58,087 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:14:58,087 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:14:58,087 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:14:58,087 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:58,087 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:58,087 TRACE [want] signal: Closed
2020-03-29 20:14:58,087 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:58,087 TRACE [want] poll_want: closed
2020-03-29 20:14:58,087 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:58,088 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(83))
2020-03-29 20:14:58,088 TRACE [reqwest::blocking::client] (ThreadId(83)) Receiver is shutdown
2020-03-29 20:14:58,088 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(83))
2020-03-29 20:14:58,088 TRACE [reqwest::blocking::client] (ThreadId(83)) end runtime::block_on
2020-03-29 20:14:58,088 TRACE [reqwest::blocking::client] (ThreadId(83)) finished
2020-03-29 20:14:58,088 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(83))
2020-03-29 20:14:58,089 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:58,089 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:58,089 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,089 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,089 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,281 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,330 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,331 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,331 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,331 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:58,331 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 57, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:58,331 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:58,331 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 57, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:58,331 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:58,332 TRACE [mio::poll] registering with poller
2020-03-29 20:14:58,332 TRACE [reqwest::blocking::client] (ThreadId(84)) start runtime::block_on
2020-03-29 20:14:58,343 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:58,343 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991073s
2020-03-29 20:14:58,343 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,343 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:58,343 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:58,343 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:58,343 TRACE [mio::poll] registering with poller
2020-03-29 20:14:58,344 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:58,344 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:58,344 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:58,344 TRACE [want] signal: Want
2020-03-29 20:14:58,344 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:58,344 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:58,344 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:58,344 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,344 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:58,344 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:58,344 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:58,344 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:58,344 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:58,344 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:58,349 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:58,349 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:58,349 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:58,349 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:58,349 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:58,349 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:58,349 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:58,349 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:58,349 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:58,349 TRACE [want] signal: Want
2020-03-29 20:14:58,349 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:58,349 TRACE [want] signal: Want
2020-03-29 20:14:58,349 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:58,349 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,349 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,349 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:58,349 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:58,349 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:58,349 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:58,350 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:58,350 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:58,350 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:58,350 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(84))
2020-03-29 20:14:58,350 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:58,350 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(84))
2020-03-29 20:14:58,350 TRACE [want] signal: Closed
2020-03-29 20:14:58,350 TRACE [reqwest::blocking::client] (ThreadId(84)) Receiver is shutdown
2020-03-29 20:14:58,350 TRACE [reqwest::blocking::client] (ThreadId(84)) end runtime::block_on
2020-03-29 20:14:58,351 TRACE [reqwest::blocking::client] (ThreadId(84)) finished
2020-03-29 20:14:58,351 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(84))
2020-03-29 20:14:58,351 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:58,351 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:58,351 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,351 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,351 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,537 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,593 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,594 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,594 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,594 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:58,594 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 58, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:58,594 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:58,594 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 58, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:58,595 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:58,595 TRACE [mio::poll] registering with poller
2020-03-29 20:14:58,596 TRACE [reqwest::blocking::client] (ThreadId(85)) start runtime::block_on
2020-03-29 20:14:58,606 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:58,606 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991034s
2020-03-29 20:14:58,607 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,607 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:58,607 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:58,607 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:58,607 TRACE [mio::poll] registering with poller
2020-03-29 20:14:58,607 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:58,607 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:58,607 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:58,607 TRACE [want] signal: Want
2020-03-29 20:14:58,607 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:58,607 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:58,607 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:58,607 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,607 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:58,607 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:58,608 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:58,608 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:58,608 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:58,608 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:58,612 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:58,612 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:58,612 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:58,612 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:58,612 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:58,613 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:58,613 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:58,613 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:58,613 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:58,613 TRACE [want] signal: Want
2020-03-29 20:14:58,613 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:58,613 TRACE [want] signal: Want
2020-03-29 20:14:58,613 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:58,613 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,613 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,613 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:58,613 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:58,613 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:58,613 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:58,613 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:58,613 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:58,613 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(85))
2020-03-29 20:14:58,613 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:58,613 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:58,613 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(85))
2020-03-29 20:14:58,613 TRACE [want] signal: Closed
2020-03-29 20:14:58,614 TRACE [reqwest::blocking::client] (ThreadId(85)) Receiver is shutdown
2020-03-29 20:14:58,614 TRACE [reqwest::blocking::client] (ThreadId(85)) end runtime::block_on
2020-03-29 20:14:58,614 TRACE [reqwest::blocking::client] (ThreadId(85)) finished
2020-03-29 20:14:58,614 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(85))
2020-03-29 20:14:58,614 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:58,614 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:58,615 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,615 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,615 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,635 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,635 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,636 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,793 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,856 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:58,856 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,857 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,857 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:58,857 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 59, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:58,857 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:58,857 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 59, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:58,857 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:58,857 TRACE [mio::poll] registering with poller
2020-03-29 20:14:58,858 TRACE [reqwest::blocking::client] (ThreadId(86)) start runtime::block_on
2020-03-29 20:14:58,869 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:58,869 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991124s
2020-03-29 20:14:58,869 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,869 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:58,869 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:58,869 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:58,870 TRACE [mio::poll] registering with poller
2020-03-29 20:14:58,870 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:58,870 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:58,870 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:58,870 TRACE [want] signal: Want
2020-03-29 20:14:58,870 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:58,870 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:58,870 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:58,871 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,871 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:58,871 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:58,871 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:58,871 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:58,871 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:58,871 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:58,875 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:58,876 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:58,876 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:58,876 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:58,876 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:58,876 TRACE [want] signal: Want
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:58,876 TRACE [want] signal: Want
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:58,876 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,876 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:58,876 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:58,876 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:58,876 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:58,876 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:58,876 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:58,876 TRACE [want] signal: Closed
2020-03-29 20:14:58,876 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(86))
2020-03-29 20:14:58,877 TRACE [reqwest::blocking::client] (ThreadId(86)) Receiver is shutdown
2020-03-29 20:14:58,877 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(86))
2020-03-29 20:14:58,877 TRACE [reqwest::blocking::client] (ThreadId(86)) end runtime::block_on
2020-03-29 20:14:58,877 TRACE [reqwest::blocking::client] (ThreadId(86)) finished
2020-03-29 20:14:58,877 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(86))
2020-03-29 20:14:58,877 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:58,877 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:58,877 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:58,877 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:58,878 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,113 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,120 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,120 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:59,120 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:59,120 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:59,121 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 60, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:59,121 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:59,121 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 60, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:59,121 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:59,121 TRACE [mio::poll] registering with poller
2020-03-29 20:14:59,122 TRACE [reqwest::blocking::client] (ThreadId(87)) start runtime::block_on
2020-03-29 20:14:59,133 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:59,133 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991153s
2020-03-29 20:14:59,133 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,133 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:59,133 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:59,133 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:59,133 TRACE [mio::poll] registering with poller
2020-03-29 20:14:59,134 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:59,134 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:59,134 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:59,134 TRACE [want] signal: Want
2020-03-29 20:14:59,134 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:59,134 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:59,134 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:59,134 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,135 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:59,135 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:59,135 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:59,135 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:59,135 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:59,135 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:59,139 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:59,139 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:59,139 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:59,139 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:59,139 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:59,139 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:59,139 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:59,139 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:59,139 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:59,139 TRACE [want] signal: Want
2020-03-29 20:14:59,139 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:59,139 TRACE [want] signal: Want
2020-03-29 20:14:59,139 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:59,139 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,140 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,140 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:59,140 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:59,140 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:59,140 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:59,140 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:59,140 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:59,140 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:59,140 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:59,140 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(87))
2020-03-29 20:14:59,140 TRACE [want] signal: Closed
2020-03-29 20:14:59,140 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(87))
2020-03-29 20:14:59,140 TRACE [reqwest::blocking::client] (ThreadId(87)) Receiver is shutdown
2020-03-29 20:14:59,141 TRACE [reqwest::blocking::client] (ThreadId(87)) end runtime::block_on
2020-03-29 20:14:59,141 TRACE [reqwest::blocking::client] (ThreadId(87)) finished
2020-03-29 20:14:59,141 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(87))
2020-03-29 20:14:59,141 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:59,141 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:59,141 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:59,141 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:59,141 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,369 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,382 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,382 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:59,383 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:59,383 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:59,383 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 61, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:59,383 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:59,383 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 61, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:59,383 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:59,383 TRACE [mio::poll] registering with poller
2020-03-29 20:14:59,384 TRACE [reqwest::blocking::client] (ThreadId(88)) start runtime::block_on
2020-03-29 20:14:59,395 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:59,395 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992105s
2020-03-29 20:14:59,395 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,395 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:59,395 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:59,395 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:59,395 TRACE [mio::poll] registering with poller
2020-03-29 20:14:59,395 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:59,395 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:59,395 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:59,395 TRACE [want] signal: Want
2020-03-29 20:14:59,395 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:59,395 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:59,395 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:59,395 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,396 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:59,396 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:59,396 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:59,396 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:59,396 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:59,396 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:59,401 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:59,401 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:59,401 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:59,401 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:59,401 TRACE [want] signal: Want
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:59,401 TRACE [want] signal: Want
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:59,401 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,401 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,401 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:59,401 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:59,401 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:59,401 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(88))
2020-03-29 20:14:59,401 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:59,401 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:59,401 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(88))
2020-03-29 20:14:59,402 TRACE [want] signal: Closed
2020-03-29 20:14:59,402 TRACE [reqwest::blocking::client] (ThreadId(88)) Receiver is shutdown
2020-03-29 20:14:59,402 TRACE [reqwest::blocking::client] (ThreadId(88)) end runtime::block_on
2020-03-29 20:14:59,402 TRACE [reqwest::blocking::client] (ThreadId(88)) finished
2020-03-29 20:14:59,402 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(88))
2020-03-29 20:14:59,402 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:59,403 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:59,403 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:59,403 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:59,403 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,626 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,645 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,646 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:59,646 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:59,646 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:59,646 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 62, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:59,646 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:59,646 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 62, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:59,646 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:59,647 TRACE [mio::poll] registering with poller
2020-03-29 20:14:59,647 TRACE [reqwest::blocking::client] (ThreadId(89)) start runtime::block_on
2020-03-29 20:14:59,658 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:59,658 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990833s
2020-03-29 20:14:59,658 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,660 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:59,660 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:59,660 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:59,661 TRACE [mio::poll] registering with poller
2020-03-29 20:14:59,661 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:59,661 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:59,661 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:59,661 TRACE [want] signal: Want
2020-03-29 20:14:59,661 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:59,661 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:59,661 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:59,661 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,661 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:59,661 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:59,661 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:59,661 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:59,661 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:59,661 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:59,665 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:59,666 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:59,666 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:59,666 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:59,666 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:14:59,666 TRACE [want] signal: Want
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:59,666 TRACE [want] signal: Want
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:14:59,666 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,666 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,666 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:59,666 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:14:59,666 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:14:59,666 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:59,666 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:59,666 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(89))
2020-03-29 20:14:59,667 TRACE [want] signal: Closed
2020-03-29 20:14:59,667 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(89))
2020-03-29 20:14:59,667 TRACE [reqwest::blocking::client] (ThreadId(89)) Receiver is shutdown
2020-03-29 20:14:59,667 TRACE [reqwest::blocking::client] (ThreadId(89)) end runtime::block_on
2020-03-29 20:14:59,667 TRACE [reqwest::blocking::client] (ThreadId(89)) finished
2020-03-29 20:14:59,667 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(89))
2020-03-29 20:14:59,667 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:59,668 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:59,668 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:59,668 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:59,668 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,881 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,908 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:14:59,908 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:59,908 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:59,908 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:14:59,908 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 63, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:59,908 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:59,909 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 63, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:14:59,909 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:14:59,909 TRACE [mio::poll] registering with poller
2020-03-29 20:14:59,910 TRACE [reqwest::blocking::client] (ThreadId(90)) start runtime::block_on
2020-03-29 20:14:59,920 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:59,921 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992456s
2020-03-29 20:14:59,921 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,921 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:14:59,921 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:14:59,921 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:14:59,921 TRACE [mio::poll] registering with poller
2020-03-29 20:14:59,922 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:14:59,922 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:14:59,922 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:14:59,922 TRACE [want] signal: Want
2020-03-29 20:14:59,922 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:14:59,922 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:14:59,922 TRACE [want] poll_want: taker wants!
2020-03-29 20:14:59,922 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:14:59,923 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:14:59,923 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:14:59,923 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:14:59,923 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:14:59,923 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:14:59,923 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:14:59,927 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:14:59,928 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:14:59,928 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:14:59,928 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:14:59,928 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:14:59,928 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:14:59,928 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:14:59,928 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:14:59,928 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:14:59,928 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:14:59,928 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:14:59,928 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:14:59,928 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:14:59,929 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:14:59,929 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:14:59,929 TRACE [want] signal: Closed
2020-03-29 20:14:59,929 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:14:59,929 TRACE [want] poll_want: closed
2020-03-29 20:14:59,929 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:14:59,929 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(90))
2020-03-29 20:14:59,929 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(90))
2020-03-29 20:14:59,929 TRACE [reqwest::blocking::client] (ThreadId(90)) Receiver is shutdown
2020-03-29 20:14:59,931 TRACE [reqwest::blocking::client] (ThreadId(90)) end runtime::block_on
2020-03-29 20:14:59,931 TRACE [reqwest::blocking::client] (ThreadId(90)) finished
2020-03-29 20:14:59,931 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(90))
2020-03-29 20:14:59,931 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:14:59,931 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:14:59,931 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:14:59,931 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:14:59,932 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,137 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,170 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,171 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:00,171 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:00,171 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:00,171 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 64, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:00,171 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:00,171 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 64, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:00,172 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:00,172 TRACE [mio::poll] registering with poller
2020-03-29 20:15:00,172 TRACE [reqwest::blocking::client] (ThreadId(91)) start runtime::block_on
2020-03-29 20:15:00,183 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:00,183 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991224s
2020-03-29 20:15:00,183 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,183 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:00,184 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:00,184 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:00,184 TRACE [mio::poll] registering with poller
2020-03-29 20:15:00,184 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:00,184 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:00,184 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:00,184 TRACE [want] signal: Want
2020-03-29 20:15:00,184 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:00,185 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:00,185 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:00,185 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,185 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:00,185 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:00,185 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:00,185 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:00,185 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:00,185 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:00,190 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:00,190 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:00,190 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:00,190 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:00,190 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:00,190 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:00,190 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:00,190 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:00,191 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:00,191 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:00,191 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:00,191 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:00,191 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:00,191 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:00,191 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:00,191 TRACE [want] signal: Closed
2020-03-29 20:15:00,191 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:00,191 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:00,191 TRACE [want] poll_want: closed
2020-03-29 20:15:00,191 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999984962s
2020-03-29 20:15:00,192 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(91))
2020-03-29 20:15:00,192 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(91))
2020-03-29 20:15:00,192 TRACE [reqwest::blocking::client] (ThreadId(91)) Receiver is shutdown
2020-03-29 20:15:00,193 TRACE [reqwest::blocking::client] (ThreadId(91)) end runtime::block_on
2020-03-29 20:15:00,193 TRACE [reqwest::blocking::client] (ThreadId(91)) finished
2020-03-29 20:15:00,193 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(91))
2020-03-29 20:15:00,193 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:00,193 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:00,193 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:00,193 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:00,193 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,393 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,433 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,434 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:00,434 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:00,434 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:00,434 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 65, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:00,434 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:00,434 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 65, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:00,435 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:00,435 TRACE [mio::poll] registering with poller
2020-03-29 20:15:00,436 TRACE [reqwest::blocking::client] (ThreadId(92)) start runtime::block_on
2020-03-29 20:15:00,446 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:00,446 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991043s
2020-03-29 20:15:00,446 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,447 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:00,447 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:00,447 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:00,447 TRACE [mio::poll] registering with poller
2020-03-29 20:15:00,447 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:00,447 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:00,447 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:00,447 TRACE [want] signal: Want
2020-03-29 20:15:00,447 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:00,447 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:00,447 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:00,447 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,448 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:00,448 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:00,448 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:00,448 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:00,448 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:00,448 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:00,452 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:00,452 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:00,452 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:00,452 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:00,453 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:00,453 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:00,453 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:00,453 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:00,453 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:00,453 TRACE [want] signal: Want
2020-03-29 20:15:00,453 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:00,453 TRACE [want] signal: Want
2020-03-29 20:15:00,453 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:00,453 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,453 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,453 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:00,453 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:00,453 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:00,453 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:00,453 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:00,453 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:00,453 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(92))
2020-03-29 20:15:00,453 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:00,453 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:00,453 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(92))
2020-03-29 20:15:00,453 TRACE [want] signal: Closed
2020-03-29 20:15:00,454 TRACE [reqwest::blocking::client] (ThreadId(92)) Receiver is shutdown
2020-03-29 20:15:00,454 TRACE [reqwest::blocking::client] (ThreadId(92)) end runtime::block_on
2020-03-29 20:15:00,454 TRACE [reqwest::blocking::client] (ThreadId(92)) finished
2020-03-29 20:15:00,454 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(92))
2020-03-29 20:15:00,454 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:00,454 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:00,455 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:00,455 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:00,455 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,650 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,696 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,697 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:00,697 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:00,697 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:00,697 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 66, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:00,697 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:00,697 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 66, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:00,697 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:00,697 TRACE [mio::poll] registering with poller
2020-03-29 20:15:00,698 TRACE [reqwest::blocking::client] (ThreadId(93)) start runtime::block_on
2020-03-29 20:15:00,707 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:00,707 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999994219s
2020-03-29 20:15:00,707 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,707 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:00,707 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:00,708 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:00,708 TRACE [mio::poll] registering with poller
2020-03-29 20:15:00,708 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:00,708 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:00,708 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:00,708 TRACE [want] signal: Want
2020-03-29 20:15:00,709 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:00,709 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:00,709 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:00,709 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,709 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:00,709 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:00,709 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:00,710 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:00,710 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:00,710 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:00,715 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:00,715 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:00,715 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:00,715 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:00,716 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:00,716 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:00,716 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:00,716 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:00,716 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:00,716 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:00,716 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:00,716 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:00,716 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:00,717 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:00,717 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:00,717 TRACE [want] signal: Closed
2020-03-29 20:15:00,717 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:00,717 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:00,717 TRACE [want] poll_want: closed
2020-03-29 20:15:00,717 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999979281s
2020-03-29 20:15:00,717 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(93))
2020-03-29 20:15:00,717 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(93))
2020-03-29 20:15:00,717 TRACE [reqwest::blocking::client] (ThreadId(93)) Receiver is shutdown
2020-03-29 20:15:00,718 TRACE [reqwest::blocking::client] (ThreadId(93)) end runtime::block_on
2020-03-29 20:15:00,718 TRACE [reqwest::blocking::client] (ThreadId(93)) finished
2020-03-29 20:15:00,718 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(93))
2020-03-29 20:15:00,718 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:00,718 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:00,719 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:00,719 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:00,719 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,905 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,959 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:00,960 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:00,960 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:00,960 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:00,960 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 67, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:00,960 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:00,960 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 67, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:00,961 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:00,961 TRACE [mio::poll] registering with poller
2020-03-29 20:15:00,961 TRACE [reqwest::blocking::client] (ThreadId(94)) start runtime::block_on
2020-03-29 20:15:00,972 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:00,972 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990973s
2020-03-29 20:15:00,972 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,972 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:00,972 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:00,973 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:00,973 TRACE [mio::poll] registering with poller
2020-03-29 20:15:00,973 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:00,973 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:00,973 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:00,973 TRACE [want] signal: Want
2020-03-29 20:15:00,973 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:00,973 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:00,974 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:00,974 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,974 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:00,974 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:00,974 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:00,974 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:00,974 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:00,974 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:00,978 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:00,979 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:00,979 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:00,979 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:00,979 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:00,979 TRACE [want] signal: Want
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:00,979 TRACE [want] signal: Want
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:00,979 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,979 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:00,979 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:00,979 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:00,979 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:00,979 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(94))
2020-03-29 20:15:00,979 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:00,979 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:00,979 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(94))
2020-03-29 20:15:00,980 TRACE [want] signal: Closed
2020-03-29 20:15:00,980 TRACE [reqwest::blocking::client] (ThreadId(94)) Receiver is shutdown
2020-03-29 20:15:00,980 TRACE [reqwest::blocking::client] (ThreadId(94)) end runtime::block_on
2020-03-29 20:15:00,980 TRACE [reqwest::blocking::client] (ThreadId(94)) finished
2020-03-29 20:15:00,980 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(94))
2020-03-29 20:15:00,980 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:00,980 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:00,981 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:00,981 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:00,981 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,161 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,222 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,222 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:01,222 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:01,222 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:01,222 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 68, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:01,222 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:01,222 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 68, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:01,223 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:01,223 TRACE [mio::poll] registering with poller
2020-03-29 20:15:01,224 TRACE [reqwest::blocking::client] (ThreadId(95)) start runtime::block_on
2020-03-29 20:15:01,234 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:01,234 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990933s
2020-03-29 20:15:01,234 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,235 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:01,235 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:01,235 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:01,235 TRACE [mio::poll] registering with poller
2020-03-29 20:15:01,235 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:01,235 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:01,235 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:01,235 TRACE [want] signal: Want
2020-03-29 20:15:01,235 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:01,235 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:01,235 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:01,235 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,235 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:01,235 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:01,235 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:01,235 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:01,235 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:01,236 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:01,240 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:01,240 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:01,240 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:01,240 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:01,240 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:01,240 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:01,240 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:01,240 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:01,240 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:01,240 TRACE [want] signal: Want
2020-03-29 20:15:01,240 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:01,240 TRACE [want] signal: Want
2020-03-29 20:15:01,241 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:01,241 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,241 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,241 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:01,241 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:01,241 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(95))
2020-03-29 20:15:01,241 TRACE [want] signal: Want
2020-03-29 20:15:01,241 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(95))
2020-03-29 20:15:01,241 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:01,241 TRACE [reqwest::blocking::client] (ThreadId(95)) Receiver is shutdown
2020-03-29 20:15:01,242 TRACE [reqwest::blocking::client] (ThreadId(95)) end runtime::block_on
2020-03-29 20:15:01,242 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:01,242 TRACE [want] signal: Closed
2020-03-29 20:15:01,242 TRACE [reqwest::blocking::client] (ThreadId(95)) finished
2020-03-29 20:15:01,242 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(95))
2020-03-29 20:15:01,242 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:01,242 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:01,242 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:01,242 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:01,242 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,481 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,484 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,484 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:01,484 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:01,484 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:01,484 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 69, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:01,484 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:01,484 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 69, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:01,485 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:01,485 TRACE [mio::poll] registering with poller
2020-03-29 20:15:01,486 TRACE [reqwest::blocking::client] (ThreadId(96)) start runtime::block_on
2020-03-29 20:15:01,495 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:01,495 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,495 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991464s
2020-03-29 20:15:01,495 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:01,495 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:01,496 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:01,496 TRACE [mio::poll] registering with poller
2020-03-29 20:15:01,496 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:01,496 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:01,496 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:01,496 TRACE [want] signal: Want
2020-03-29 20:15:01,496 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:01,496 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:01,496 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:01,496 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,496 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:01,496 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:01,496 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:01,496 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:01,496 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:01,496 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:01,501 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:01,501 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:01,501 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:01,501 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:01,501 TRACE [want] signal: Want
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:01,501 TRACE [want] signal: Want
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:01,501 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,501 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,501 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:01,501 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:01,501 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:01,501 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(96))
2020-03-29 20:15:01,501 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:01,502 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(96))
2020-03-29 20:15:01,502 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:01,502 TRACE [want] signal: Closed
2020-03-29 20:15:01,502 TRACE [reqwest::blocking::client] (ThreadId(96)) Receiver is shutdown
2020-03-29 20:15:01,502 TRACE [reqwest::blocking::client] (ThreadId(96)) end runtime::block_on
2020-03-29 20:15:01,502 TRACE [reqwest::blocking::client] (ThreadId(96)) finished
2020-03-29 20:15:01,503 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(96))
2020-03-29 20:15:01,503 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:01,503 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:01,503 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:01,503 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:01,503 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,738 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,746 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,746 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:01,746 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:01,746 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:01,747 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 70, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:01,747 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:01,747 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 70, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:01,747 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:01,747 TRACE [mio::poll] registering with poller
2020-03-29 20:15:01,748 TRACE [reqwest::blocking::client] (ThreadId(97)) start runtime::block_on
2020-03-29 20:15:01,759 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:01,759 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991143s
2020-03-29 20:15:01,759 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,759 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:01,759 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:01,759 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:01,760 TRACE [mio::poll] registering with poller
2020-03-29 20:15:01,760 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:01,760 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:01,760 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:01,760 TRACE [want] signal: Want
2020-03-29 20:15:01,760 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:01,760 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:01,760 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:01,760 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,760 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:01,760 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:01,760 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:01,760 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:01,760 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:01,760 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:01,765 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:01,765 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:01,765 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:01,765 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:01,765 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:01,765 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:01,765 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:01,765 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:01,765 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:01,765 TRACE [want] signal: Want
2020-03-29 20:15:01,765 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:01,765 TRACE [want] signal: Want
2020-03-29 20:15:01,765 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:01,765 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,765 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:01,765 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:01,765 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:01,765 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:01,766 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:01,766 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:01,766 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:01,766 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(97))
2020-03-29 20:15:01,766 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:01,766 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(97))
2020-03-29 20:15:01,766 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:01,766 TRACE [want] signal: Closed
2020-03-29 20:15:01,766 TRACE [reqwest::blocking::client] (ThreadId(97)) Receiver is shutdown
2020-03-29 20:15:01,766 TRACE [reqwest::blocking::client] (ThreadId(97)) end runtime::block_on
2020-03-29 20:15:01,766 TRACE [reqwest::blocking::client] (ThreadId(97)) finished
2020-03-29 20:15:01,767 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(97))
2020-03-29 20:15:01,767 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:01,767 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:01,767 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:01,767 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:01,767 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:01,994 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,008 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,009 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:02,009 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:02,009 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:02,009 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 71, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:02,009 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:02,009 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 71, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:02,010 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:02,010 TRACE [mio::poll] registering with poller
2020-03-29 20:15:02,010 TRACE [reqwest::blocking::client] (ThreadId(98)) start runtime::block_on
2020-03-29 20:15:02,021 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:02,021 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990883s
2020-03-29 20:15:02,021 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,021 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:02,022 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:02,022 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:02,022 TRACE [mio::poll] registering with poller
2020-03-29 20:15:02,022 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:02,022 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:02,022 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:02,022 TRACE [want] signal: Want
2020-03-29 20:15:02,022 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:02,022 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:02,022 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:02,022 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,022 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:02,023 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:02,023 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:02,023 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:02,023 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:02,023 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:02,027 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:02,027 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:02,027 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:02,027 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:02,027 TRACE [want] signal: Want
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:02,027 TRACE [want] signal: Want
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:02,027 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,027 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,027 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:02,027 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:02,027 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:02,027 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:02,028 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:02,028 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:02,028 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(98))
2020-03-29 20:15:02,028 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:02,028 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(98))
2020-03-29 20:15:02,028 TRACE [want] signal: Closed
2020-03-29 20:15:02,028 TRACE [reqwest::blocking::client] (ThreadId(98)) Receiver is shutdown
2020-03-29 20:15:02,028 TRACE [reqwest::blocking::client] (ThreadId(98)) end runtime::block_on
2020-03-29 20:15:02,028 TRACE [reqwest::blocking::client] (ThreadId(98)) finished
2020-03-29 20:15:02,029 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(98))
2020-03-29 20:15:02,029 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:02,029 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:02,029 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:02,029 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:02,029 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,250 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,271 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,271 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:02,271 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:02,271 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:02,272 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 72, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:02,272 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:02,272 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 72, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:02,272 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:02,272 TRACE [mio::poll] registering with poller
2020-03-29 20:15:02,273 TRACE [reqwest::blocking::client] (ThreadId(99)) start runtime::block_on
2020-03-29 20:15:02,281 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:02,281 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999986755s
2020-03-29 20:15:02,281 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,281 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:02,281 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:02,281 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:02,282 TRACE [mio::poll] registering with poller
2020-03-29 20:15:02,282 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:02,282 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:02,282 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:02,282 TRACE [want] signal: Want
2020-03-29 20:15:02,282 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:02,282 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:02,282 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:02,282 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,282 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:02,282 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:02,282 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:02,282 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:02,283 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:02,283 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:02,288 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:02,288 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:02,288 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:02,288 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:02,288 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:02,288 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:02,288 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:02,288 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:02,288 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:02,288 TRACE [want] signal: Want
2020-03-29 20:15:02,288 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:02,289 TRACE [want] signal: Want
2020-03-29 20:15:02,289 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:02,289 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,289 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,289 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:02,289 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:02,289 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:02,289 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:02,289 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:02,289 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:02,289 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(99))
2020-03-29 20:15:02,289 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:02,289 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(99))
2020-03-29 20:15:02,289 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:02,289 TRACE [want] signal: Closed
2020-03-29 20:15:02,289 TRACE [reqwest::blocking::client] (ThreadId(99)) Receiver is shutdown
2020-03-29 20:15:02,290 TRACE [reqwest::blocking::client] (ThreadId(99)) end runtime::block_on
2020-03-29 20:15:02,290 TRACE [reqwest::blocking::client] (ThreadId(99)) finished
2020-03-29 20:15:02,290 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(99))
2020-03-29 20:15:02,290 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:02,290 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:02,291 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:02,291 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:02,291 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,505 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,533 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,533 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:02,533 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:02,533 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:02,533 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 73, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:02,534 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:02,534 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 73, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:02,534 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:02,534 TRACE [mio::poll] registering with poller
2020-03-29 20:15:02,535 TRACE [reqwest::blocking::client] (ThreadId(100)) start runtime::block_on
2020-03-29 20:15:02,546 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:02,546 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991064s
2020-03-29 20:15:02,546 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,546 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:02,546 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:02,546 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:02,547 TRACE [mio::poll] registering with poller
2020-03-29 20:15:02,547 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:02,547 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:02,547 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:02,547 TRACE [want] signal: Want
2020-03-29 20:15:02,547 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:02,547 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:02,547 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:02,547 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,548 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:02,548 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:02,548 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:02,548 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:02,548 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:02,548 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:02,552 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:02,552 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:02,552 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:02,552 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:02,552 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:02,553 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:02,553 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:02,553 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:02,553 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:02,553 TRACE [want] signal: Want
2020-03-29 20:15:02,553 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:02,553 TRACE [want] signal: Want
2020-03-29 20:15:02,553 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:02,553 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,553 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,553 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:02,553 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:02,553 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:02,553 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:02,553 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:02,553 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:02,553 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:02,553 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(100))
2020-03-29 20:15:02,553 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:02,553 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(100))
2020-03-29 20:15:02,553 TRACE [want] signal: Closed
2020-03-29 20:15:02,553 TRACE [reqwest::blocking::client] (ThreadId(100)) Receiver is shutdown
2020-03-29 20:15:02,554 TRACE [reqwest::blocking::client] (ThreadId(100)) end runtime::block_on
2020-03-29 20:15:02,554 TRACE [reqwest::blocking::client] (ThreadId(100)) finished
2020-03-29 20:15:02,554 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(100))
2020-03-29 20:15:02,554 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:02,554 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:02,554 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:02,555 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:02,555 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,761 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,795 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:02,796 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:02,796 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:02,796 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:02,796 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 74, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:02,796 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:02,796 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 74, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:02,797 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:02,797 TRACE [mio::poll] registering with poller
2020-03-29 20:15:02,798 TRACE [reqwest::blocking::client] (ThreadId(101)) start runtime::block_on
2020-03-29 20:15:02,808 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:02,808 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991024s
2020-03-29 20:15:02,808 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,809 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:02,809 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:02,809 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:02,809 TRACE [mio::poll] registering with poller
2020-03-29 20:15:02,809 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:02,809 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:02,809 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:02,810 TRACE [want] signal: Want
2020-03-29 20:15:02,810 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:02,810 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:02,810 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:02,810 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,810 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:02,810 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:02,810 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:02,811 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:02,811 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:02,811 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:02,815 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:02,815 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:02,815 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:02,815 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:02,815 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:02,815 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:02,815 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:02,815 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:02,815 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:02,815 TRACE [want] signal: Want
2020-03-29 20:15:02,815 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:02,815 TRACE [want] signal: Want
2020-03-29 20:15:02,815 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:02,815 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,815 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:02,815 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:02,815 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:02,815 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:02,815 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:02,816 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:02,816 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:02,816 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:02,816 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(101))
2020-03-29 20:15:02,816 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:02,816 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(101))
2020-03-29 20:15:02,816 TRACE [want] signal: Closed
2020-03-29 20:15:02,816 TRACE [reqwest::blocking::client] (ThreadId(101)) Receiver is shutdown
2020-03-29 20:15:02,816 TRACE [reqwest::blocking::client] (ThreadId(101)) end runtime::block_on
2020-03-29 20:15:02,816 TRACE [reqwest::blocking::client] (ThreadId(101)) finished
2020-03-29 20:15:02,817 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(101))
2020-03-29 20:15:02,817 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:02,817 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:02,817 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:02,817 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:02,817 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,018 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,058 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,058 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,058 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,059 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:03,059 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 75, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:03,059 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:03,059 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 75, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:03,059 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:03,059 TRACE [mio::poll] registering with poller
2020-03-29 20:15:03,060 TRACE [reqwest::blocking::client] (ThreadId(102)) start runtime::block_on
2020-03-29 20:15:03,070 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:03,071 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991724s
2020-03-29 20:15:03,071 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,071 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:03,071 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:03,071 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:03,071 TRACE [mio::poll] registering with poller
2020-03-29 20:15:03,071 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:03,071 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:03,071 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:03,071 TRACE [want] signal: Want
2020-03-29 20:15:03,071 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:03,071 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:03,072 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:03,072 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,072 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:03,072 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:03,072 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:03,072 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:03,072 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:03,072 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:03,076 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:03,076 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:03,077 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:03,077 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:03,077 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:03,077 TRACE [want] signal: Want
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:03,077 TRACE [want] signal: Want
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:03,077 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,077 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,077 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:03,077 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:03,077 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:03,077 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(102))
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:03,077 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(102))
2020-03-29 20:15:03,077 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:03,077 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:03,077 TRACE [want] signal: Closed
2020-03-29 20:15:03,078 TRACE [reqwest::blocking::client] (ThreadId(102)) Receiver is shutdown
2020-03-29 20:15:03,078 TRACE [reqwest::blocking::client] (ThreadId(102)) end runtime::block_on
2020-03-29 20:15:03,078 TRACE [reqwest::blocking::client] (ThreadId(102)) finished
2020-03-29 20:15:03,078 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(102))
2020-03-29 20:15:03,078 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:03,078 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:03,079 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,079 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,079 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,209 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,273 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,320 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,320 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,320 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,320 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:03,320 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 76, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:03,320 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:03,320 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 76, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:03,321 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:03,321 TRACE [mio::poll] registering with poller
2020-03-29 20:15:03,322 TRACE [reqwest::blocking::client] (ThreadId(103)) start runtime::block_on
2020-03-29 20:15:03,331 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:03,331 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,331 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991153s
2020-03-29 20:15:03,331 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:03,331 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:03,331 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:03,331 TRACE [mio::poll] registering with poller
2020-03-29 20:15:03,331 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:03,331 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:03,331 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:03,332 TRACE [want] signal: Want
2020-03-29 20:15:03,332 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:03,332 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:03,332 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:03,332 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,332 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:03,332 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:03,332 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:03,332 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:03,332 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:03,332 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:03,336 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:03,336 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:03,337 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:03,337 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:03,337 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:03,337 TRACE [want] signal: Want
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:03,337 TRACE [want] signal: Want
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:03,337 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,337 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,337 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:03,337 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:03,337 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:03,337 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(103))
2020-03-29 20:15:03,337 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:03,338 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:03,338 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(103))
2020-03-29 20:15:03,338 TRACE [want] signal: Closed
2020-03-29 20:15:03,338 TRACE [reqwest::blocking::client] (ThreadId(103)) Receiver is shutdown
2020-03-29 20:15:03,338 TRACE [reqwest::blocking::client] (ThreadId(103)) end runtime::block_on
2020-03-29 20:15:03,338 TRACE [reqwest::blocking::client] (ThreadId(103)) finished
2020-03-29 20:15:03,338 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(103))
2020-03-29 20:15:03,338 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:03,339 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:03,339 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,339 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,339 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,529 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,582 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,582 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,582 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,582 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:03,582 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 77, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:03,582 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:03,583 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 77, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:03,583 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:03,583 TRACE [mio::poll] registering with poller
2020-03-29 20:15:03,584 TRACE [reqwest::blocking::client] (ThreadId(104)) start runtime::block_on
2020-03-29 20:15:03,594 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:03,594 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991995s
2020-03-29 20:15:03,594 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,594 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:03,595 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:03,595 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:03,595 TRACE [mio::poll] registering with poller
2020-03-29 20:15:03,595 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:03,595 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:03,595 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:03,595 TRACE [want] signal: Want
2020-03-29 20:15:03,595 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:03,595 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:03,595 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:03,595 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,595 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:03,596 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:03,596 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:03,596 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:03,596 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:03,596 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:03,600 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:03,600 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:03,600 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:03,600 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:03,600 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:03,600 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:03,600 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:03,600 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:03,600 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:03,600 TRACE [want] signal: Want
2020-03-29 20:15:03,600 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:03,600 TRACE [want] signal: Want
2020-03-29 20:15:03,600 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:03,601 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,601 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,601 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:03,601 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:03,601 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:03,601 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:03,601 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:03,601 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:03,601 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:03,601 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:03,601 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(104))
2020-03-29 20:15:03,601 TRACE [want] signal: Closed
2020-03-29 20:15:03,601 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(104))
2020-03-29 20:15:03,601 TRACE [reqwest::blocking::client] (ThreadId(104)) Receiver is shutdown
2020-03-29 20:15:03,602 TRACE [reqwest::blocking::client] (ThreadId(104)) end runtime::block_on
2020-03-29 20:15:03,602 TRACE [reqwest::blocking::client] (ThreadId(104)) finished
2020-03-29 20:15:03,602 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(104))
2020-03-29 20:15:03,602 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:03,602 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:03,602 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,602 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,602 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,635 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,635 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,786 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,844 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:03,844 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,844 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,845 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:03,845 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 78, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:03,845 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:03,845 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 78, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:03,845 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:03,846 TRACE [mio::poll] registering with poller
2020-03-29 20:15:03,846 TRACE [reqwest::blocking::client] (ThreadId(105)) start runtime::block_on
2020-03-29 20:15:03,857 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:03,857 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990963s
2020-03-29 20:15:03,857 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,858 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:03,858 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:03,858 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:03,858 TRACE [mio::poll] registering with poller
2020-03-29 20:15:03,858 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:03,858 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:03,858 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:03,859 TRACE [want] signal: Want
2020-03-29 20:15:03,859 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:03,859 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:03,859 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:03,859 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,859 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:03,859 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:03,859 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:03,860 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:03,860 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:03,860 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:03,864 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:03,864 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:03,864 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:03,864 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:03,864 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:03,864 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:03,864 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:03,864 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:03,864 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:03,864 TRACE [want] signal: Want
2020-03-29 20:15:03,864 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:03,864 TRACE [want] signal: Want
2020-03-29 20:15:03,864 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:03,864 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,864 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:03,864 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:03,865 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:03,865 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:03,865 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:03,865 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:03,865 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:03,865 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:03,865 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:03,865 TRACE [want] signal: Closed
2020-03-29 20:15:03,865 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(105))
2020-03-29 20:15:03,865 TRACE [reqwest::blocking::client] (ThreadId(105)) Receiver is shutdown
2020-03-29 20:15:03,865 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(105))
2020-03-29 20:15:03,865 TRACE [reqwest::blocking::client] (ThreadId(105)) end runtime::block_on
2020-03-29 20:15:03,866 TRACE [reqwest::blocking::client] (ThreadId(105)) finished
2020-03-29 20:15:03,866 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(105))
2020-03-29 20:15:03,866 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:03,866 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:03,866 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:03,866 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:03,866 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,105 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,106 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,106 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:04,107 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:04,107 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:04,107 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 79, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:04,107 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:04,107 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 79, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:04,107 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:04,107 TRACE [mio::poll] registering with poller
2020-03-29 20:15:04,108 TRACE [reqwest::blocking::client] (ThreadId(106)) start runtime::block_on
2020-03-29 20:15:04,119 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:04,119 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991935s
2020-03-29 20:15:04,119 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,119 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:04,119 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:04,119 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:04,119 TRACE [mio::poll] registering with poller
2020-03-29 20:15:04,119 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:04,119 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:04,119 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:04,119 TRACE [want] signal: Want
2020-03-29 20:15:04,119 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:04,119 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:04,120 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:04,120 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,120 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:04,120 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:04,120 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:04,120 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:04,120 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:04,120 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:04,124 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:04,124 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:04,124 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:04,124 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:04,124 TRACE [want] signal: Want
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:04,124 TRACE [want] signal: Want
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:04,124 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,124 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,124 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:04,124 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:04,124 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:04,125 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:04,125 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:04,125 TRACE [want] signal: Closed
2020-03-29 20:15:04,125 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:04,125 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(106))
2020-03-29 20:15:04,125 TRACE [reqwest::blocking::client] (ThreadId(106)) Receiver is shutdown
2020-03-29 20:15:04,125 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(106))
2020-03-29 20:15:04,125 TRACE [reqwest::blocking::client] (ThreadId(106)) end runtime::block_on
2020-03-29 20:15:04,126 TRACE [reqwest::blocking::client] (ThreadId(106)) finished
2020-03-29 20:15:04,126 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(106))
2020-03-29 20:15:04,126 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:04,126 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:04,126 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:04,126 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:04,126 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,362 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,368 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,368 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:04,368 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:04,368 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:04,369 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 80, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:04,369 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:04,369 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 80, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:04,369 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:04,369 TRACE [mio::poll] registering with poller
2020-03-29 20:15:04,370 TRACE [reqwest::blocking::client] (ThreadId(107)) start runtime::block_on
2020-03-29 20:15:04,381 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:04,381 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991334s
2020-03-29 20:15:04,381 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,381 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:04,381 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:04,381 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:04,382 TRACE [mio::poll] registering with poller
2020-03-29 20:15:04,382 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:04,382 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:04,382 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:04,382 TRACE [want] signal: Want
2020-03-29 20:15:04,382 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:04,382 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:04,382 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:04,383 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,383 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:04,383 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:04,383 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:04,383 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:04,383 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:04,383 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:04,387 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:04,387 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:04,387 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:04,388 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:04,388 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:04,388 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:04,388 TRACE [want] signal: Want
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:04,388 TRACE [want] signal: Want
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:04,388 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,388 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,388 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:04,388 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:04,388 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:04,388 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:04,388 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:04,388 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(107))
2020-03-29 20:15:04,388 TRACE [want] signal: Closed
2020-03-29 20:15:04,388 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(107))
2020-03-29 20:15:04,388 TRACE [reqwest::blocking::client] (ThreadId(107)) Receiver is shutdown
2020-03-29 20:15:04,389 TRACE [reqwest::blocking::client] (ThreadId(107)) end runtime::block_on
2020-03-29 20:15:04,389 TRACE [reqwest::blocking::client] (ThreadId(107)) finished
2020-03-29 20:15:04,389 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(107))
2020-03-29 20:15:04,389 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:04,389 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:04,390 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:04,390 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:04,390 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,617 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,630 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,630 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:04,630 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:04,630 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:04,630 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 81, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:04,630 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:04,631 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 81, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:04,631 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:04,631 TRACE [mio::poll] registering with poller
2020-03-29 20:15:04,632 TRACE [reqwest::blocking::client] (ThreadId(108)) start runtime::block_on
2020-03-29 20:15:04,642 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:04,643 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990993s
2020-03-29 20:15:04,643 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,643 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:04,643 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:04,643 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:04,643 TRACE [mio::poll] registering with poller
2020-03-29 20:15:04,643 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:04,643 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:04,643 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:04,643 TRACE [want] signal: Want
2020-03-29 20:15:04,643 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:04,643 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:04,643 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:04,644 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,644 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:04,644 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:04,644 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:04,644 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:04,644 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:04,644 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:04,648 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:04,648 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:04,648 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:04,648 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:04,649 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:04,649 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:04,649 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:04,649 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:04,649 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:04,649 TRACE [want] signal: Want
2020-03-29 20:15:04,649 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:04,649 TRACE [want] signal: Want
2020-03-29 20:15:04,649 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:04,649 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,649 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,649 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:04,649 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:04,649 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:04,649 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:04,649 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:04,649 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:04,649 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(108))
2020-03-29 20:15:04,649 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:04,649 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:04,649 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(108))
2020-03-29 20:15:04,649 TRACE [want] signal: Closed
2020-03-29 20:15:04,650 TRACE [reqwest::blocking::client] (ThreadId(108)) Receiver is shutdown
2020-03-29 20:15:04,650 TRACE [reqwest::blocking::client] (ThreadId(108)) end runtime::block_on
2020-03-29 20:15:04,650 TRACE [reqwest::blocking::client] (ThreadId(108)) finished
2020-03-29 20:15:04,650 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(108))
2020-03-29 20:15:04,650 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:04,650 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:04,651 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:04,651 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:04,651 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,873 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,892 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:04,892 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:04,892 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:04,892 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:04,893 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 82, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:04,893 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:04,893 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 82, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:04,893 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:04,893 TRACE [mio::poll] registering with poller
2020-03-29 20:15:04,894 TRACE [reqwest::blocking::client] (ThreadId(109)) start runtime::block_on
2020-03-29 20:15:04,905 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:04,905 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999979081s
2020-03-29 20:15:04,905 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,905 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:04,905 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:04,905 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:04,906 TRACE [mio::poll] registering with poller
2020-03-29 20:15:04,906 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:04,906 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:04,906 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:04,906 TRACE [want] signal: Want
2020-03-29 20:15:04,906 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:04,906 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:04,906 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:04,907 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,907 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:04,907 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:04,907 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:04,907 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:04,907 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:04,907 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:04,911 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:04,911 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:04,911 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:04,912 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:04,912 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:04,912 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:04,912 TRACE [want] signal: Want
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:04,912 TRACE [want] signal: Want
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:04,912 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,912 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:04,912 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:04,912 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:04,912 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:04,912 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:04,912 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:04,912 TRACE [want] signal: Closed
2020-03-29 20:15:04,912 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(109))
2020-03-29 20:15:04,912 TRACE [reqwest::blocking::client] (ThreadId(109)) Receiver is shutdown
2020-03-29 20:15:04,912 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(109))
2020-03-29 20:15:04,913 TRACE [reqwest::blocking::client] (ThreadId(109)) end runtime::block_on
2020-03-29 20:15:04,913 TRACE [reqwest::blocking::client] (ThreadId(109)) finished
2020-03-29 20:15:04,913 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(109))
2020-03-29 20:15:04,913 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:04,913 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:04,914 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:04,914 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:04,914 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,129 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,154 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,154 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:05,154 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:05,154 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:05,155 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 83, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:05,155 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:05,155 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 83, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:05,155 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:05,155 TRACE [mio::poll] registering with poller
2020-03-29 20:15:05,156 TRACE [reqwest::blocking::client] (ThreadId(110)) start runtime::block_on
2020-03-29 20:15:05,166 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:05,167 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992016s
2020-03-29 20:15:05,167 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,167 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:05,167 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:05,167 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:05,167 TRACE [mio::poll] registering with poller
2020-03-29 20:15:05,167 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:05,167 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:05,167 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:05,167 TRACE [want] signal: Want
2020-03-29 20:15:05,167 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:05,167 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:05,168 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:05,168 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,168 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:05,168 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:05,168 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:05,168 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:05,168 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:05,168 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:05,170 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:05,170 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:05,170 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:05,170 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:05,170 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:05,170 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:05,170 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:05,170 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:05,171 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:05,171 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:05,171 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:05,171 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:05,171 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:05,171 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:05,171 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:05,171 TRACE [want] signal: Closed
2020-03-29 20:15:05,171 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:05,171 TRACE [want] poll_want: closed
2020-03-29 20:15:05,171 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:05,171 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(110))
2020-03-29 20:15:05,171 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(110))
2020-03-29 20:15:05,171 TRACE [reqwest::blocking::client] (ThreadId(110)) Receiver is shutdown
2020-03-29 20:15:05,172 TRACE [reqwest::blocking::client] (ThreadId(110)) end runtime::block_on
2020-03-29 20:15:05,172 TRACE [reqwest::blocking::client] (ThreadId(110)) finished
2020-03-29 20:15:05,172 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(110))
2020-03-29 20:15:05,172 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:05,172 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:05,172 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:05,173 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:05,173 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,385 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,416 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,416 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:05,416 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:05,417 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:05,417 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 84, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:05,417 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:05,417 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 84, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:05,417 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:05,417 TRACE [mio::poll] registering with poller
2020-03-29 20:15:05,418 TRACE [reqwest::blocking::client] (ThreadId(111)) start runtime::block_on
2020-03-29 20:15:05,429 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:05,429 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991074s
2020-03-29 20:15:05,429 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,429 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:05,429 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:05,429 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:05,430 TRACE [mio::poll] registering with poller
2020-03-29 20:15:05,430 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:05,430 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:05,430 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:05,430 TRACE [want] signal: Want
2020-03-29 20:15:05,430 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:05,430 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:05,430 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:05,431 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,431 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:05,431 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:05,431 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:05,431 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:05,431 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:05,431 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:05,435 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:05,435 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:05,435 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:05,435 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:05,436 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:05,436 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:05,436 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:05,436 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:05,436 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:05,436 TRACE [want] signal: Want
2020-03-29 20:15:05,436 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:05,436 TRACE [want] signal: Want
2020-03-29 20:15:05,436 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:05,436 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,436 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,436 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:05,436 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:05,436 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:05,436 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:05,436 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:05,436 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:05,436 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:05,436 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:05,436 TRACE [want] signal: Closed
2020-03-29 20:15:05,436 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(111))
2020-03-29 20:15:05,436 TRACE [reqwest::blocking::client] (ThreadId(111)) Receiver is shutdown
2020-03-29 20:15:05,436 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(111))
2020-03-29 20:15:05,437 TRACE [reqwest::blocking::client] (ThreadId(111)) end runtime::block_on
2020-03-29 20:15:05,437 TRACE [reqwest::blocking::client] (ThreadId(111)) finished
2020-03-29 20:15:05,437 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(111))
2020-03-29 20:15:05,437 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:05,437 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:05,437 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:05,437 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:05,437 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,641 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,678 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,679 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:05,679 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:05,679 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:05,679 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 85, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:05,679 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:05,679 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 85, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:05,680 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:05,680 TRACE [mio::poll] registering with poller
2020-03-29 20:15:05,681 TRACE [reqwest::blocking::client] (ThreadId(112)) start runtime::block_on
2020-03-29 20:15:05,693 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:05,693 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999977238s
2020-03-29 20:15:05,693 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,693 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:05,693 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:05,693 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:05,693 TRACE [mio::poll] registering with poller
2020-03-29 20:15:05,693 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:05,693 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:05,693 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:05,693 TRACE [want] signal: Want
2020-03-29 20:15:05,693 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:05,694 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:05,694 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:05,694 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,694 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:05,694 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:05,694 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:05,694 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:05,694 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:05,694 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:05,698 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:05,698 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:05,698 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:05,698 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:05,698 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:05,698 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:05,698 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:05,698 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:05,698 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:05,699 TRACE [want] signal: Want
2020-03-29 20:15:05,699 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:05,699 TRACE [want] signal: Want
2020-03-29 20:15:05,699 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:05,699 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,699 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,699 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:05,699 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:05,699 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:05,699 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:05,699 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:05,699 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:05,699 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:05,699 TRACE [want] signal: Closed
2020-03-29 20:15:05,699 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:05,699 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(112))
2020-03-29 20:15:05,699 TRACE [reqwest::blocking::client] (ThreadId(112)) Receiver is shutdown
2020-03-29 20:15:05,699 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(112))
2020-03-29 20:15:05,700 TRACE [reqwest::blocking::client] (ThreadId(112)) end runtime::block_on
2020-03-29 20:15:05,700 TRACE [reqwest::blocking::client] (ThreadId(112)) finished
2020-03-29 20:15:05,700 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(112))
2020-03-29 20:15:05,700 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:05,700 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:05,701 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:05,701 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:05,701 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,897 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,942 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:05,942 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:05,942 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:05,942 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:05,942 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 86, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:05,942 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:05,942 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 86, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:05,943 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:05,943 TRACE [mio::poll] registering with poller
2020-03-29 20:15:05,943 TRACE [reqwest::blocking::client] (ThreadId(113)) start runtime::block_on
2020-03-29 20:15:05,954 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:05,954 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992686s
2020-03-29 20:15:05,954 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,954 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:05,954 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:05,955 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:05,955 TRACE [mio::poll] registering with poller
2020-03-29 20:15:05,955 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:05,955 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:05,955 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:05,955 TRACE [want] signal: Want
2020-03-29 20:15:05,955 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:05,955 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:05,955 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:05,955 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,955 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:05,955 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:05,955 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:05,955 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:05,955 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:05,955 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:05,960 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:05,960 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:05,960 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:05,960 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:05,960 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:05,960 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:05,960 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:05,960 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:05,960 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:05,960 TRACE [want] signal: Want
2020-03-29 20:15:05,960 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:05,960 TRACE [want] signal: Want
2020-03-29 20:15:05,960 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:05,960 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,960 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:05,960 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:05,961 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:05,961 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:05,961 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:05,961 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:05,961 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:05,961 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(113))
2020-03-29 20:15:05,961 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:05,961 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:05,961 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(113))
2020-03-29 20:15:05,961 TRACE [want] signal: Closed
2020-03-29 20:15:05,961 TRACE [reqwest::blocking::client] (ThreadId(113)) Receiver is shutdown
2020-03-29 20:15:05,961 TRACE [reqwest::blocking::client] (ThreadId(113)) end runtime::block_on
2020-03-29 20:15:05,962 TRACE [reqwest::blocking::client] (ThreadId(113)) finished
2020-03-29 20:15:05,962 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(113))
2020-03-29 20:15:05,962 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:05,962 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:05,962 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:05,962 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:05,962 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,153 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,204 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,205 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:06,205 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:06,205 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:06,205 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 87, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:06,205 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:06,205 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 87, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:06,205 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:06,206 TRACE [mio::poll] registering with poller
2020-03-29 20:15:06,206 TRACE [reqwest::blocking::client] (ThreadId(114)) start runtime::block_on
2020-03-29 20:15:06,217 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:06,217 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991193s
2020-03-29 20:15:06,217 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,217 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:06,217 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:06,218 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:06,218 TRACE [mio::poll] registering with poller
2020-03-29 20:15:06,218 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:06,218 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:06,218 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:06,218 TRACE [want] signal: Want
2020-03-29 20:15:06,218 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:06,218 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:06,218 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:06,218 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,218 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:06,218 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:06,218 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:06,219 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:06,219 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:06,219 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:06,223 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:06,223 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:06,223 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:06,223 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:06,223 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:06,223 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:06,223 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:06,223 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:06,223 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:06,223 TRACE [want] signal: Want
2020-03-29 20:15:06,224 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:06,224 TRACE [want] signal: Want
2020-03-29 20:15:06,224 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:06,224 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,224 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,224 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:06,224 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:06,224 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:06,224 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:06,224 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:06,224 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:06,224 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:06,224 TRACE [want] signal: Closed
2020-03-29 20:15:06,224 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:06,224 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(114))
2020-03-29 20:15:06,224 TRACE [reqwest::blocking::client] (ThreadId(114)) Receiver is shutdown
2020-03-29 20:15:06,224 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(114))
2020-03-29 20:15:06,225 TRACE [reqwest::blocking::client] (ThreadId(114)) end runtime::block_on
2020-03-29 20:15:06,225 TRACE [reqwest::blocking::client] (ThreadId(114)) finished
2020-03-29 20:15:06,225 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(114))
2020-03-29 20:15:06,225 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:06,225 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:06,226 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:06,226 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:06,226 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,409 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,467 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,467 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:06,467 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:06,468 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:06,468 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 88, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:06,468 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:06,468 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 88, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:06,468 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:06,468 TRACE [mio::poll] registering with poller
2020-03-29 20:15:06,469 TRACE [reqwest::blocking::client] (ThreadId(115)) start runtime::block_on
2020-03-29 20:15:06,480 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:06,480 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999988238s
2020-03-29 20:15:06,480 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,480 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:06,480 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:06,480 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:06,480 TRACE [mio::poll] registering with poller
2020-03-29 20:15:06,480 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:06,480 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:06,480 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:06,480 TRACE [want] signal: Want
2020-03-29 20:15:06,481 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:06,481 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:06,481 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:06,481 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,481 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:06,481 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:06,481 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:06,481 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:06,481 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:06,481 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:06,486 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:06,486 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:06,486 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:06,486 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:06,486 TRACE [want] signal: Want
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:06,486 TRACE [want] signal: Want
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:06,486 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,486 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,486 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:06,486 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:06,486 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:06,486 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:06,486 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(115))
2020-03-29 20:15:06,487 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:06,487 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(115))
2020-03-29 20:15:06,487 TRACE [want] signal: Closed
2020-03-29 20:15:06,487 TRACE [reqwest::blocking::client] (ThreadId(115)) Receiver is shutdown
2020-03-29 20:15:06,487 TRACE [reqwest::blocking::client] (ThreadId(115)) end runtime::block_on
2020-03-29 20:15:06,487 TRACE [reqwest::blocking::client] (ThreadId(115)) finished
2020-03-29 20:15:06,487 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(115))
2020-03-29 20:15:06,488 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:06,488 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:06,488 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:06,488 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:06,488 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,730 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,730 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:06,730 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:06,730 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:06,730 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 89, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:06,731 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:06,731 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 89, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:06,731 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:06,731 TRACE [mio::poll] registering with poller
2020-03-29 20:15:06,732 TRACE [reqwest::blocking::client] (ThreadId(116)) start runtime::block_on
2020-03-29 20:15:06,742 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:06,743 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991865s
2020-03-29 20:15:06,743 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,743 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:06,743 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:06,743 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:06,743 TRACE [mio::poll] registering with poller
2020-03-29 20:15:06,743 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:06,743 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:06,743 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:06,743 TRACE [want] signal: Want
2020-03-29 20:15:06,743 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:06,743 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:06,743 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:06,743 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,744 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:06,744 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:06,744 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:06,744 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:06,744 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:06,744 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:06,748 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:06,749 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:06,749 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:06,749 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:06,749 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:06,749 TRACE [want] signal: Want
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:06,749 TRACE [want] signal: Want
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:06,749 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,749 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:06,749 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:06,749 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:06,749 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:06,749 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(116))
2020-03-29 20:15:06,749 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:06,750 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:06,750 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(116))
2020-03-29 20:15:06,750 TRACE [want] signal: Closed
2020-03-29 20:15:06,750 TRACE [reqwest::blocking::client] (ThreadId(116)) Receiver is shutdown
2020-03-29 20:15:06,750 TRACE [reqwest::blocking::client] (ThreadId(116)) end runtime::block_on
2020-03-29 20:15:06,750 TRACE [reqwest::blocking::client] (ThreadId(116)) finished
2020-03-29 20:15:06,750 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(116))
2020-03-29 20:15:06,750 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:06,751 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:06,751 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:06,751 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:06,751 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,985 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,992 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:06,992 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:06,992 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:06,992 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:06,992 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 90, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:06,993 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:06,993 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 90, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:06,993 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:06,993 TRACE [mio::poll] registering with poller
2020-03-29 20:15:06,993 TRACE [reqwest::blocking::client] (ThreadId(117)) start runtime::block_on
2020-03-29 20:15:07,003 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:07,003 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,003 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990362s
2020-03-29 20:15:07,003 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:07,003 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:07,003 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:07,004 TRACE [mio::poll] registering with poller
2020-03-29 20:15:07,004 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:07,004 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:07,004 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:07,004 TRACE [want] signal: Want
2020-03-29 20:15:07,004 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:07,004 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:07,004 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:07,004 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,004 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:07,004 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:07,004 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:07,004 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:07,005 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:07,005 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:07,010 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:07,010 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:07,010 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:07,010 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:07,010 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:07,010 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:07,010 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:07,010 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:07,010 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:07,010 TRACE [want] signal: Want
2020-03-29 20:15:07,010 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:07,011 TRACE [want] signal: Want
2020-03-29 20:15:07,011 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:07,011 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,011 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,011 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:07,011 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:07,011 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:07,011 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:07,011 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:07,011 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:07,011 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:07,011 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:07,011 TRACE [want] signal: Closed
2020-03-29 20:15:07,011 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(117))
2020-03-29 20:15:07,011 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(117))
2020-03-29 20:15:07,011 TRACE [reqwest::blocking::client] (ThreadId(117)) Receiver is shutdown
2020-03-29 20:15:07,012 TRACE [reqwest::blocking::client] (ThreadId(117)) end runtime::block_on
2020-03-29 20:15:07,012 TRACE [reqwest::blocking::client] (ThreadId(117)) finished
2020-03-29 20:15:07,012 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(117))
2020-03-29 20:15:07,013 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:07,013 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:07,013 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:07,013 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:07,013 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,241 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,254 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,254 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:07,255 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:07,255 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:07,255 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 91, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:07,255 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:07,255 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 91, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:07,255 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:07,255 TRACE [mio::poll] registering with poller
2020-03-29 20:15:07,256 TRACE [reqwest::blocking::client] (ThreadId(118)) start runtime::block_on
2020-03-29 20:15:07,267 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:07,267 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991224s
2020-03-29 20:15:07,267 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,267 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:07,267 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:07,267 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:07,267 TRACE [mio::poll] registering with poller
2020-03-29 20:15:07,267 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:07,268 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:07,268 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:07,268 TRACE [want] signal: Want
2020-03-29 20:15:07,268 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:07,268 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:07,268 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:07,268 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,268 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:07,268 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:07,268 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:07,268 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:07,268 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:07,268 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:07,273 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:07,273 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:07,273 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:07,273 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:07,273 TRACE [want] signal: Want
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:07,273 TRACE [want] signal: Want
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:07,273 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,273 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,273 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:07,273 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:07,273 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:07,273 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:07,273 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(118))
2020-03-29 20:15:07,274 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:07,274 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(118))
2020-03-29 20:15:07,274 TRACE [want] signal: Closed
2020-03-29 20:15:07,274 TRACE [reqwest::blocking::client] (ThreadId(118)) Receiver is shutdown
2020-03-29 20:15:07,274 TRACE [reqwest::blocking::client] (ThreadId(118)) end runtime::block_on
2020-03-29 20:15:07,274 TRACE [reqwest::blocking::client] (ThreadId(118)) finished
2020-03-29 20:15:07,274 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(118))
2020-03-29 20:15:07,275 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:07,275 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:07,275 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:07,275 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:07,275 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,305 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,497 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,517 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,517 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:07,517 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:07,517 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:07,517 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 92, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:07,518 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:07,518 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 92, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:07,518 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:07,518 TRACE [mio::poll] registering with poller
2020-03-29 20:15:07,519 TRACE [reqwest::blocking::client] (ThreadId(119)) start runtime::block_on
2020-03-29 20:15:07,530 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:07,530 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990953s
2020-03-29 20:15:07,530 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,530 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:07,530 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:07,530 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:07,530 TRACE [mio::poll] registering with poller
2020-03-29 20:15:07,531 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:07,531 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:07,531 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:07,531 TRACE [want] signal: Want
2020-03-29 20:15:07,531 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:07,531 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:07,531 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:07,531 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,532 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:07,532 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:07,532 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:07,532 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:07,532 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:07,532 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:07,535 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:07,535 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:07,535 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:07,535 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:07,535 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:07,535 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:07,535 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:07,536 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:07,536 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:07,536 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:07,536 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:07,536 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:07,536 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:07,536 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:07,536 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:07,536 TRACE [want] signal: Closed
2020-03-29 20:15:07,536 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:07,536 TRACE [want] poll_want: closed
2020-03-29 20:15:07,536 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:07,536 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(119))
2020-03-29 20:15:07,537 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(119))
2020-03-29 20:15:07,537 TRACE [reqwest::blocking::client] (ThreadId(119)) Receiver is shutdown
2020-03-29 20:15:07,537 TRACE [reqwest::blocking::client] (ThreadId(119)) end runtime::block_on
2020-03-29 20:15:07,537 TRACE [reqwest::blocking::client] (ThreadId(119)) finished
2020-03-29 20:15:07,537 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(119))
2020-03-29 20:15:07,538 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:07,538 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:07,538 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:07,538 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:07,538 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,754 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,779 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:07,780 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:07,780 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:07,780 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:07,780 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 93, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:07,780 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:07,780 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 93, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:07,781 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:07,781 TRACE [mio::poll] registering with poller
2020-03-29 20:15:07,781 TRACE [reqwest::blocking::client] (ThreadId(120)) start runtime::block_on
2020-03-29 20:15:07,792 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:07,792 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991715s
2020-03-29 20:15:07,792 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,792 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:07,792 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:07,793 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:07,793 TRACE [mio::poll] registering with poller
2020-03-29 20:15:07,793 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:07,793 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:07,793 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:07,793 TRACE [want] signal: Want
2020-03-29 20:15:07,793 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:07,793 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:07,794 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:07,794 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,794 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:07,794 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:07,794 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:07,794 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:07,794 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:07,794 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:07,799 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:07,799 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:07,799 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:07,799 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:07,799 TRACE [want] signal: Want
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:07,799 TRACE [want] signal: Want
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:07,799 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,799 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:07,799 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:07,799 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:07,799 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:07,799 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:07,800 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:07,800 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:07,800 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(120))
2020-03-29 20:15:07,800 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:07,800 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(120))
2020-03-29 20:15:07,800 TRACE [want] signal: Closed
2020-03-29 20:15:07,800 TRACE [reqwest::blocking::client] (ThreadId(120)) Receiver is shutdown
2020-03-29 20:15:07,800 TRACE [reqwest::blocking::client] (ThreadId(120)) end runtime::block_on
2020-03-29 20:15:07,800 TRACE [reqwest::blocking::client] (ThreadId(120)) finished
2020-03-29 20:15:07,800 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(120))
2020-03-29 20:15:07,801 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:07,801 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:07,801 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:07,801 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:07,801 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,010 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,042 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,043 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,043 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,043 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:08,043 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 94, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:08,043 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:08,043 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 94, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:08,043 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:08,044 TRACE [mio::poll] registering with poller
2020-03-29 20:15:08,044 TRACE [reqwest::blocking::client] (ThreadId(121)) start runtime::block_on
2020-03-29 20:15:08,055 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:08,055 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990853s
2020-03-29 20:15:08,056 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,056 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:08,056 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:08,056 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:08,056 TRACE [mio::poll] registering with poller
2020-03-29 20:15:08,056 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:08,056 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:08,056 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:08,056 TRACE [want] signal: Want
2020-03-29 20:15:08,056 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:08,056 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:08,056 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:08,056 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,056 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:08,056 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:08,056 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:08,056 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:08,057 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:08,057 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:08,061 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:08,061 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:08,061 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:08,061 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:08,061 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:08,061 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:08,061 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:08,061 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:08,061 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:08,061 TRACE [want] signal: Want
2020-03-29 20:15:08,061 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:08,061 TRACE [want] signal: Want
2020-03-29 20:15:08,061 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:08,062 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,062 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,062 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:08,062 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:08,062 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:08,062 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:08,062 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:08,062 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:08,062 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:08,062 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(121))
2020-03-29 20:15:08,062 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:08,062 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(121))
2020-03-29 20:15:08,062 TRACE [want] signal: Closed
2020-03-29 20:15:08,062 TRACE [reqwest::blocking::client] (ThreadId(121)) Receiver is shutdown
2020-03-29 20:15:08,063 TRACE [reqwest::blocking::client] (ThreadId(121)) end runtime::block_on
2020-03-29 20:15:08,063 TRACE [reqwest::blocking::client] (ThreadId(121)) finished
2020-03-29 20:15:08,063 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(121))
2020-03-29 20:15:08,063 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:08,063 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:08,063 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,063 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,064 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,265 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,305 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,305 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,305 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,305 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:08,306 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 95, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:08,306 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:08,306 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 95, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:08,306 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:08,306 TRACE [mio::poll] registering with poller
2020-03-29 20:15:08,307 TRACE [reqwest::blocking::client] (ThreadId(122)) start runtime::block_on
2020-03-29 20:15:08,318 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:08,318 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991043s
2020-03-29 20:15:08,318 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,318 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:08,318 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:08,318 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:08,318 TRACE [mio::poll] registering with poller
2020-03-29 20:15:08,319 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:08,319 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:08,319 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:08,319 TRACE [want] signal: Want
2020-03-29 20:15:08,319 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:08,319 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:08,319 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:08,319 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,319 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:08,319 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:08,319 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:08,319 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:08,319 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:08,319 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:08,324 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:08,324 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:08,324 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:08,324 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:08,324 TRACE [want] signal: Want
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:08,324 TRACE [want] signal: Want
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:08,324 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,324 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,324 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:08,324 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:08,324 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:08,324 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:08,324 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:08,325 TRACE [want] signal: Closed
2020-03-29 20:15:08,325 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(122))
2020-03-29 20:15:08,325 TRACE [reqwest::blocking::client] (ThreadId(122)) Receiver is shutdown
2020-03-29 20:15:08,325 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(122))
2020-03-29 20:15:08,325 TRACE [reqwest::blocking::client] (ThreadId(122)) end runtime::block_on
2020-03-29 20:15:08,325 TRACE [reqwest::blocking::client] (ThreadId(122)) finished
2020-03-29 20:15:08,325 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(122))
2020-03-29 20:15:08,325 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:08,326 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:08,326 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,326 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,326 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,521 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,567 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,567 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,567 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,568 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:08,568 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 96, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:08,568 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:08,568 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 96, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:08,568 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:08,568 TRACE [mio::poll] registering with poller
2020-03-29 20:15:08,569 TRACE [reqwest::blocking::client] (ThreadId(123)) start runtime::block_on
2020-03-29 20:15:08,579 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:08,580 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991835s
2020-03-29 20:15:08,580 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,580 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:08,580 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:08,580 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:08,580 TRACE [mio::poll] registering with poller
2020-03-29 20:15:08,580 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:08,580 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:08,580 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:08,581 TRACE [want] signal: Want
2020-03-29 20:15:08,581 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:08,581 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:08,581 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:08,581 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,581 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:08,581 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:08,581 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:08,581 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:08,581 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:08,581 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:08,585 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:08,586 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:08,586 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:08,586 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:08,586 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:08,586 TRACE [want] signal: Want
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:08,586 TRACE [want] signal: Want
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:08,586 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,586 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,586 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:08,586 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:08,586 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:08,586 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(123))
2020-03-29 20:15:08,586 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:08,586 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:08,586 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(123))
2020-03-29 20:15:08,587 TRACE [want] signal: Closed
2020-03-29 20:15:08,587 TRACE [reqwest::blocking::client] (ThreadId(123)) Receiver is shutdown
2020-03-29 20:15:08,587 TRACE [reqwest::blocking::client] (ThreadId(123)) end runtime::block_on
2020-03-29 20:15:08,587 TRACE [reqwest::blocking::client] (ThreadId(123)) finished
2020-03-29 20:15:08,587 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(123))
2020-03-29 20:15:08,587 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:08,588 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:08,588 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,588 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,588 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,635 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,635 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,636 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,777 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,829 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:08,830 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,830 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,830 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:08,830 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 97, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:08,830 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:08,830 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 97, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:08,831 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:08,831 TRACE [mio::poll] registering with poller
2020-03-29 20:15:08,832 TRACE [reqwest::blocking::client] (ThreadId(124)) start runtime::block_on
2020-03-29 20:15:08,842 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:08,842 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991013s
2020-03-29 20:15:08,843 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,843 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:08,843 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:08,843 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:08,843 TRACE [mio::poll] registering with poller
2020-03-29 20:15:08,843 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:08,843 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:08,843 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:08,843 TRACE [want] signal: Want
2020-03-29 20:15:08,843 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:08,843 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:08,843 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:08,843 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,844 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:08,844 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:08,844 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:08,844 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:08,844 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:08,844 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:08,848 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:08,848 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:08,848 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:08,848 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:08,848 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:08,848 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:08,848 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:08,848 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:08,848 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:08,848 TRACE [want] signal: Want
2020-03-29 20:15:08,848 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:08,848 TRACE [want] signal: Want
2020-03-29 20:15:08,848 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:08,849 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,849 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:08,849 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:08,849 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:08,849 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:08,849 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:08,849 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:08,849 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:08,849 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:08,849 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:08,849 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(124))
2020-03-29 20:15:08,849 TRACE [want] signal: Closed
2020-03-29 20:15:08,849 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(124))
2020-03-29 20:15:08,849 TRACE [reqwest::blocking::client] (ThreadId(124)) Receiver is shutdown
2020-03-29 20:15:08,850 TRACE [reqwest::blocking::client] (ThreadId(124)) end runtime::block_on
2020-03-29 20:15:08,850 TRACE [reqwest::blocking::client] (ThreadId(124)) finished
2020-03-29 20:15:08,850 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(124))
2020-03-29 20:15:08,850 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:08,850 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:08,850 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:08,850 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:08,850 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,034 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,093 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,093 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:09,093 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:09,093 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:09,093 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 98, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:09,094 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:09,094 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 98, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:09,094 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:09,094 TRACE [mio::poll] registering with poller
2020-03-29 20:15:09,095 TRACE [reqwest::blocking::client] (ThreadId(125)) start runtime::block_on
2020-03-29 20:15:09,105 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:09,105 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992105s
2020-03-29 20:15:09,105 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,106 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:09,106 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:09,106 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:09,106 TRACE [mio::poll] registering with poller
2020-03-29 20:15:09,106 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:09,106 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:09,106 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:09,107 TRACE [want] signal: Want
2020-03-29 20:15:09,107 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:09,107 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:09,107 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:09,107 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,107 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:09,107 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:09,107 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:09,108 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:09,108 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:09,108 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:09,112 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:09,112 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:09,112 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:09,112 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:09,112 TRACE [want] signal: Want
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:09,112 TRACE [want] signal: Want
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:09,112 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,112 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,112 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:09,112 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:09,112 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:09,112 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:09,113 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:09,113 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:09,113 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(125))
2020-03-29 20:15:09,113 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:09,113 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(125))
2020-03-29 20:15:09,113 TRACE [want] signal: Closed
2020-03-29 20:15:09,113 TRACE [reqwest::blocking::client] (ThreadId(125)) Receiver is shutdown
2020-03-29 20:15:09,113 TRACE [reqwest::blocking::client] (ThreadId(125)) end runtime::block_on
2020-03-29 20:15:09,113 TRACE [reqwest::blocking::client] (ThreadId(125)) finished
2020-03-29 20:15:09,114 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(125))
2020-03-29 20:15:09,114 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:09,114 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:09,114 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:09,114 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:09,114 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,353 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,355 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,355 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:09,355 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:09,355 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:09,355 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 99, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:09,356 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:09,356 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 99, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:09,356 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:09,356 TRACE [mio::poll] registering with poller
2020-03-29 20:15:09,357 TRACE [reqwest::blocking::client] (ThreadId(126)) start runtime::block_on
2020-03-29 20:15:09,368 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:09,368 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991204s
2020-03-29 20:15:09,368 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,368 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:09,368 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:09,368 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:09,368 TRACE [mio::poll] registering with poller
2020-03-29 20:15:09,368 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:09,368 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:09,368 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:09,368 TRACE [want] signal: Want
2020-03-29 20:15:09,368 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:09,368 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:09,368 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:09,368 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,369 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:09,369 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:09,369 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:09,369 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:09,369 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:09,369 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:09,373 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:09,374 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:09,374 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:09,374 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:09,374 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:09,374 TRACE [want] signal: Want
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:09,374 TRACE [want] signal: Want
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:09,374 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,374 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,374 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:09,374 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:09,374 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:09,374 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(126))
2020-03-29 20:15:09,374 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:09,375 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:09,375 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(126))
2020-03-29 20:15:09,375 TRACE [want] signal: Closed
2020-03-29 20:15:09,375 TRACE [reqwest::blocking::client] (ThreadId(126)) Receiver is shutdown
2020-03-29 20:15:09,375 TRACE [reqwest::blocking::client] (ThreadId(126)) end runtime::block_on
2020-03-29 20:15:09,375 TRACE [reqwest::blocking::client] (ThreadId(126)) finished
2020-03-29 20:15:09,375 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(126))
2020-03-29 20:15:09,376 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:09,376 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:09,376 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:09,376 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:09,376 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,610 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,617 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,618 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:09,618 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:09,618 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:09,618 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 100, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:09,618 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:09,618 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 100, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:09,619 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:09,619 TRACE [mio::poll] registering with poller
2020-03-29 20:15:09,619 TRACE [reqwest::blocking::client] (ThreadId(127)) start runtime::block_on
2020-03-29 20:15:09,630 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:09,630 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991814s
2020-03-29 20:15:09,631 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,631 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:09,631 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:09,631 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:09,631 TRACE [mio::poll] registering with poller
2020-03-29 20:15:09,631 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:09,631 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:09,631 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:09,631 TRACE [want] signal: Want
2020-03-29 20:15:09,631 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:09,631 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:09,631 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:09,631 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,631 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:09,631 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:09,631 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:09,631 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:09,631 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:09,631 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:09,636 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:09,636 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:09,636 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:09,636 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:09,636 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:09,636 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:09,636 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:09,636 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:09,636 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:09,636 TRACE [want] signal: Want
2020-03-29 20:15:09,636 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:09,636 TRACE [want] signal: Want
2020-03-29 20:15:09,636 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:09,636 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,637 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,637 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:09,637 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:09,637 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:09,637 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:09,637 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:09,637 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:09,637 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:09,637 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:09,637 TRACE [want] signal: Closed
2020-03-29 20:15:09,637 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(127))
2020-03-29 20:15:09,637 TRACE [reqwest::blocking::client] (ThreadId(127)) Receiver is shutdown
2020-03-29 20:15:09,637 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(127))
2020-03-29 20:15:09,638 TRACE [reqwest::blocking::client] (ThreadId(127)) end runtime::block_on
2020-03-29 20:15:09,638 TRACE [reqwest::blocking::client] (ThreadId(127)) finished
2020-03-29 20:15:09,638 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(127))
2020-03-29 20:15:09,638 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:09,638 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:09,638 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:09,638 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:09,638 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,865 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,880 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:09,881 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:09,881 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:09,881 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:09,881 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 101, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:09,881 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:09,881 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 101, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:09,881 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:09,882 TRACE [mio::poll] registering with poller
2020-03-29 20:15:09,882 TRACE [reqwest::blocking::client] (ThreadId(128)) start runtime::block_on
2020-03-29 20:15:09,893 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:09,893 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990883s
2020-03-29 20:15:09,893 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,893 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:09,893 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:09,894 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:09,894 TRACE [mio::poll] registering with poller
2020-03-29 20:15:09,894 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:09,894 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:09,894 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:09,894 TRACE [want] signal: Want
2020-03-29 20:15:09,894 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:09,894 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:09,895 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:09,895 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,895 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:09,895 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:09,895 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:09,895 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:09,895 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:09,895 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:09,900 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:09,900 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:09,900 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:09,900 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:09,900 TRACE [want] signal: Want
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:09,900 TRACE [want] signal: Want
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:09,900 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,900 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:09,900 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:09,900 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:09,900 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:09,900 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:09,900 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:09,900 TRACE [want] signal: Closed
2020-03-29 20:15:09,901 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(128))
2020-03-29 20:15:09,901 TRACE [reqwest::blocking::client] (ThreadId(128)) Receiver is shutdown
2020-03-29 20:15:09,901 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(128))
2020-03-29 20:15:09,901 TRACE [reqwest::blocking::client] (ThreadId(128)) end runtime::block_on
2020-03-29 20:15:09,901 TRACE [reqwest::blocking::client] (ThreadId(128)) finished
2020-03-29 20:15:09,901 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(128))
2020-03-29 20:15:09,902 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:09,902 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:09,902 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:09,902 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:09,902 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,122 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,143 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,144 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:10,144 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:10,144 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:10,144 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 102, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:10,144 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:10,144 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 102, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:10,145 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:10,145 TRACE [mio::poll] registering with poller
2020-03-29 20:15:10,145 TRACE [reqwest::blocking::client] (ThreadId(129)) start runtime::block_on
2020-03-29 20:15:10,156 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:10,156 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991074s
2020-03-29 20:15:10,156 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,156 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:10,157 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:10,157 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:10,157 TRACE [mio::poll] registering with poller
2020-03-29 20:15:10,157 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:10,157 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:10,157 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:10,157 TRACE [want] signal: Want
2020-03-29 20:15:10,157 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:10,157 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:10,157 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:10,157 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,157 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:10,157 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:10,157 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:10,157 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:10,157 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:10,157 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:10,162 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:10,162 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:10,162 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:10,162 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:10,162 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:10,162 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:10,162 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:10,162 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:10,162 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:10,162 TRACE [want] signal: Want
2020-03-29 20:15:10,163 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:10,163 TRACE [want] signal: Want
2020-03-29 20:15:10,163 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:10,163 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,163 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,163 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:10,163 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:10,163 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:10,163 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:10,163 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:10,163 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:10,163 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(129))
2020-03-29 20:15:10,163 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:10,163 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:10,163 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(129))
2020-03-29 20:15:10,163 TRACE [want] signal: Closed
2020-03-29 20:15:10,163 TRACE [reqwest::blocking::client] (ThreadId(129)) Receiver is shutdown
2020-03-29 20:15:10,164 TRACE [reqwest::blocking::client] (ThreadId(129)) end runtime::block_on
2020-03-29 20:15:10,164 TRACE [reqwest::blocking::client] (ThreadId(129)) finished
2020-03-29 20:15:10,164 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(129))
2020-03-29 20:15:10,164 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:10,164 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:10,164 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:10,165 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:10,165 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,377 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,406 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,406 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:10,406 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:10,406 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:10,406 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 103, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:10,407 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:10,407 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 103, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:10,407 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:10,407 TRACE [mio::poll] registering with poller
2020-03-29 20:15:10,408 TRACE [reqwest::blocking::client] (ThreadId(130)) start runtime::block_on
2020-03-29 20:15:10,418 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:10,418 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,418 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992336s
2020-03-29 20:15:10,418 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:10,418 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:10,419 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:10,419 TRACE [mio::poll] registering with poller
2020-03-29 20:15:10,419 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:10,419 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:10,419 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:10,419 TRACE [want] signal: Want
2020-03-29 20:15:10,419 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:10,419 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:10,419 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:10,419 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,419 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:10,419 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:10,419 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:10,419 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:10,419 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:10,419 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:10,422 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:10,422 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:10,422 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:10,422 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:10,422 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:10,422 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:10,422 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:10,422 TRACE [want] signal: Closed
2020-03-29 20:15:10,422 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:10,422 TRACE [want] poll_want: closed
2020-03-29 20:15:10,422 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:10,423 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(130))
2020-03-29 20:15:10,423 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(130))
2020-03-29 20:15:10,423 TRACE [reqwest::blocking::client] (ThreadId(130)) Receiver is shutdown
2020-03-29 20:15:10,423 TRACE [reqwest::blocking::client] (ThreadId(130)) end runtime::block_on
2020-03-29 20:15:10,423 TRACE [reqwest::blocking::client] (ThreadId(130)) finished
2020-03-29 20:15:10,423 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(130))
2020-03-29 20:15:10,424 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:10,424 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:10,424 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:10,424 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:10,424 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,633 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,668 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,668 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:10,668 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:10,668 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:10,668 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 104, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:10,668 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:10,668 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 104, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:10,668 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:10,669 TRACE [mio::poll] registering with poller
2020-03-29 20:15:10,669 TRACE [reqwest::blocking::client] (ThreadId(131)) start runtime::block_on
2020-03-29 20:15:10,681 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:10,681 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999995322s
2020-03-29 20:15:10,681 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,681 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:10,682 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:10,682 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:10,682 TRACE [mio::poll] registering with poller
2020-03-29 20:15:10,682 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:10,682 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:10,683 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:10,683 TRACE [want] signal: Want
2020-03-29 20:15:10,683 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:10,683 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:10,683 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:10,683 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,683 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:10,684 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:10,684 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:10,684 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:10,684 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:10,684 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:10,686 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:10,686 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:10,686 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:10,687 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:10,687 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:10,687 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:10,687 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:10,687 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:10,687 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:10,687 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:10,687 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:10,687 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:10,687 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:10,687 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:10,687 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:10,687 TRACE [want] signal: Closed
2020-03-29 20:15:10,687 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:10,687 TRACE [want] poll_want: closed
2020-03-29 20:15:10,687 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:10,687 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(131))
2020-03-29 20:15:10,687 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(131))
2020-03-29 20:15:10,687 TRACE [reqwest::blocking::client] (ThreadId(131)) Receiver is shutdown
2020-03-29 20:15:10,688 TRACE [reqwest::blocking::client] (ThreadId(131)) end runtime::block_on
2020-03-29 20:15:10,688 TRACE [reqwest::blocking::client] (ThreadId(131)) finished
2020-03-29 20:15:10,688 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(131))
2020-03-29 20:15:10,688 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:10,688 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:10,688 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:10,688 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:10,688 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,890 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,930 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:10,931 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:10,931 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:10,931 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:10,931 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 105, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:10,931 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:10,931 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 105, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:10,932 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:10,932 TRACE [mio::poll] registering with poller
2020-03-29 20:15:10,932 TRACE [reqwest::blocking::client] (ThreadId(132)) start runtime::block_on
2020-03-29 20:15:10,943 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:10,943 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990773s
2020-03-29 20:15:10,943 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,943 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:10,944 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:10,944 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:10,944 TRACE [mio::poll] registering with poller
2020-03-29 20:15:10,944 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:10,944 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:10,944 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:10,944 TRACE [want] signal: Want
2020-03-29 20:15:10,944 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:10,944 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:10,944 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:10,944 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,944 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:10,944 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:10,944 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:10,945 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:10,945 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:10,945 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:10,949 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:10,949 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:10,949 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:10,949 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:10,949 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:10,949 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:10,949 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:10,949 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:10,949 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:10,949 TRACE [want] signal: Want
2020-03-29 20:15:10,949 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:10,949 TRACE [want] signal: Want
2020-03-29 20:15:10,949 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:10,950 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,950 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:10,950 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:10,950 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:10,950 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:10,950 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:10,950 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:10,950 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:10,950 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(132))
2020-03-29 20:15:10,950 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:10,950 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(132))
2020-03-29 20:15:10,950 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:10,950 TRACE [want] signal: Closed
2020-03-29 20:15:10,950 TRACE [reqwest::blocking::client] (ThreadId(132)) Receiver is shutdown
2020-03-29 20:15:10,951 TRACE [reqwest::blocking::client] (ThreadId(132)) end runtime::block_on
2020-03-29 20:15:10,951 TRACE [reqwest::blocking::client] (ThreadId(132)) finished
2020-03-29 20:15:10,951 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(132))
2020-03-29 20:15:10,951 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:10,951 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:10,951 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:10,951 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:10,951 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,145 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,193 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,193 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:11,193 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:11,194 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:11,194 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 106, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:11,194 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:11,194 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 106, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:11,194 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:11,194 TRACE [mio::poll] registering with poller
2020-03-29 20:15:11,195 TRACE [reqwest::blocking::client] (ThreadId(133)) start runtime::block_on
2020-03-29 20:15:11,205 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:11,206 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991874s
2020-03-29 20:15:11,206 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,206 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:11,206 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:11,206 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:11,206 TRACE [mio::poll] registering with poller
2020-03-29 20:15:11,206 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:11,206 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:11,206 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:11,207 TRACE [want] signal: Want
2020-03-29 20:15:11,207 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:11,207 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:11,207 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:11,207 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,207 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:11,207 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:11,207 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:11,207 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:11,207 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:11,207 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:11,211 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:11,211 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:11,211 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:11,211 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:11,212 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:11,212 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:11,212 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:11,212 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:11,212 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:11,212 TRACE [want] signal: Want
2020-03-29 20:15:11,212 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:11,212 TRACE [want] signal: Want
2020-03-29 20:15:11,212 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:11,212 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,212 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,212 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:11,212 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:11,212 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:11,212 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:11,212 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:11,212 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(133))
2020-03-29 20:15:11,212 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:11,212 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(133))
2020-03-29 20:15:11,212 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:11,212 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:11,212 TRACE [want] signal: Closed
2020-03-29 20:15:11,212 TRACE [reqwest::blocking::client] (ThreadId(133)) Receiver is shutdown
2020-03-29 20:15:11,213 TRACE [reqwest::blocking::client] (ThreadId(133)) end runtime::block_on
2020-03-29 20:15:11,213 TRACE [reqwest::blocking::client] (ThreadId(133)) finished
2020-03-29 20:15:11,213 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(133))
2020-03-29 20:15:11,213 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:11,213 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:11,213 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:11,214 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:11,214 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,401 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,454 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,455 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:11,455 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:11,455 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:11,455 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 107, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:11,455 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:11,455 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 107, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:11,456 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:11,456 TRACE [mio::poll] registering with poller
2020-03-29 20:15:11,457 TRACE [reqwest::blocking::client] (ThreadId(134)) start runtime::block_on
2020-03-29 20:15:11,465 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:11,465 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,465 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990312s
2020-03-29 20:15:11,465 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:11,466 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:11,466 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:11,466 TRACE [mio::poll] registering with poller
2020-03-29 20:15:11,466 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:11,466 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:11,466 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:11,466 TRACE [want] signal: Want
2020-03-29 20:15:11,466 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:11,466 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:11,466 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:11,466 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,466 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:11,466 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:11,467 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:11,467 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:11,467 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:11,467 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:11,471 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:11,471 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:11,472 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:11,472 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:11,472 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:11,472 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:11,472 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:11,472 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:11,472 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:11,472 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:11,472 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:11,472 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:11,472 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:11,472 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:11,472 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:11,472 TRACE [want] signal: Closed
2020-03-29 20:15:11,472 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:11,472 TRACE [want] poll_want: closed
2020-03-29 20:15:11,472 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:11,473 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(134))
2020-03-29 20:15:11,473 TRACE [reqwest::blocking::client] (ThreadId(134)) Receiver is shutdown
2020-03-29 20:15:11,473 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(134))
2020-03-29 20:15:11,474 TRACE [reqwest::blocking::client] (ThreadId(134)) end runtime::block_on
2020-03-29 20:15:11,474 TRACE [reqwest::blocking::client] (ThreadId(134)) finished
2020-03-29 20:15:11,474 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(134))
2020-03-29 20:15:11,474 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:11,474 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:11,474 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:11,474 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:11,474 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,657 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,717 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,718 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:11,718 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:11,718 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:11,718 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 108, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:11,718 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:11,718 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 108, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:11,719 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:11,719 TRACE [mio::poll] registering with poller
2020-03-29 20:15:11,719 TRACE [reqwest::blocking::client] (ThreadId(135)) start runtime::block_on
2020-03-29 20:15:11,730 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:11,730 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.99999474s
2020-03-29 20:15:11,730 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,731 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:11,731 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:11,731 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:11,731 TRACE [mio::poll] registering with poller
2020-03-29 20:15:11,731 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:11,731 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:11,731 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:11,732 TRACE [want] signal: Want
2020-03-29 20:15:11,732 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:11,732 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:11,732 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:11,732 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,732 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:11,732 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:11,732 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:11,732 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:11,733 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:11,733 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:11,737 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:11,737 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:11,737 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:11,737 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:11,738 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:11,738 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:11,738 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:11,738 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:11,738 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:11,738 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:11,738 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:11,738 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:11,738 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:11,738 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:11,738 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:11,738 TRACE [want] signal: Closed
2020-03-29 20:15:11,739 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:11,739 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:11,739 TRACE [want] poll_want: closed
2020-03-29 20:15:11,739 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999985142s
2020-03-29 20:15:11,739 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(135))
2020-03-29 20:15:11,739 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(135))
2020-03-29 20:15:11,739 TRACE [reqwest::blocking::client] (ThreadId(135)) Receiver is shutdown
2020-03-29 20:15:11,740 TRACE [reqwest::blocking::client] (ThreadId(135)) end runtime::block_on
2020-03-29 20:15:11,740 TRACE [reqwest::blocking::client] (ThreadId(135)) finished
2020-03-29 20:15:11,740 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(135))
2020-03-29 20:15:11,740 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:11,740 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:11,741 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:11,741 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:11,741 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,977 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,980 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:11,981 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:11,981 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:11,981 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:11,981 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 109, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:11,981 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:11,981 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 109, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:11,982 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:11,982 TRACE [mio::poll] registering with poller
2020-03-29 20:15:11,982 TRACE [reqwest::blocking::client] (ThreadId(136)) start runtime::block_on
2020-03-29 20:15:11,993 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:11,993 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991815s
2020-03-29 20:15:11,993 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,993 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:11,994 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:11,994 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:11,994 TRACE [mio::poll] registering with poller
2020-03-29 20:15:11,994 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:11,994 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:11,994 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:11,994 TRACE [want] signal: Want
2020-03-29 20:15:11,994 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:11,994 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:11,994 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:11,994 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,994 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:11,994 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:11,994 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:11,994 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:11,995 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:11,995 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:11,999 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:11,999 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:11,999 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:11,999 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:11,999 TRACE [want] signal: Want
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:11,999 TRACE [want] signal: Want
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:11,999 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,999 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:11,999 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:11,999 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:11,999 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:11,999 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:12,000 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:12,000 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:12,000 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(136))
2020-03-29 20:15:12,000 TRACE [want] signal: Closed
2020-03-29 20:15:12,000 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(136))
2020-03-29 20:15:12,000 TRACE [reqwest::blocking::client] (ThreadId(136)) Receiver is shutdown
2020-03-29 20:15:12,000 TRACE [reqwest::blocking::client] (ThreadId(136)) end runtime::block_on
2020-03-29 20:15:12,000 TRACE [reqwest::blocking::client] (ThreadId(136)) finished
2020-03-29 20:15:12,000 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(136))
2020-03-29 20:15:12,001 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:12,001 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:12,001 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:12,001 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:12,001 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,234 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,243 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,243 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:12,243 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:12,244 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:12,244 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 110, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:12,244 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:12,244 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 110, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:12,244 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:12,244 TRACE [mio::poll] registering with poller
2020-03-29 20:15:12,245 TRACE [reqwest::blocking::client] (ThreadId(137)) start runtime::block_on
2020-03-29 20:15:12,255 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:12,255 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992225s
2020-03-29 20:15:12,256 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,256 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:12,256 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:12,256 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:12,256 TRACE [mio::poll] registering with poller
2020-03-29 20:15:12,256 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:12,257 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:12,257 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:12,257 TRACE [want] signal: Want
2020-03-29 20:15:12,257 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:12,257 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:12,257 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:12,257 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,257 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:12,257 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:12,257 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:12,257 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:12,258 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:12,258 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:12,262 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:12,262 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:12,262 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:12,262 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:12,262 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:12,262 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:12,262 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:12,262 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:12,262 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:12,263 TRACE [want] signal: Want
2020-03-29 20:15:12,263 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:12,263 TRACE [want] signal: Want
2020-03-29 20:15:12,263 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:12,263 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,263 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,263 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:12,263 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:12,263 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:12,263 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(137))
2020-03-29 20:15:12,263 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:12,263 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:12,263 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(137))
2020-03-29 20:15:12,263 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:12,263 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:12,263 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:12,263 TRACE [want] signal: Closed
2020-03-29 20:15:12,263 TRACE [reqwest::blocking::client] (ThreadId(137)) Receiver is shutdown
2020-03-29 20:15:12,264 TRACE [reqwest::blocking::client] (ThreadId(137)) end runtime::block_on
2020-03-29 20:15:12,264 TRACE [reqwest::blocking::client] (ThreadId(137)) finished
2020-03-29 20:15:12,264 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(137))
2020-03-29 20:15:12,264 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:12,264 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:12,264 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:12,265 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:12,265 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,489 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,505 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,505 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:12,505 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:12,506 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:12,506 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 111, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:12,506 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:12,506 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 111, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:12,506 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:12,506 TRACE [mio::poll] registering with poller
2020-03-29 20:15:12,507 TRACE [reqwest::blocking::client] (ThreadId(138)) start runtime::block_on
2020-03-29 20:15:12,518 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:12,518 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991735s
2020-03-29 20:15:12,518 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,518 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:12,518 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:12,518 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:12,518 TRACE [mio::poll] registering with poller
2020-03-29 20:15:12,519 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:12,519 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:12,519 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:12,519 TRACE [want] signal: Want
2020-03-29 20:15:12,519 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:12,519 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:12,519 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:12,519 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,520 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:12,520 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:12,520 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:12,520 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:12,520 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:12,520 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:12,525 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:12,525 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:12,525 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:12,525 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:12,525 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:12,525 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:12,525 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:12,525 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:12,525 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:12,525 TRACE [want] signal: Want
2020-03-29 20:15:12,525 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:12,525 TRACE [want] signal: Want
2020-03-29 20:15:12,525 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:12,525 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,525 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,525 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:12,525 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:12,525 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:12,526 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:12,526 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:12,526 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:12,526 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(138))
2020-03-29 20:15:12,526 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:12,526 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(138))
2020-03-29 20:15:12,526 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:12,526 TRACE [want] signal: Closed
2020-03-29 20:15:12,526 TRACE [reqwest::blocking::client] (ThreadId(138)) Receiver is shutdown
2020-03-29 20:15:12,526 TRACE [reqwest::blocking::client] (ThreadId(138)) end runtime::block_on
2020-03-29 20:15:12,527 TRACE [reqwest::blocking::client] (ThreadId(138)) finished
2020-03-29 20:15:12,527 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(138))
2020-03-29 20:15:12,527 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:12,527 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:12,527 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:12,527 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:12,527 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,745 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,768 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:12,768 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:12,768 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:12,768 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:12,768 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 112, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:12,768 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:12,768 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 112, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:12,768 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:12,768 TRACE [mio::poll] registering with poller
2020-03-29 20:15:12,769 TRACE [reqwest::blocking::client] (ThreadId(139)) start runtime::block_on
2020-03-29 20:15:12,781 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:12,781 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999995732s
2020-03-29 20:15:12,781 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,781 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:12,781 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:12,781 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:12,781 TRACE [mio::poll] registering with poller
2020-03-29 20:15:12,781 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:12,782 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:12,782 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:12,782 TRACE [want] signal: Want
2020-03-29 20:15:12,782 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:12,782 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:12,782 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:12,782 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,782 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:12,782 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:12,782 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:12,782 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:12,782 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:12,782 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:12,785 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:12,785 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:12,786 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:12,786 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:12,786 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:12,786 TRACE [want] signal: Want
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:12,786 TRACE [want] signal: Want
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:12,786 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,786 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:12,786 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:12,786 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:12,786 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:12,786 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(139))
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:12,786 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(139))
2020-03-29 20:15:12,786 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:12,787 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:12,787 TRACE [want] signal: Closed
2020-03-29 20:15:12,787 TRACE [reqwest::blocking::client] (ThreadId(139)) Receiver is shutdown
2020-03-29 20:15:12,787 TRACE [reqwest::blocking::client] (ThreadId(139)) end runtime::block_on
2020-03-29 20:15:12,787 TRACE [reqwest::blocking::client] (ThreadId(139)) finished
2020-03-29 20:15:12,787 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(139))
2020-03-29 20:15:12,787 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:12,788 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:12,788 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:12,788 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:12,788 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,001 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,030 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,030 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,030 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,030 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:13,031 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 113, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:13,031 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:13,031 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 113, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:13,031 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:13,031 TRACE [mio::poll] registering with poller
2020-03-29 20:15:13,032 TRACE [reqwest::blocking::client] (ThreadId(140)) start runtime::block_on
2020-03-29 20:15:13,043 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:13,043 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999989941s
2020-03-29 20:15:13,043 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,043 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:13,043 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:13,044 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:13,044 TRACE [mio::poll] registering with poller
2020-03-29 20:15:13,044 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:13,044 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:13,044 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:13,044 TRACE [want] signal: Want
2020-03-29 20:15:13,044 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:13,044 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:13,044 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:13,044 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,044 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:13,044 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:13,044 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:13,044 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:13,044 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:13,044 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:13,049 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:13,049 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:13,049 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:13,049 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:13,049 TRACE [want] signal: Want
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:13,049 TRACE [want] signal: Want
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:13,049 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,049 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,049 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:13,049 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:13,049 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:13,049 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:13,050 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:13,050 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(140))
2020-03-29 20:15:13,050 TRACE [want] signal: Closed
2020-03-29 20:15:13,050 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(140))
2020-03-29 20:15:13,050 TRACE [reqwest::blocking::client] (ThreadId(140)) Receiver is shutdown
2020-03-29 20:15:13,050 TRACE [reqwest::blocking::client] (ThreadId(140)) end runtime::block_on
2020-03-29 20:15:13,050 TRACE [reqwest::blocking::client] (ThreadId(140)) finished
2020-03-29 20:15:13,050 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(140))
2020-03-29 20:15:13,051 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:13,051 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:13,051 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,051 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,051 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,258 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,292 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,293 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,293 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,293 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:13,293 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 114, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:13,293 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:13,293 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 114, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:13,293 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:13,294 TRACE [mio::poll] registering with poller
2020-03-29 20:15:13,294 TRACE [reqwest::blocking::client] (ThreadId(141)) start runtime::block_on
2020-03-29 20:15:13,305 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:13,305 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990843s
2020-03-29 20:15:13,305 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,305 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:13,306 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:13,306 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:13,306 TRACE [mio::poll] registering with poller
2020-03-29 20:15:13,306 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:13,306 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:13,306 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:13,306 TRACE [want] signal: Want
2020-03-29 20:15:13,307 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:13,307 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:13,307 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:13,307 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,307 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:13,307 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:13,307 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:13,307 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:13,308 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:13,308 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:13,312 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:13,312 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:13,312 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:13,312 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:13,312 TRACE [want] signal: Want
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:13,312 TRACE [want] signal: Want
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:13,312 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,312 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,312 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:13,312 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:13,312 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:13,312 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:13,313 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:13,313 TRACE [want] signal: Closed
2020-03-29 20:15:13,313 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(141))
2020-03-29 20:15:13,313 TRACE [reqwest::blocking::client] (ThreadId(141)) Receiver is shutdown
2020-03-29 20:15:13,313 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(141))
2020-03-29 20:15:13,313 TRACE [reqwest::blocking::client] (ThreadId(141)) end runtime::block_on
2020-03-29 20:15:13,313 TRACE [reqwest::blocking::client] (ThreadId(141)) finished
2020-03-29 20:15:13,313 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(141))
2020-03-29 20:15:13,314 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:13,314 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:13,314 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,314 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,314 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,513 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,555 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,555 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,555 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,556 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:13,556 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 115, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:13,556 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:13,556 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 115, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:13,556 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:13,556 TRACE [mio::poll] registering with poller
2020-03-29 20:15:13,557 TRACE [reqwest::blocking::client] (ThreadId(142)) start runtime::block_on
2020-03-29 20:15:13,568 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:13,568 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991845s
2020-03-29 20:15:13,568 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,568 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:13,568 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:13,568 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:13,568 TRACE [mio::poll] registering with poller
2020-03-29 20:15:13,569 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:13,569 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:13,569 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:13,569 TRACE [want] signal: Want
2020-03-29 20:15:13,569 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:13,569 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:13,569 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:13,569 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,570 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:13,570 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:13,570 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:13,570 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:13,570 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:13,570 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:13,574 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:13,574 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:13,574 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:13,574 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:13,575 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:13,575 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:13,575 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:13,575 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:13,575 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:13,575 TRACE [want] signal: Want
2020-03-29 20:15:13,575 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:13,575 TRACE [want] signal: Want
2020-03-29 20:15:13,575 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:13,575 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,575 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,575 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:13,575 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:13,575 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:13,575 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:13,575 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:13,575 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(142))
2020-03-29 20:15:13,575 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:13,575 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(142))
2020-03-29 20:15:13,575 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:13,575 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:13,575 TRACE [want] signal: Closed
2020-03-29 20:15:13,576 TRACE [reqwest::blocking::client] (ThreadId(142)) Receiver is shutdown
2020-03-29 20:15:13,576 TRACE [reqwest::blocking::client] (ThreadId(142)) end runtime::block_on
2020-03-29 20:15:13,576 TRACE [reqwest::blocking::client] (ThreadId(142)) finished
2020-03-29 20:15:13,576 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(142))
2020-03-29 20:15:13,576 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:13,576 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:13,577 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,577 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,577 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,635 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,635 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,636 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,769 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,817 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:13,817 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,817 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,817 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:13,818 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 116, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:13,818 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:13,818 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 116, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:13,818 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:13,818 TRACE [mio::poll] registering with poller
2020-03-29 20:15:13,819 TRACE [reqwest::blocking::client] (ThreadId(143)) start runtime::block_on
2020-03-29 20:15:13,830 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:13,830 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990713s
2020-03-29 20:15:13,830 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,830 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:13,830 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:13,830 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:13,830 TRACE [mio::poll] registering with poller
2020-03-29 20:15:13,830 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:13,831 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:13,831 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:13,831 TRACE [want] signal: Want
2020-03-29 20:15:13,831 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:13,831 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:13,831 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:13,831 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,831 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:13,831 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:13,831 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:13,831 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:13,831 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:13,831 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:13,835 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:13,835 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:13,835 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:13,835 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:13,836 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:13,836 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:13,836 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:13,836 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:13,836 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:13,836 TRACE [want] signal: Want
2020-03-29 20:15:13,836 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:13,836 TRACE [want] signal: Want
2020-03-29 20:15:13,836 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:13,836 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,836 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:13,836 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:13,836 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:13,836 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:13,836 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:13,836 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:13,836 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:13,836 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:13,836 TRACE [want] signal: Closed
2020-03-29 20:15:13,836 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:13,837 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(143))
2020-03-29 20:15:13,837 TRACE [reqwest::blocking::client] (ThreadId(143)) Receiver is shutdown
2020-03-29 20:15:13,837 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(143))
2020-03-29 20:15:13,837 TRACE [reqwest::blocking::client] (ThreadId(143)) end runtime::block_on
2020-03-29 20:15:13,837 TRACE [reqwest::blocking::client] (ThreadId(143)) finished
2020-03-29 20:15:13,837 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(143))
2020-03-29 20:15:13,837 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:13,838 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:13,838 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:13,838 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:13,838 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,025 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,079 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,079 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:14,079 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:14,079 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:14,079 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 117, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:14,079 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:14,079 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 117, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:14,080 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:14,080 TRACE [mio::poll] registering with poller
2020-03-29 20:15:14,080 TRACE [reqwest::blocking::client] (ThreadId(144)) start runtime::block_on
2020-03-29 20:15:14,093 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:14,093 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991795s
2020-03-29 20:15:14,093 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,093 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:14,093 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:14,093 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:14,094 TRACE [mio::poll] registering with poller
2020-03-29 20:15:14,094 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:14,094 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:14,094 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:14,094 TRACE [want] signal: Want
2020-03-29 20:15:14,094 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:14,094 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:14,094 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:14,094 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,094 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:14,094 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:14,094 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:14,094 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:14,094 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:14,094 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:14,098 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:14,098 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:14,099 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:14,099 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:14,099 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:14,099 TRACE [want] signal: Want
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:14,099 TRACE [want] signal: Want
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:14,099 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,099 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,099 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:14,099 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:14,099 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:14,099 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:14,099 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(144))
2020-03-29 20:15:14,099 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:14,099 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(144))
2020-03-29 20:15:14,099 TRACE [want] signal: Closed
2020-03-29 20:15:14,100 TRACE [reqwest::blocking::client] (ThreadId(144)) Receiver is shutdown
2020-03-29 20:15:14,100 TRACE [reqwest::blocking::client] (ThreadId(144)) end runtime::block_on
2020-03-29 20:15:14,100 TRACE [reqwest::blocking::client] (ThreadId(144)) finished
2020-03-29 20:15:14,100 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(144))
2020-03-29 20:15:14,100 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:14,100 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:14,101 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:14,101 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:14,101 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,282 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,341 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,341 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:14,342 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:14,342 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:14,342 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 118, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:14,342 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:14,342 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 118, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:14,342 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:14,342 TRACE [mio::poll] registering with poller
2020-03-29 20:15:14,343 TRACE [reqwest::blocking::client] (ThreadId(145)) start runtime::block_on
2020-03-29 20:15:14,354 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:14,354 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990963s
2020-03-29 20:15:14,354 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,354 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:14,354 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:14,354 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:14,355 TRACE [mio::poll] registering with poller
2020-03-29 20:15:14,355 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:14,355 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:14,355 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:14,355 TRACE [want] signal: Want
2020-03-29 20:15:14,355 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:14,355 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:14,355 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:14,355 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,356 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:14,356 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:14,356 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:14,356 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:14,356 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:14,356 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:14,360 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:14,360 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:14,360 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:14,360 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:14,361 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:14,361 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:14,361 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:14,361 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:14,361 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:14,361 TRACE [want] signal: Want
2020-03-29 20:15:14,361 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:14,361 TRACE [want] signal: Want
2020-03-29 20:15:14,361 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:14,361 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,361 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,361 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:14,361 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:14,361 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:14,361 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:14,361 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:14,361 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:14,361 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:14,361 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(145))
2020-03-29 20:15:14,361 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:14,361 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(145))
2020-03-29 20:15:14,361 TRACE [want] signal: Closed
2020-03-29 20:15:14,362 TRACE [reqwest::blocking::client] (ThreadId(145)) Receiver is shutdown
2020-03-29 20:15:14,362 TRACE [reqwest::blocking::client] (ThreadId(145)) end runtime::block_on
2020-03-29 20:15:14,362 TRACE [reqwest::blocking::client] (ThreadId(145)) finished
2020-03-29 20:15:14,362 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(145))
2020-03-29 20:15:14,362 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:14,363 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:14,363 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:14,363 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:14,363 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,601 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,603 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,603 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:14,604 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:14,604 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:14,604 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 119, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:14,604 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:14,604 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 119, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:14,604 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:14,604 TRACE [mio::poll] registering with poller
2020-03-29 20:15:14,605 TRACE [reqwest::blocking::client] (ThreadId(146)) start runtime::block_on
2020-03-29 20:15:14,616 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:14,616 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990923s
2020-03-29 20:15:14,616 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,616 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:14,616 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:14,616 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:14,617 TRACE [mio::poll] registering with poller
2020-03-29 20:15:14,617 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:14,617 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:14,617 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:14,617 TRACE [want] signal: Want
2020-03-29 20:15:14,617 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:14,617 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:14,617 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:14,617 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,617 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:14,617 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:14,617 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:14,617 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:14,617 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:14,617 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:14,622 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:14,622 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:14,622 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:14,622 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:14,622 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:14,622 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:14,622 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:14,622 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:14,622 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:14,622 TRACE [want] signal: Want
2020-03-29 20:15:14,622 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:14,622 TRACE [want] signal: Want
2020-03-29 20:15:14,622 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:14,622 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,622 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,622 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:14,623 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:14,623 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:14,623 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:14,623 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:14,623 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:14,623 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:14,623 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(146))
2020-03-29 20:15:14,623 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:14,623 TRACE [want] signal: Closed
2020-03-29 20:15:14,623 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(146))
2020-03-29 20:15:14,623 TRACE [reqwest::blocking::client] (ThreadId(146)) Receiver is shutdown
2020-03-29 20:15:14,624 TRACE [reqwest::blocking::client] (ThreadId(146)) end runtime::block_on
2020-03-29 20:15:14,624 TRACE [reqwest::blocking::client] (ThreadId(146)) finished
2020-03-29 20:15:14,624 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(146))
2020-03-29 20:15:14,624 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:14,624 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:14,624 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:14,624 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:14,624 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,857 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,866 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:14,867 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:14,867 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:14,867 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:14,867 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 120, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:14,867 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:14,867 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 120, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:14,867 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:14,867 TRACE [mio::poll] registering with poller
2020-03-29 20:15:14,868 TRACE [reqwest::blocking::client] (ThreadId(147)) start runtime::block_on
2020-03-29 20:15:14,879 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:14,879 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991124s
2020-03-29 20:15:14,879 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,879 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:14,879 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:14,879 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:14,880 TRACE [mio::poll] registering with poller
2020-03-29 20:15:14,880 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:14,880 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:14,880 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:14,880 TRACE [want] signal: Want
2020-03-29 20:15:14,880 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:14,880 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:14,880 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:14,880 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,880 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:14,880 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:14,880 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:14,880 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:14,880 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:14,880 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:14,884 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:14,885 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:14,885 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:14,885 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:14,885 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:14,885 TRACE [want] signal: Want
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:14,885 TRACE [want] signal: Want
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:14,885 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,885 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:14,885 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:14,885 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:14,885 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:14,885 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(147))
2020-03-29 20:15:14,885 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:14,886 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:14,886 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(147))
2020-03-29 20:15:14,886 TRACE [want] signal: Closed
2020-03-29 20:15:14,886 TRACE [reqwest::blocking::client] (ThreadId(147)) Receiver is shutdown
2020-03-29 20:15:14,886 TRACE [reqwest::blocking::client] (ThreadId(147)) end runtime::block_on
2020-03-29 20:15:14,886 TRACE [reqwest::blocking::client] (ThreadId(147)) finished
2020-03-29 20:15:14,886 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(147))
2020-03-29 20:15:14,887 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:14,887 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:14,887 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:14,887 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:14,887 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,114 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,129 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,130 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:15,130 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:15,130 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:15,130 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 121, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:15,130 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:15,130 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 121, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:15,130 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:15,131 TRACE [mio::poll] registering with poller
2020-03-29 20:15:15,131 TRACE [reqwest::blocking::client] (ThreadId(148)) start runtime::block_on
2020-03-29 20:15:15,142 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:15,142 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991123s
2020-03-29 20:15:15,142 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,142 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:15,142 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:15,143 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:15,143 TRACE [mio::poll] registering with poller
2020-03-29 20:15:15,143 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:15,143 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:15,143 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:15,143 TRACE [want] signal: Want
2020-03-29 20:15:15,143 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:15,143 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:15,143 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:15,143 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,143 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:15,143 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:15,143 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:15,143 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:15,143 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:15,143 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:15,150 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:15,150 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:15,150 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:15,150 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:15,150 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:15,150 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:15,150 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:15,150 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:15,150 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:15,150 TRACE [want] signal: Want
2020-03-29 20:15:15,150 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:15,150 TRACE [want] signal: Want
2020-03-29 20:15:15,150 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:15,150 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,150 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,150 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:15,150 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:15,151 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:15,151 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(148))
2020-03-29 20:15:15,151 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:15,151 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(148))
2020-03-29 20:15:15,151 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:15,151 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:15,151 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:15,151 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:15,151 TRACE [want] signal: Closed
2020-03-29 20:15:15,151 TRACE [reqwest::blocking::client] (ThreadId(148)) Receiver is shutdown
2020-03-29 20:15:15,153 TRACE [reqwest::blocking::client] (ThreadId(148)) end runtime::block_on
2020-03-29 20:15:15,153 TRACE [reqwest::blocking::client] (ThreadId(148)) finished
2020-03-29 20:15:15,153 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(148))
2020-03-29 20:15:15,153 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:15,153 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:15,153 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:15,154 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:15,154 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,369 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,392 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,392 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:15,392 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:15,393 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:15,393 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 122, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:15,393 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:15,393 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 122, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:15,393 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:15,393 TRACE [mio::poll] registering with poller
2020-03-29 20:15:15,394 TRACE [reqwest::blocking::client] (ThreadId(149)) start runtime::block_on
2020-03-29 20:15:15,405 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:15,405 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.99998937s
2020-03-29 20:15:15,405 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,405 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:15,405 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:15,405 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:15,406 TRACE [mio::poll] registering with poller
2020-03-29 20:15:15,406 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:15,406 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:15,406 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:15,406 TRACE [want] signal: Want
2020-03-29 20:15:15,406 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:15,406 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:15,406 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:15,407 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,407 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:15,407 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:15,407 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:15,407 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:15,407 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:15,407 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:15,411 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:15,411 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:15,412 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:15,412 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:15,412 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:15,412 TRACE [want] signal: Want
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:15,412 TRACE [want] signal: Want
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:15,412 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,412 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,412 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:15,412 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:15,412 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:15,412 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:15,412 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:15,412 TRACE [want] signal: Closed
2020-03-29 20:15:15,412 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(149))
2020-03-29 20:15:15,412 TRACE [reqwest::blocking::client] (ThreadId(149)) Receiver is shutdown
2020-03-29 20:15:15,412 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(149))
2020-03-29 20:15:15,413 TRACE [reqwest::blocking::client] (ThreadId(149)) end runtime::block_on
2020-03-29 20:15:15,413 TRACE [reqwest::blocking::client] (ThreadId(149)) finished
2020-03-29 20:15:15,413 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(149))
2020-03-29 20:15:15,413 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:15,413 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:15,414 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:15,414 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:15,414 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,497 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,625 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,654 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,655 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:15,655 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:15,655 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:15,655 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 123, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:15,655 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:15,655 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 123, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:15,655 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:15,656 TRACE [mio::poll] registering with poller
2020-03-29 20:15:15,656 TRACE [reqwest::blocking::client] (ThreadId(150)) start runtime::block_on
2020-03-29 20:15:15,667 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:15,667 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990512s
2020-03-29 20:15:15,667 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,668 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:15,668 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:15,668 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:15,668 TRACE [mio::poll] registering with poller
2020-03-29 20:15:15,668 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:15,668 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:15,668 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:15,668 TRACE [want] signal: Want
2020-03-29 20:15:15,668 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:15,668 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:15,668 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:15,668 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,668 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:15,668 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:15,668 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:15,668 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:15,669 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:15,669 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:15,673 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:15,673 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:15,673 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:15,673 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:15,673 TRACE [want] signal: Want
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:15,673 TRACE [want] signal: Want
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:15,673 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,673 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,673 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:15,673 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:15,673 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:15,673 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:15,674 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:15,674 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:15,674 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:15,674 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(150))
2020-03-29 20:15:15,674 TRACE [want] signal: Closed
2020-03-29 20:15:15,674 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(150))
2020-03-29 20:15:15,674 TRACE [reqwest::blocking::client] (ThreadId(150)) Receiver is shutdown
2020-03-29 20:15:15,674 TRACE [reqwest::blocking::client] (ThreadId(150)) end runtime::block_on
2020-03-29 20:15:15,674 TRACE [reqwest::blocking::client] (ThreadId(150)) finished
2020-03-29 20:15:15,675 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(150))
2020-03-29 20:15:15,675 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:15,675 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:15,675 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:15,675 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:15,675 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,881 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,917 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:15,918 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:15,918 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:15,918 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:15,918 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 124, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:15,918 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:15,918 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 124, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:15,918 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:15,918 TRACE [mio::poll] registering with poller
2020-03-29 20:15:15,919 TRACE [reqwest::blocking::client] (ThreadId(151)) start runtime::block_on
2020-03-29 20:15:15,930 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:15,930 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991234s
2020-03-29 20:15:15,930 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,930 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:15,930 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:15,930 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:15,930 TRACE [mio::poll] registering with poller
2020-03-29 20:15:15,930 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:15,931 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:15,931 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:15,931 TRACE [want] signal: Want
2020-03-29 20:15:15,931 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:15,931 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:15,931 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:15,931 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,931 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:15,931 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:15,931 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:15,931 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:15,931 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:15,931 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:15,936 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:15,936 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:15,936 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:15,936 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:15,936 TRACE [want] signal: Want
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:15,936 TRACE [want] signal: Want
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:15,936 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,936 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:15,936 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:15,936 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:15,936 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:15,936 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:15,937 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:15,937 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(151))
2020-03-29 20:15:15,937 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:15,937 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(151))
2020-03-29 20:15:15,937 TRACE [want] signal: Closed
2020-03-29 20:15:15,937 TRACE [reqwest::blocking::client] (ThreadId(151)) Receiver is shutdown
2020-03-29 20:15:15,937 TRACE [reqwest::blocking::client] (ThreadId(151)) end runtime::block_on
2020-03-29 20:15:15,937 TRACE [reqwest::blocking::client] (ThreadId(151)) finished
2020-03-29 20:15:15,938 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(151))
2020-03-29 20:15:15,938 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:15,938 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:15,938 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:15,938 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:15,938 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,138 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,180 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,181 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:16,181 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:16,181 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:16,181 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 125, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:16,181 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:16,181 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 125, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:16,182 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:16,182 TRACE [mio::poll] registering with poller
2020-03-29 20:15:16,182 TRACE [reqwest::blocking::client] (ThreadId(152)) start runtime::block_on
2020-03-29 20:15:16,193 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:16,193 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991013s
2020-03-29 20:15:16,193 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,194 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:16,194 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:16,194 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:16,194 TRACE [mio::poll] registering with poller
2020-03-29 20:15:16,194 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:16,194 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:16,194 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:16,194 TRACE [want] signal: Want
2020-03-29 20:15:16,194 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:16,194 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:16,194 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:16,194 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,194 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:16,194 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:16,194 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:16,194 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:16,195 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:16,195 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:16,199 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:16,199 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:16,199 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:16,199 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:16,199 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:16,199 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:16,199 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:16,199 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:16,199 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:16,199 TRACE [want] signal: Want
2020-03-29 20:15:16,199 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:16,199 TRACE [want] signal: Want
2020-03-29 20:15:16,199 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:16,199 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,199 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,199 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:16,200 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:16,200 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:16,200 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:16,200 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:16,200 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:16,200 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:16,200 TRACE [want] signal: Closed
2020-03-29 20:15:16,200 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:16,200 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(152))
2020-03-29 20:15:16,200 TRACE [reqwest::blocking::client] (ThreadId(152)) Receiver is shutdown
2020-03-29 20:15:16,200 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(152))
2020-03-29 20:15:16,201 TRACE [reqwest::blocking::client] (ThreadId(152)) end runtime::block_on
2020-03-29 20:15:16,201 TRACE [reqwest::blocking::client] (ThreadId(152)) finished
2020-03-29 20:15:16,201 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(152))
2020-03-29 20:15:16,201 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:16,201 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:16,201 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:16,201 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:16,201 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,394 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,443 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,444 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:16,444 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:16,444 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:16,444 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 126, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:16,444 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:16,444 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 126, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:16,445 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:16,445 TRACE [mio::poll] registering with poller
2020-03-29 20:15:16,445 TRACE [reqwest::blocking::client] (ThreadId(153)) start runtime::block_on
2020-03-29 20:15:16,456 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:16,456 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992155s
2020-03-29 20:15:16,456 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,456 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:16,456 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:16,456 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:16,456 TRACE [mio::poll] registering with poller
2020-03-29 20:15:16,456 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:16,457 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:16,457 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:16,457 TRACE [want] signal: Want
2020-03-29 20:15:16,457 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:16,457 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:16,457 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:16,457 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,457 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:16,457 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:16,457 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:16,457 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:16,457 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:16,457 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:16,461 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:16,461 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:16,461 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:16,461 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:16,461 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:16,461 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:16,461 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:16,461 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:16,461 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:16,462 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:16,462 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:16,462 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:16,462 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:16,462 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:16,462 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:16,462 TRACE [want] signal: Closed
2020-03-29 20:15:16,462 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:16,462 TRACE [want] poll_want: closed
2020-03-29 20:15:16,462 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:16,462 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(153))
2020-03-29 20:15:16,462 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(153))
2020-03-29 20:15:16,462 TRACE [reqwest::blocking::client] (ThreadId(153)) Receiver is shutdown
2020-03-29 20:15:16,463 TRACE [reqwest::blocking::client] (ThreadId(153)) end runtime::block_on
2020-03-29 20:15:16,463 TRACE [reqwest::blocking::client] (ThreadId(153)) finished
2020-03-29 20:15:16,463 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(153))
2020-03-29 20:15:16,463 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:16,464 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:16,464 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:16,464 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:16,464 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,650 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,706 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,707 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:16,707 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:16,707 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:16,707 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 127, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:16,707 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:16,707 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 127, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:16,707 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:16,707 TRACE [mio::poll] registering with poller
2020-03-29 20:15:16,708 TRACE [reqwest::blocking::client] (ThreadId(154)) start runtime::block_on
2020-03-29 20:15:16,719 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:16,719 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991745s
2020-03-29 20:15:16,719 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,719 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:16,719 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:16,719 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:16,720 TRACE [mio::poll] registering with poller
2020-03-29 20:15:16,720 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:16,720 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:16,720 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:16,720 TRACE [want] signal: Want
2020-03-29 20:15:16,720 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:16,720 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:16,720 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:16,720 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,720 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:16,720 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:16,720 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:16,720 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:16,720 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:16,720 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:16,724 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:16,724 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:16,724 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:16,724 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:16,725 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:16,725 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:16,725 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:16,725 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:16,725 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:16,725 TRACE [want] signal: Want
2020-03-29 20:15:16,725 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:16,725 TRACE [want] signal: Want
2020-03-29 20:15:16,725 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:16,725 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,725 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,725 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:16,725 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:16,725 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:16,725 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:16,725 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:16,725 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:16,725 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:16,725 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:16,725 TRACE [want] signal: Closed
2020-03-29 20:15:16,725 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(154))
2020-03-29 20:15:16,725 TRACE [reqwest::blocking::client] (ThreadId(154)) Receiver is shutdown
2020-03-29 20:15:16,725 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(154))
2020-03-29 20:15:16,726 TRACE [reqwest::blocking::client] (ThreadId(154)) end runtime::block_on
2020-03-29 20:15:16,726 TRACE [reqwest::blocking::client] (ThreadId(154)) finished
2020-03-29 20:15:16,726 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(154))
2020-03-29 20:15:16,726 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:16,726 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:16,727 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:16,727 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:16,727 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,969 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:16,970 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:16,970 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:16,970 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:16,970 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 128, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:16,970 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:16,970 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 128, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:16,970 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:16,970 TRACE [mio::poll] registering with poller
2020-03-29 20:15:16,971 TRACE [reqwest::blocking::client] (ThreadId(155)) start runtime::block_on
2020-03-29 20:15:16,982 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:16,982 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991564s
2020-03-29 20:15:16,982 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,982 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:16,982 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:16,982 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:16,983 TRACE [mio::poll] registering with poller
2020-03-29 20:15:16,983 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:16,983 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:16,983 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:16,983 TRACE [want] signal: Want
2020-03-29 20:15:16,983 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:16,983 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:16,983 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:16,983 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,984 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:16,984 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:16,984 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:16,984 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:16,984 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:16,984 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:16,988 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:16,988 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:16,988 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:16,988 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:16,988 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:16,988 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:16,988 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:16,988 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:16,988 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:16,988 TRACE [want] signal: Want
2020-03-29 20:15:16,988 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:16,988 TRACE [want] signal: Want
2020-03-29 20:15:16,988 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:16,989 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,989 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:16,989 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:16,989 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:16,989 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:16,989 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:16,989 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:16,989 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:16,989 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:16,989 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:16,989 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(155))
2020-03-29 20:15:16,989 TRACE [want] signal: Closed
2020-03-29 20:15:16,989 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(155))
2020-03-29 20:15:16,989 TRACE [reqwest::blocking::client] (ThreadId(155)) Receiver is shutdown
2020-03-29 20:15:16,990 TRACE [reqwest::blocking::client] (ThreadId(155)) end runtime::block_on
2020-03-29 20:15:16,990 TRACE [reqwest::blocking::client] (ThreadId(155)) finished
2020-03-29 20:15:16,990 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(155))
2020-03-29 20:15:16,990 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:16,990 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:16,990 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:16,990 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:16,990 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,225 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,232 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,233 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:17,233 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:17,233 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:17,233 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 129, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:17,233 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:17,233 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 129, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:17,233 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:17,234 TRACE [mio::poll] registering with poller
2020-03-29 20:15:17,234 TRACE [reqwest::blocking::client] (ThreadId(156)) start runtime::block_on
2020-03-29 20:15:17,245 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:17,245 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991765s
2020-03-29 20:15:17,245 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,245 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:17,246 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:17,246 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:17,246 TRACE [mio::poll] registering with poller
2020-03-29 20:15:17,246 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:17,246 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:17,246 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:17,246 TRACE [want] signal: Want
2020-03-29 20:15:17,246 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:17,246 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:17,246 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:17,246 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,246 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:17,246 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:17,246 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:17,246 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:17,246 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:17,246 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:17,251 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:17,251 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:17,251 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:17,251 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:17,251 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:17,251 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:17,251 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:17,251 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:17,251 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:17,251 TRACE [want] signal: Want
2020-03-29 20:15:17,251 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:17,251 TRACE [want] signal: Want
2020-03-29 20:15:17,251 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:17,252 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,252 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,252 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:17,252 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:17,252 TRACE [want] signal: Want
2020-03-29 20:15:17,252 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(156))
2020-03-29 20:15:17,252 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:17,252 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(156))
2020-03-29 20:15:17,252 TRACE [reqwest::blocking::client] (ThreadId(156)) Receiver is shutdown
2020-03-29 20:15:17,253 TRACE [reqwest::blocking::client] (ThreadId(156)) end runtime::block_on
2020-03-29 20:15:17,253 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:17,253 TRACE [want] signal: Closed
2020-03-29 20:15:17,253 TRACE [reqwest::blocking::client] (ThreadId(156)) finished
2020-03-29 20:15:17,253 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(156))
2020-03-29 20:15:17,253 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:17,253 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:17,253 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:17,253 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:17,254 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,481 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,495 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,496 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:17,496 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:17,496 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:17,496 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 130, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:17,496 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:17,496 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 130, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:17,496 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:17,497 TRACE [mio::poll] registering with poller
2020-03-29 20:15:17,497 TRACE [reqwest::blocking::client] (ThreadId(157)) start runtime::block_on
2020-03-29 20:15:17,509 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:17,509 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991074s
2020-03-29 20:15:17,509 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,509 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:17,509 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:17,509 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:17,510 TRACE [mio::poll] registering with poller
2020-03-29 20:15:17,510 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:17,510 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:17,510 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:17,510 TRACE [want] signal: Want
2020-03-29 20:15:17,510 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:17,510 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:17,510 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:17,511 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,511 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:17,511 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:17,511 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:17,511 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:17,511 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:17,511 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:17,515 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:17,515 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:17,515 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:17,515 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:17,515 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:17,515 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:17,515 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:17,515 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:17,516 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:17,516 TRACE [want] signal: Want
2020-03-29 20:15:17,516 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:17,516 TRACE [want] signal: Want
2020-03-29 20:15:17,516 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:17,516 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,516 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,516 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:17,516 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:17,516 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:17,516 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:17,516 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:17,516 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:17,516 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:17,516 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(157))
2020-03-29 20:15:17,516 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:17,516 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(157))
2020-03-29 20:15:17,516 TRACE [want] signal: Closed
2020-03-29 20:15:17,516 TRACE [reqwest::blocking::client] (ThreadId(157)) Receiver is shutdown
2020-03-29 20:15:17,517 TRACE [reqwest::blocking::client] (ThreadId(157)) end runtime::block_on
2020-03-29 20:15:17,517 TRACE [reqwest::blocking::client] (ThreadId(157)) finished
2020-03-29 20:15:17,517 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(157))
2020-03-29 20:15:17,517 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:17,517 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:17,517 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:17,517 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:17,518 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,737 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,758 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,759 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:17,759 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:17,759 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:17,759 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 131, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:17,759 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:17,759 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 131, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:17,759 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:17,760 TRACE [mio::poll] registering with poller
2020-03-29 20:15:17,760 TRACE [reqwest::blocking::client] (ThreadId(158)) start runtime::block_on
2020-03-29 20:15:17,770 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:17,771 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,771 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990722s
2020-03-29 20:15:17,771 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:17,771 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:17,771 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:17,771 TRACE [mio::poll] registering with poller
2020-03-29 20:15:17,771 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:17,771 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:17,771 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:17,771 TRACE [want] signal: Want
2020-03-29 20:15:17,771 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:17,771 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:17,771 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:17,771 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,771 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:17,771 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:17,771 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:17,772 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:17,772 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:17,772 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:17,776 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:17,776 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:17,776 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:17,776 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:17,776 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:17,776 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:17,776 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:17,776 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:17,776 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:17,776 TRACE [want] signal: Want
2020-03-29 20:15:17,776 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:17,776 TRACE [want] signal: Want
2020-03-29 20:15:17,776 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:17,777 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,777 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:17,777 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:17,777 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:17,777 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:17,777 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:17,777 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:17,777 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:17,777 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(158))
2020-03-29 20:15:17,777 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:17,777 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(158))
2020-03-29 20:15:17,777 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:17,777 TRACE [want] signal: Closed
2020-03-29 20:15:17,777 TRACE [reqwest::blocking::client] (ThreadId(158)) Receiver is shutdown
2020-03-29 20:15:17,778 TRACE [reqwest::blocking::client] (ThreadId(158)) end runtime::block_on
2020-03-29 20:15:17,778 TRACE [reqwest::blocking::client] (ThreadId(158)) finished
2020-03-29 20:15:17,778 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(158))
2020-03-29 20:15:17,778 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:17,778 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:17,778 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:17,778 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:17,778 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:17,993 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,021 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,021 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,021 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,021 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:18,021 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 132, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:18,022 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:18,022 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 132, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:18,022 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:18,022 TRACE [mio::poll] registering with poller
2020-03-29 20:15:18,023 TRACE [reqwest::blocking::client] (ThreadId(159)) start runtime::block_on
2020-03-29 20:15:18,034 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:18,034 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991043s
2020-03-29 20:15:18,034 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,034 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:18,034 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:18,034 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:18,034 TRACE [mio::poll] registering with poller
2020-03-29 20:15:18,034 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:18,034 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:18,034 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:18,034 TRACE [want] signal: Want
2020-03-29 20:15:18,035 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:18,035 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:18,035 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:18,035 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,035 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:18,035 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:18,035 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:18,035 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:18,035 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:18,035 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:18,039 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:18,039 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:18,039 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:18,039 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:18,040 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:18,040 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:18,040 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:18,040 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:18,040 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:18,040 TRACE [want] signal: Want
2020-03-29 20:15:18,040 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:18,040 TRACE [want] signal: Want
2020-03-29 20:15:18,040 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:18,040 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,040 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,040 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:18,040 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:18,040 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:18,040 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:18,040 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:18,040 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:18,040 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:18,040 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:18,040 TRACE [want] signal: Closed
2020-03-29 20:15:18,040 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(159))
2020-03-29 20:15:18,040 TRACE [reqwest::blocking::client] (ThreadId(159)) Receiver is shutdown
2020-03-29 20:15:18,040 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(159))
2020-03-29 20:15:18,041 TRACE [reqwest::blocking::client] (ThreadId(159)) end runtime::block_on
2020-03-29 20:15:18,041 TRACE [reqwest::blocking::client] (ThreadId(159)) finished
2020-03-29 20:15:18,041 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(159))
2020-03-29 20:15:18,041 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:18,041 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:18,041 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,042 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,042 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,249 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,283 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,284 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,284 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,284 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:18,284 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 133, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:18,284 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:18,284 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 133, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:18,284 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:18,285 TRACE [mio::poll] registering with poller
2020-03-29 20:15:18,285 TRACE [reqwest::blocking::client] (ThreadId(160)) start runtime::block_on
2020-03-29 20:15:18,297 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:18,298 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991083s
2020-03-29 20:15:18,298 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,298 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:18,298 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:18,298 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:18,298 TRACE [mio::poll] registering with poller
2020-03-29 20:15:18,299 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:18,299 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:18,299 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:18,299 TRACE [want] signal: Want
2020-03-29 20:15:18,299 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:18,299 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:18,299 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:18,299 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,300 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:18,300 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:18,300 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:18,300 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:18,300 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:18,300 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:18,304 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:18,305 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:18,305 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:18,305 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:18,305 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:18,305 TRACE [want] signal: Want
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:18,305 TRACE [want] signal: Want
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:18,305 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,305 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,305 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:18,305 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:18,305 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:18,305 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:18,305 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:18,305 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(160))
2020-03-29 20:15:18,305 TRACE [want] signal: Closed
2020-03-29 20:15:18,306 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(160))
2020-03-29 20:15:18,306 TRACE [reqwest::blocking::client] (ThreadId(160)) Receiver is shutdown
2020-03-29 20:15:18,306 TRACE [reqwest::blocking::client] (ThreadId(160)) end runtime::block_on
2020-03-29 20:15:18,306 TRACE [reqwest::blocking::client] (ThreadId(160)) finished
2020-03-29 20:15:18,306 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(160))
2020-03-29 20:15:18,306 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:18,307 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:18,307 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,307 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,307 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,505 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,546 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,546 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,546 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,546 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:18,546 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 134, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:18,546 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:18,547 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 134, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:18,547 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:18,547 TRACE [mio::poll] registering with poller
2020-03-29 20:15:18,547 TRACE [reqwest::blocking::client] (ThreadId(161)) start runtime::block_on
2020-03-29 20:15:18,559 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:18,559 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,559 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992366s
2020-03-29 20:15:18,559 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:18,559 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:18,559 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:18,559 TRACE [mio::poll] registering with poller
2020-03-29 20:15:18,559 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:18,559 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:18,559 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:18,559 TRACE [want] signal: Want
2020-03-29 20:15:18,559 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:18,560 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:18,560 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:18,560 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,560 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:18,560 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:18,560 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:18,560 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:18,560 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:18,560 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:18,562 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:18,562 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:18,562 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:18,562 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:18,562 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:18,562 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:18,562 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:18,563 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:18,563 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:18,563 TRACE [want] signal: Want
2020-03-29 20:15:18,563 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:18,563 TRACE [want] signal: Want
2020-03-29 20:15:18,563 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:18,563 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,563 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,563 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:18,563 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:18,563 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:18,563 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:18,563 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:18,563 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:18,563 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:18,563 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:18,563 TRACE [want] signal: Closed
2020-03-29 20:15:18,563 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(161))
2020-03-29 20:15:18,563 TRACE [reqwest::blocking::client] (ThreadId(161)) Receiver is shutdown
2020-03-29 20:15:18,563 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(161))
2020-03-29 20:15:18,564 TRACE [reqwest::blocking::client] (ThreadId(161)) end runtime::block_on
2020-03-29 20:15:18,564 TRACE [reqwest::blocking::client] (ThreadId(161)) finished
2020-03-29 20:15:18,564 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(161))
2020-03-29 20:15:18,564 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:18,564 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:18,564 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,564 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,565 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,633 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,635 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,635 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,635 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,761 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,808 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:18,808 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,808 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,809 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:18,809 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 135, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:18,809 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:18,809 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 135, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:18,809 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:18,809 TRACE [mio::poll] registering with poller
2020-03-29 20:15:18,810 TRACE [reqwest::blocking::client] (ThreadId(162)) start runtime::block_on
2020-03-29 20:15:18,822 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:18,822 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,822 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999993137s
2020-03-29 20:15:18,822 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:18,822 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:18,822 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:18,822 TRACE [mio::poll] registering with poller
2020-03-29 20:15:18,822 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:18,822 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:18,822 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:18,822 TRACE [want] signal: Want
2020-03-29 20:15:18,822 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:18,822 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:18,822 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:18,822 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:18,822 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:18,823 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:18,823 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:18,823 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:18,823 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:18,823 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:18,825 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:18,825 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:18,825 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:18,825 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:18,825 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:18,825 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:18,825 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:18,825 TRACE [want] signal: Closed
2020-03-29 20:15:18,826 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:18,826 TRACE [want] poll_want: closed
2020-03-29 20:15:18,826 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:18,826 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(162))
2020-03-29 20:15:18,826 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(162))
2020-03-29 20:15:18,826 TRACE [reqwest::blocking::client] (ThreadId(162)) Receiver is shutdown
2020-03-29 20:15:18,826 TRACE [reqwest::blocking::client] (ThreadId(162)) end runtime::block_on
2020-03-29 20:15:18,827 TRACE [reqwest::blocking::client] (ThreadId(162)) finished
2020-03-29 20:15:18,827 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(162))
2020-03-29 20:15:18,827 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:18,827 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:18,827 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:18,827 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:18,827 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,018 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,070 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,070 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:19,071 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:19,071 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:19,071 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 136, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:19,071 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:19,071 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 136, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:19,071 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:19,071 TRACE [mio::poll] registering with poller
2020-03-29 20:15:19,072 TRACE [reqwest::blocking::client] (ThreadId(163)) start runtime::block_on
2020-03-29 20:15:19,083 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:19,083 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991184s
2020-03-29 20:15:19,083 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,083 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:19,083 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:19,083 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:19,083 TRACE [mio::poll] registering with poller
2020-03-29 20:15:19,083 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:19,083 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:19,083 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:19,083 TRACE [want] signal: Want
2020-03-29 20:15:19,083 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:19,084 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:19,084 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:19,084 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,084 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:19,084 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:19,084 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:19,084 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:19,084 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:19,084 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:19,088 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:19,088 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:19,088 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:19,088 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:19,088 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:19,088 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:19,089 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:19,089 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:19,089 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:19,089 TRACE [want] signal: Want
2020-03-29 20:15:19,089 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:19,089 TRACE [want] signal: Want
2020-03-29 20:15:19,089 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:19,089 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,089 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,089 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:19,089 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:19,089 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:19,089 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:19,089 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:19,089 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(163))
2020-03-29 20:15:19,089 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:19,089 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(163))
2020-03-29 20:15:19,089 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:19,089 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:19,089 TRACE [want] signal: Closed
2020-03-29 20:15:19,089 TRACE [reqwest::blocking::client] (ThreadId(163)) Receiver is shutdown
2020-03-29 20:15:19,090 TRACE [reqwest::blocking::client] (ThreadId(163)) end runtime::block_on
2020-03-29 20:15:19,090 TRACE [reqwest::blocking::client] (ThreadId(163)) finished
2020-03-29 20:15:19,090 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(163))
2020-03-29 20:15:19,090 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:19,090 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:19,090 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:19,091 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:19,091 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,273 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,332 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,333 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:19,333 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:19,333 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:19,333 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 137, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:19,333 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:19,333 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 137, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:19,334 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:19,334 TRACE [mio::poll] registering with poller
2020-03-29 20:15:19,335 TRACE [reqwest::blocking::client] (ThreadId(164)) start runtime::block_on
2020-03-29 20:15:19,345 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:19,345 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991103s
2020-03-29 20:15:19,345 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,346 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:19,346 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:19,346 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:19,346 TRACE [mio::poll] registering with poller
2020-03-29 20:15:19,346 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:19,346 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:19,346 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:19,346 TRACE [want] signal: Want
2020-03-29 20:15:19,346 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:19,346 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:19,346 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:19,346 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,346 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:19,346 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:19,346 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:19,346 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:19,346 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:19,346 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:19,351 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:19,351 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:19,351 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:19,351 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:19,351 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:19,351 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:19,351 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:19,351 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:19,351 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:19,351 TRACE [want] signal: Want
2020-03-29 20:15:19,351 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:19,351 TRACE [want] signal: Want
2020-03-29 20:15:19,351 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:19,351 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,351 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,351 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:19,352 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:19,352 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:19,352 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:19,352 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:19,352 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:19,352 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:19,352 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:19,352 TRACE [want] signal: Closed
2020-03-29 20:15:19,352 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(164))
2020-03-29 20:15:19,352 TRACE [reqwest::blocking::client] (ThreadId(164)) Receiver is shutdown
2020-03-29 20:15:19,352 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(164))
2020-03-29 20:15:19,352 TRACE [reqwest::blocking::client] (ThreadId(164)) end runtime::block_on
2020-03-29 20:15:19,353 TRACE [reqwest::blocking::client] (ThreadId(164)) finished
2020-03-29 20:15:19,353 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(164))
2020-03-29 20:15:19,353 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:19,353 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:19,353 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:19,353 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:19,353 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,593 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,595 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,595 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:19,595 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:19,596 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:19,596 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 138, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:19,596 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:19,596 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 138, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:19,596 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:19,596 TRACE [mio::poll] registering with poller
2020-03-29 20:15:19,597 TRACE [reqwest::blocking::client] (ThreadId(165)) start runtime::block_on
2020-03-29 20:15:19,607 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:19,607 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,607 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992206s
2020-03-29 20:15:19,607 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:19,608 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:19,608 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:19,608 TRACE [mio::poll] registering with poller
2020-03-29 20:15:19,608 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:19,608 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:19,608 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:19,608 TRACE [want] signal: Want
2020-03-29 20:15:19,608 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:19,608 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:19,608 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:19,608 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,608 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:19,608 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:19,608 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:19,608 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:19,608 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:19,609 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:19,611 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:19,611 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:19,611 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:19,611 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:19,611 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::conn] maybe_notify; read eof
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::conn] State::close()
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Closed, keep_alive: Disabled }
2020-03-29 20:15:19,611 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:19,611 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:19,611 TRACE [want] signal: Closed
2020-03-29 20:15:19,612 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:19,612 TRACE [want] poll_want: closed
2020-03-29 20:15:19,612 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:19,612 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(165))
2020-03-29 20:15:19,612 TRACE [reqwest::blocking::client] (ThreadId(165)) Receiver is shutdown
2020-03-29 20:15:19,612 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(165))
2020-03-29 20:15:19,613 TRACE [reqwest::blocking::client] (ThreadId(165)) end runtime::block_on
2020-03-29 20:15:19,613 TRACE [reqwest::blocking::client] (ThreadId(165)) finished
2020-03-29 20:15:19,613 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(165))
2020-03-29 20:15:19,613 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:19,613 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:19,613 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:19,613 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:19,613 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,849 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,857 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:19,857 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:19,857 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:19,858 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:19,858 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 139, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:19,858 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:19,858 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 139, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:19,858 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:19,858 TRACE [mio::poll] registering with poller
2020-03-29 20:15:19,859 TRACE [reqwest::blocking::client] (ThreadId(166)) start runtime::block_on
2020-03-29 20:15:19,871 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:19,871 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991795s
2020-03-29 20:15:19,871 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,871 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:19,871 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:19,871 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:19,872 TRACE [mio::poll] registering with poller
2020-03-29 20:15:19,872 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:19,872 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:19,872 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:19,872 TRACE [want] signal: Want
2020-03-29 20:15:19,872 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:19,872 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:19,872 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:19,872 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,872 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:19,872 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:19,872 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:19,872 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:19,872 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:19,872 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:19,876 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:19,876 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:19,876 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:19,876 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:19,876 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:19,876 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:19,877 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:19,877 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:19,877 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:19,877 TRACE [want] signal: Want
2020-03-29 20:15:19,877 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:19,877 TRACE [want] signal: Want
2020-03-29 20:15:19,877 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:19,877 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,877 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:19,877 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:19,877 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:19,877 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:19,877 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:19,877 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:19,877 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:19,877 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:19,877 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:19,877 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(166))
2020-03-29 20:15:19,877 TRACE [want] signal: Closed
2020-03-29 20:15:19,877 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(166))
2020-03-29 20:15:19,877 TRACE [reqwest::blocking::client] (ThreadId(166)) Receiver is shutdown
2020-03-29 20:15:19,878 TRACE [reqwest::blocking::client] (ThreadId(166)) end runtime::block_on
2020-03-29 20:15:19,878 TRACE [reqwest::blocking::client] (ThreadId(166)) finished
2020-03-29 20:15:19,878 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(166))
2020-03-29 20:15:19,878 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:19,878 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:19,878 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:19,879 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:19,879 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,105 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,119 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,120 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:20,120 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:20,120 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:20,120 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 140, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:20,120 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:20,120 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 140, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:20,121 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:20,121 TRACE [mio::poll] registering with poller
2020-03-29 20:15:20,121 TRACE [reqwest::blocking::client] (ThreadId(167)) start runtime::block_on
2020-03-29 20:15:20,133 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:20,133 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991354s
2020-03-29 20:15:20,133 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,134 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:20,134 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:20,134 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:20,134 TRACE [mio::poll] registering with poller
2020-03-29 20:15:20,134 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:20,134 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:20,135 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:20,135 TRACE [want] signal: Want
2020-03-29 20:15:20,135 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:20,135 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:20,135 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:20,135 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,135 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:20,136 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:20,136 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:20,136 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:20,136 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:20,136 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:20,140 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:20,140 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:20,140 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:20,140 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:20,140 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:20,140 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:20,140 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:20,140 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:20,140 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:20,140 TRACE [want] signal: Want
2020-03-29 20:15:20,140 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:20,140 TRACE [want] signal: Want
2020-03-29 20:15:20,140 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:20,140 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,141 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,141 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:20,141 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:20,141 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:20,141 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:20,141 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:20,141 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:20,141 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(167))
2020-03-29 20:15:20,143 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:20,143 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(167))
2020-03-29 20:15:20,143 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:20,143 TRACE [want] signal: Closed
2020-03-29 20:15:20,144 TRACE [reqwest::blocking::client] (ThreadId(167)) Receiver is shutdown
2020-03-29 20:15:20,145 TRACE [reqwest::blocking::client] (ThreadId(167)) end runtime::block_on
2020-03-29 20:15:20,145 TRACE [reqwest::blocking::client] (ThreadId(167)) finished
2020-03-29 20:15:20,145 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(167))
2020-03-29 20:15:20,145 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:20,146 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:20,146 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:20,146 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:20,146 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,361 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,382 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,382 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:20,382 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:20,382 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:20,382 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 141, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:20,382 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:20,382 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 141, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:20,383 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:20,383 TRACE [mio::poll] registering with poller
2020-03-29 20:15:20,383 TRACE [reqwest::blocking::client] (ThreadId(168)) start runtime::block_on
2020-03-29 20:15:20,393 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:20,393 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999992376s
2020-03-29 20:15:20,393 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,393 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:20,393 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:20,393 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:20,393 TRACE [mio::poll] registering with poller
2020-03-29 20:15:20,393 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:20,394 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:20,394 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:20,394 TRACE [want] signal: Want
2020-03-29 20:15:20,394 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:20,394 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:20,394 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:20,394 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,394 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:20,394 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:20,394 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:20,394 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:20,394 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:20,394 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:20,399 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:20,399 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:20,399 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:20,399 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:20,399 TRACE [want] signal: Want
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:20,399 TRACE [want] signal: Want
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:20,399 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,399 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,399 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:20,399 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:20,399 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:20,399 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:20,400 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:20,400 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:20,400 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(168))
2020-03-29 20:15:20,400 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:20,400 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(168))
2020-03-29 20:15:20,400 TRACE [want] signal: Closed
2020-03-29 20:15:20,400 TRACE [reqwest::blocking::client] (ThreadId(168)) Receiver is shutdown
2020-03-29 20:15:20,401 TRACE [reqwest::blocking::client] (ThreadId(168)) end runtime::block_on
2020-03-29 20:15:20,402 TRACE [reqwest::blocking::client] (ThreadId(168)) finished
2020-03-29 20:15:20,402 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(168))
2020-03-29 20:15:20,402 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:20,402 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:20,402 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:20,402 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:20,403 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,617 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,644 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,645 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:20,645 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:20,645 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:20,645 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 142, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:20,645 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:20,645 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 142, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:20,645 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:20,646 TRACE [mio::poll] registering with poller
2020-03-29 20:15:20,646 TRACE [reqwest::blocking::client] (ThreadId(169)) start runtime::block_on
2020-03-29 20:15:20,657 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:20,657 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999991594s
2020-03-29 20:15:20,657 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,657 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:20,658 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:20,658 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:20,658 TRACE [mio::poll] registering with poller
2020-03-29 20:15:20,658 DEBUG [hyper::client::connect::http] connected to 127.0.0.1:5001
2020-03-29 20:15:20,658 TRACE [hyper::client::conn] client handshake HTTP/1
2020-03-29 20:15:20,658 TRACE [hyper::client] handshake complete, spawning background dispatcher task
2020-03-29 20:15:20,658 TRACE [want] signal: Want
2020-03-29 20:15:20,658 TRACE [want] signal found waiting giver, notifying
2020-03-29 20:15:20,658 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
2020-03-29 20:15:20,658 TRACE [want] poll_want: taker wants!
2020-03-29 20:15:20,658 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,658 TRACE [hyper::proto::h1::role] Client::encode method=POST, body=Some(Known(40))
2020-03-29 20:15:20,659 TRACE [hyper::proto::h1::encode] sized write, len = 40
2020-03-29 20:15:20,659 TRACE [hyper::proto::h1::io] detected no usage of vectored write, flattening
2020-03-29 20:15:20,659 DEBUG [hyper::proto::h1::io] flushed 170 bytes
2020-03-29 20:15:20,659 DEBUG [hyper::proto::h1::io] flushed 40 bytes
2020-03-29 20:15:20,659 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
2020-03-29 20:15:20,663 TRACE [hyper::proto::h1::conn] Conn::read_head
2020-03-29 20:15:20,663 DEBUG [hyper::proto::h1::io] read 215 bytes
2020-03-29 20:15:20,663 TRACE [hyper::proto::h1::role] Response.parse([Header; 100], [u8; 215])
2020-03-29 20:15:20,663 TRACE [hyper::proto::h1::role] Response.parse Complete(205)
2020-03-29 20:15:20,663 DEBUG [hyper::proto::h1::io] parsed 7 headers
2020-03-29 20:15:20,663 DEBUG [hyper::proto::h1::conn] incoming body is content-length (10 bytes)
2020-03-29 20:15:20,663 TRACE [hyper::proto::h1::decode] decode; state=Length(10)
2020-03-29 20:15:20,663 DEBUG [hyper::proto::h1::conn] incoming body completed
2020-03-29 20:15:20,664 TRACE [hyper::proto::h1::conn] maybe_notify; read_from_io blocked
2020-03-29 20:15:20,664 TRACE [want] signal: Want
2020-03-29 20:15:20,664 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:20,664 TRACE [want] signal: Want
2020-03-29 20:15:20,664 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
2020-03-29 20:15:20,664 TRACE [hyper::client::pool] put; add idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,664 DEBUG [hyper::client::pool] pooling idle connection for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,664 DEBUG [reqwest::async_impl::client] response '200 OK' for http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:20,664 DEBUG [hyper::proto::h1::io] read 0 bytes
2020-03-29 20:15:20,664 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:20,664 TRACE [hyper::proto::h1::conn] found EOF on idle connection, closing
2020-03-29 20:15:20,664 TRACE [hyper::proto::h1::conn] State::close_read()
2020-03-29 20:15:20,664 TRACE [hyper::proto::h1::conn] flushed({role=client}): State { reading: Closed, writing: Init, keep_alive: Disabled }
2020-03-29 20:15:20,664 TRACE [hyper::proto::h1::conn] shut down IO complete
2020-03-29 20:15:20,664 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(169))
2020-03-29 20:15:20,664 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:20,664 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(169))
2020-03-29 20:15:20,664 TRACE [want] signal: Closed
2020-03-29 20:15:20,664 TRACE [reqwest::blocking::client] (ThreadId(169)) Receiver is shutdown
2020-03-29 20:15:20,665 TRACE [reqwest::blocking::client] (ThreadId(169)) end runtime::block_on
2020-03-29 20:15:20,665 TRACE [reqwest::blocking::client] (ThreadId(169)) finished
2020-03-29 20:15:20,665 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(169))
2020-03-29 20:15:20,665 DEBUG [test::network] Deserializing 10 bytes from /rpc/voteRequest
2020-03-29 20:15:20,665 DEBUG [test::network] Deserialized: VoteResponse { term: 1, vote_granted: false, is_candidate_unknown: true }
2020-03-29 20:15:20,666 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:20,666 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:20,666 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,873 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,907 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:20,907 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:20,907 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:20,907 DEBUG [test::storage] Handling SaveHardState
2020-03-29 20:15:20,908 DEBUG [test::network] Handling VoteRequest: VoteRequest { target: 1, term: 143, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:20,908 DEBUG [test::network] Sending msg to node 1 at http://127.0.0.1:5001/rpc/voteRequest
2020-03-29 20:15:20,908 DEBUG [test::network] Serializing: VoteRequest { target: 1, term: 143, candidate_id: 10113747759968278795, last_log_index: 0, last_log_term: 0 }
2020-03-29 20:15:20,908 TRACE [reqwest::blocking::wait] (ThreadId(1)) park without timeout
2020-03-29 20:15:20,908 TRACE [mio::poll] registering with poller
2020-03-29 20:15:20,909 TRACE [reqwest::blocking::client] (ThreadId(170)) start runtime::block_on
2020-03-29 20:15:20,919 TRACE [reqwest::blocking::wait] wait at most 30s
2020-03-29 20:15:20,919 TRACE [hyper::client::pool] checkout waiting for idle connection: ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,919 TRACE [reqwest::blocking::wait] (ThreadId(1)) park timeout 29.999990111s
2020-03-29 20:15:20,919 DEBUG [reqwest::connect] starting new connection: http://127.0.0.1:5001/
2020-03-29 20:15:20,919 TRACE [hyper::client::connect::http] Http::connect; scheme=Some("http"), host=Some("127.0.0.1"), port=Some(Port(5001))
2020-03-29 20:15:20,919 DEBUG [hyper::client::connect::http] connecting to 127.0.0.1:5001
2020-03-29 20:15:20,919 TRACE [mio::poll] registering with poller
2020-03-29 20:15:20,919 TRACE [mio::poll] deregistering handle with poller
2020-03-29 20:15:20,919 TRACE [hyper::client::connect::http] connect error for 127.0.0.1:5001: Os { code: 111, kind: ConnectionRefused, message: "Connection refused" }
2020-03-29 20:15:20,919 TRACE [hyper::client::pool] checkout dropped for ("http", 127.0.0.1:5001)
2020-03-29 20:15:20,919 TRACE [reqwest::blocking::client] closing runtime thread (ThreadId(170))
2020-03-29 20:15:20,919 TRACE [reqwest::blocking::client] signaled close for runtime thread (ThreadId(170))
2020-03-29 20:15:20,919 TRACE [reqwest::blocking::client] (ThreadId(170)) Receiver is shutdown
2020-03-29 20:15:20,920 TRACE [reqwest::blocking::client] (ThreadId(170)) end runtime::block_on
2020-03-29 20:15:20,920 TRACE [reqwest::blocking::client] (ThreadId(170)) finished
2020-03-29 20:15:20,920 TRACE [reqwest::blocking::client] closed runtime thread (ThreadId(170))
2020-03-29 20:15:20,920 ERROR [test::network] Error in response: reqwest::Error { kind: Request, url: "http://127.0.0.1:5001/rpc/voteRequest", source: hyper::Error(Connect, ConnectError("tcp connect error", Os { code: 111, kind: ConnectionRefused, message: "Connection refused" })) }
2020-03-29 20:15:20,920 ERROR [test::network] Error making request: reqwest::Error { kind: Request, url: "http://127.0.0.1:5001/rpc/voteRequest", source: hyper::Error(Connect, ConnectError("tcp connect error", Os { code: 111, kind: ConnectionRefused, message: "Connection refused" })) }
2020-03-29 20:15:20,921 TRACE [tokio_reactor] event Readable Token(4194303)
2020-03-29 20:15:20,921 TRACE [tokio_reactor] loop process - 1 events, 0.000s
2020-03-29 20:15:20,921 TRACE [tokio_reactor] loop process - 0 events, 0.000s
2020-03-29 20:15:21,129 TRACE [tokio_reactor] loop process - 0 events, 0.000s
